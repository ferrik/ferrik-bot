"""
üçï FERRIKBOT v2.1 - MAIN APPLICATION (FINAL FIX)
–ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ Flask, –Ω–µ –≤ if __name__ == '__main__'
"""

import os
import logging
import sys
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler

# ============================================================================
# LOAD ENVIRONMENT
# ============================================================================

load_dotenv()

# ============================================================================
# LOGGING SETUP
# ============================================================================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

# ============================================================================
# FLASK APP INITIALIZATION
# ============================================================================

app = Flask(__name__)

# Telegram bot application (–≥–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞)
bot_application = None

# ============================================================================
# CONFIGURATION
# ============================================================================

class Config:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É"""
    
    # Telegram
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL", "http://localhost:5000")
    ADMIN_IDS = [
        int(id.strip()) for id in os.getenv("ADMIN_IDS", "").split(",") 
        if id.strip()
    ]
    
    # App
    DEBUG = os.getenv("DEBUG", "False").lower() == "true"
    ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
    PORT = int(os.getenv("PORT", 5000))
    
    @staticmethod
    def validate():
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π"""
        if not Config.TELEGRAM_BOT_TOKEN:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not set")
            return False
        return True


config = Config()

# ============================================================================
# TELEGRAM BOT SETUP
# ============================================================================

def setup_handlers(application):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ Telegram –∫–æ–º–∞–Ω–¥"""
    
    logger.info("üìù Setting up Telegram handlers...")
    
    try:
        # –ë–∞–∑–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        async def start_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /start"""
            logger.info(f"‚úÖ /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")
            await update.message.reply_text(
                "üç¥ –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî Ferrik, —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑—ñ —Å–º–∞–∫—É ü§ñ‚ú®\n\n"
                "–©–æ —è –º–æ–∂—É —Ä–æ–±–∏—Ç–∏:\n"
                "‚Ä¢ üîç –®—É–∫–∞—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —â–æ —Ö–æ—á–µ—à\n"
                "‚Ä¢ üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é\n"
                "‚Ä¢ üéÅ –î–∞—Ç–∏ —Ç–æ–±—ñ –±–æ–Ω—É—Å –Ω–∞ –ø–µ—Ä—à—É –∑–∞–∫—É–ø–∫—É\n"
                "‚Ä¢ üí¨ –ü–æ—Ä–∞–¥–∏—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–≤–æ—ó—Ö —Å–º–∞–∫—ñ–≤\n\n"
                "–ì–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç–∏? üëá"
            )
        
        async def help_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /help"""
            logger.info(f"üìö /help –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")
            await update.message.reply_text(
                "üìö *–Ø–∫ –ø—Ä–∞—Ü—é—î Ferrik?*\n\n"
                "1Ô∏è‚É£ /menu ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é\n"
                "2Ô∏è‚É£ –Ω–∞—Ç–∏—Å–Ω–∏ —Ç–æ–≤–∞—Ä ‚Äî –¥–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫\n"
                "3Ô∏è‚É£ /cart ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫\n"
                "4Ô∏è‚É£ –æ—Ñ–æ—Ä–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                parse_mode='Markdown'
            )
        
        async def menu_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /menu"""
            logger.info(f"üìã /menu –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")
            await update.message.reply_text(
                "üìã *–ú–µ–Ω—é:*\n\n"
                "üçï –ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ ‚Äî 180 –≥—Ä–Ω\n"
                "üçî –ë—É—Ä–≥–µ—Ä –ö–ª–∞—Å–∏–∫ ‚Äî 150 –≥—Ä–Ω\n"
                "üåÆ –¢–∞–∫–æ –ú–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–µ ‚Äî 120 –≥—Ä–Ω",
                parse_mode='Markdown'
            )
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("menu", menu_command))
        
        logger.info("‚úÖ All handlers registered")
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Handler registration error: {e}", exc_info=True)
        return False


def create_bot_application():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Telegram bot application"""
    
    global bot_application
    
    logger.info("ü§ñ Creating Telegram bot application...")
    
    TOKEN = config.TELEGRAM_BOT_TOKEN
    
    if not TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN not found!")
        return None
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è application
        bot_application = Application.builder().token(TOKEN).build()
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
        if not setup_handlers(bot_application):
            return None
        
        # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥–∞ —É bot_data
        bot_application.bot_data['config'] = config
        
        logger.info("‚úÖ Bot application created successfully")
        return bot_application
    
    except Exception as e:
        logger.error(f"‚ùå Failed to create bot application: {e}", exc_info=True)
        return None


# ============================================================================
# STARTUP FUNCTION (–í–ò–ö–õ–ò–ö–ê–Ñ–¢–¨–°–Ø –ü–†–ò –°–¢–ê–†–¢–Ü FLASK)
# ============================================================================

def startup():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Flask"""
    
    global bot_application
    
    logger.info("=" * 70)
    logger.info("üöÄ FERRIKBOT v2.1 STARTING...")
    logger.info("=" * 70)
    logger.info("")
    
    # 1Ô∏è‚É£ –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ö–û–ù–§–Ü–ì
    logger.info("üîç Validating configuration...")
    if not config.validate():
        logger.error("‚ùå Configuration validation failed")
        return False
    
    logger.info("‚úÖ Configuration valid")
    logger.info(f"   Token: {config.TELEGRAM_BOT_TOKEN[:20]}...")
    logger.info(f"   Webhook: {config.WEBHOOK_URL}")
    logger.info("")
    
    # 2Ô∏è‚É£ –°–¢–í–û–†–ï–ù–ù–Ø –ë–û–¢–ê
    logger.info("ü§ñ Creating bot application...")
    if not create_bot_application():
        logger.error("‚ùå Failed to create bot application")
        return False
    
    logger.info("‚úÖ Bot application created")
    logger.info("")
    
    # 3Ô∏è‚É£ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ó–ê–ü–£–°–ö
    logger.info("‚úÖ BOT READY!")
    logger.info("")
    logger.info("üìä FEATURES ENABLED:")
    logger.info("  ‚úì /start –∫–æ–º–∞–Ω–¥–∞")
    logger.info("  ‚úì /help –∫–æ–º–∞–Ω–¥–∞")
    logger.info("  ‚úì /menu –∫–æ–º–∞–Ω–¥–∞")
    logger.info("  ‚úì Webhook –æ–±—Ä–æ–±–∫–∞")
    logger.info("")
    logger.info(f"üåê Running on port {config.PORT}")
    logger.info(f"üåç Environment: {config.ENVIRONMENT}")
    logger.info(f"üìç Telegram Webhook: {config.WEBHOOK_URL}/webhook")
    logger.info("")
    logger.info("=" * 70)
    logger.info("")
    
    return True


# ============================================================================
# FLASK ROUTES
# ============================================================================

@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return jsonify({
        "status": "üü¢ online",
        "bot": "üçï FerrikBot v2.1",
        "version": "2.1.0",
        "bot_initialized": bot_application is not None,
        "environment": config.ENVIRONMENT,
        "debug": config.DEBUG
    })


@app.route('/health', methods=['GET'])
def health():
    """Health check"""
    is_healthy = bot_application is not None
    return jsonify({
        "status": "healthy" if is_healthy else "initializing",
        "bot_initialized": is_healthy,
        "timestamp": __import__('datetime').datetime.now().isoformat(),
    }), 200 if is_healthy else 503


# ============================================================================
# üî• WEBHOOK ROUTES
# ============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û—Å–Ω–æ–≤–Ω–∏–π webhook –º–∞—Ä—à—Ä—É—Ç"""
    logger.info("üì® Webhook /webhook –æ—Ç—Ä–∏–º–∞–≤ –∑–∞–ø–∏—Ç")
    return process_webhook(request)


@app.route('/webhook/webhook', methods=['POST'])
def webhook_double():
    """–†–µ–∑–µ—Ä–≤–Ω–∏–π webhook –º–∞—Ä—à—Ä—É—Ç"""
    logger.warning("‚ö†Ô∏è Webhook /webhook/webhook –æ—Ç—Ä–∏–º–∞–≤ –∑–∞–ø–∏—Ç (—Å—Ç–∞—Ä–∏–π –º–∞—Ä—à—Ä—É—Ç)")
    return process_webhook(request)


def process_webhook(req):
    """–°–ø—ñ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ webhook –∑–∞–ø–∏—Ç—ñ–≤"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏, —á–∏ –±–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
        if not bot_application:
            logger.error("‚ùå Bot application not initialized")
            return jsonify({"ok": False, "error": "Bot not initialized"}), 500
        
        # –û—Ç—Ä–∏–º–∞–π JSON –≤—ñ–¥ Telegram
        data = req.get_json()
        
        if not data:
            logger.error("‚ùå Webhook: –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ")
            return jsonify({"ok": False}), 400
        
        logger.info(f"üì® Update received: {data.get('update_id')}")
        
        # –†–æ–∑–ø–∞—Ä—Å Update –≤—ñ–¥ Telegram
        update = Update.de_json(data, bot_application.bot)
        
        if not update:
            logger.error("‚ùå Failed to parse update")
            return jsonify({"ok": False}), 400
        
        # –û–±—Ä–æ–±–∏—Ç–∏ –º–µ—Å—ñ–¥–∂ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        import asyncio
        
        async def process():
            await bot_application.process_update(update)
        
        try:
            asyncio.run(process())
        except RuntimeError:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(process())
        
        logger.info("‚úÖ Update processed")
        return jsonify({"ok": True}), 200
    
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        return jsonify({"ok": False}), 500


# ============================================================================
# ERROR HANDLERS
# ============================================================================

@app.errorhandler(404)
def not_found(error):
    """404 –æ–±—Ä–æ–±–Ω–∏–∫"""
    return jsonify({
        "error": "Not found",
        "status": 404,
        "endpoints": ["/", "/health", "/webhook", "/webhook/webhook"]
    }), 404


@app.errorhandler(500)
def internal_error(error):
    """500 –æ–±—Ä–æ–±–Ω–∏–∫"""
    logger.error(f"‚ùå Internal server error: {error}")
    return jsonify({
        "error": "Internal server error",
        "status": 500
    }), 500


# ============================================================================
# üî• FLASK BEFORE_FIRST_REQUEST (–ó–ê–ü–£–°–ö–ê–Ñ–¢–¨–°–Ø –ü–†–ò –ü–ï–†–®–û–ú–£ –ó–ê–ü–ò–¢–Ü)
# ============================================================================

initialized = False

@app.before_request
def initialize_bot_on_first_request():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π –±–æ—Ç –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ –¥–æ Flask"""
    global initialized
    
    if not initialized:
        logger.info("üîî First request detected, initializing bot...")
        startup()
        initialized = True


# ============================================================================
# MAIN
# ============================================================================

if __name__ == '__main__':
    logger.info("üçï Initializing FerrikBot...")
    logger.info("")
    
    # –ó–∞–ø—É—Å–∫ Flask
    app.run(
        host="0.0.0.0",
        port=config.PORT,
        debug=config.DEBUG,
        use_reloader=False
    )
