"""
üóÑÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏ —Ç–∞ —Å—Ç–∞–Ω–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤

–ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω–∏ –≤ –ë–î –∑–∞–º—ñ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
–í–ò–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î SQLite –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
"""
import json
import logging
from typing import Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class SessionManager:
    """
    –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    –ó–±–µ—Ä—ñ–≥–∞—î:
    - –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (STATE_*)
    - –î–∞–Ω—ñ —Å–µ—Å—ñ—ó (—Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è checkout)
    - –ö–æ—à–∏–∫ –ø–æ–∫—É–ø–æ–∫
    """
    
    def __init__(self, database=None, db_path='bot.db'):
        """
        Args:
            database: –û–±'—î–∫—Ç database –∑ –º–µ—Ç–æ–¥–∞–º–∏ execute, fetchone, commit
                      –ê–ë–û None (—Ç–æ–¥—ñ —Å—Ç–≤–æ—Ä–∏—Ç—å –≤–ª–∞—Å–Ω–µ SQLite –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è)
            db_path: –®–ª—è—Ö –¥–æ SQLite –ë–î (—è–∫—â–æ database=None)
        """
        if database is None:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω–µ SQLite –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            import sqlite3
            self.db = sqlite3.connect(db_path, check_same_thread=False)
            self.db.row_factory = sqlite3.Row
            self._own_connection = True
            logger.info("‚úÖ SessionManager: Created own SQLite connection")
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ —Å–ø—Ä–∞–≤–∂–Ω—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            if hasattr(database, 'execute') and hasattr(database, 'commit'):
                self.db = database
                self._own_connection = False
                logger.info("‚úÖ SessionManager: Using provided database connection")
            else:
                # Fallback: —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
                import sqlite3
                self.db = sqlite3.connect(db_path, check_same_thread=False)
                self.db.row_factory = sqlite3.Row
                self._own_connection = True
                logger.warning("‚ö†Ô∏è SessionManager: Provided object has no execute(), creating own connection")
        
        self._ensure_tables()
    
    def _ensure_tables(self):
        """–°—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î"""
        try:
            # –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            self.db.execute("""
                CREATE TABLE IF NOT EXISTS user_states (
                    user_id INTEGER PRIMARY KEY,
                    state TEXT DEFAULT 'STATE_IDLE',
                    state_data TEXT DEFAULT '{}',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü—è –∫–æ—à–∏–∫—ñ–≤
            self.db.execute("""
                CREATE TABLE IF NOT EXISTS user_carts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    item_id TEXT,
                    quantity INTEGER DEFAULT 1,
                    price REAL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user_id, item_id)
                )
            """)
            
            # –Ü–Ω–¥–µ–∫—Å–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            self.db.execute("""
                CREATE INDEX IF NOT EXISTS idx_carts_user 
                ON user_carts(user_id)
            """)
            
            self.db.commit()
            logger.info("‚úÖ Session tables initialized")
            
        except Exception as e:
            logger.error(f"‚ùå Error creating session tables: {e}")
    
    # =========================================================================
    # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–∞–º–∏
    # =========================================================================
    
    def get_state(self, user_id: int) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            row = self.db.execute(
                "SELECT state FROM user_states WHERE user_id = ?",
                (user_id,)
            ).fetchone()
            
            return row[0] if row else 'STATE_IDLE'
            
        except Exception as e:
            logger.error(f"‚ùå Error getting state for {user_id}: {e}")
            return 'STATE_IDLE'
    
    def set_state(self, user_id: int, state: str, data: Optional[Dict] = None):
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            state_data = json.dumps(data or {})
            
            self.db.execute("""
                INSERT INTO user_states (user_id, state, state_data, updated_at)
                VALUES (?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                    state = excluded.state,
                    state_data = excluded.state_data,
                    updated_at = excluded.updated_at
            """, (user_id, state, state_data, datetime.now()))
            
            self.db.commit()
            logger.debug(f"‚úÖ State set for {user_id}: {state}")
            
        except Exception as e:
            logger.error(f"‚ùå Error setting state for {user_id}: {e}")
    
    def get_state_data(self, user_id: int) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            row = self.db.execute(
                "SELECT state_data FROM user_states WHERE user_id = ?",
                (user_id,)
            ).fetchone()
            
            if row and row[0]:
                return json.loads(row[0])
            return {}
            
        except Exception as e:
            logger.error(f"‚ùå Error getting state data for {user_id}: {e}")
            return {}
    
    def clear_state(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        self.set_state(user_id, 'STATE_IDLE', {})
    
    # =========================================================================
    # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—à–∏–∫–æ–º
    # =========================================================================
    
    def add_to_cart(self, user_id: int, item_id: str, quantity: int = 1, price: float = 0):
        """–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—à–∏–∫"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ —î
            existing = self.db.execute("""
                SELECT quantity FROM user_carts 
                WHERE user_id = ? AND item_id = ?
            """, (user_id, item_id)).fetchone()
            
            if existing:
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                new_qty = existing[0] + quantity
                self.db.execute("""
                    UPDATE user_carts 
                    SET quantity = ?, updated_at = ?
                    WHERE user_id = ? AND item_id = ?
                """, (new_qty, datetime.now(), user_id, item_id))
            else:
                # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π
                self.db.execute("""
                    INSERT INTO user_carts (user_id, item_id, quantity, price, updated_at)
                    VALUES (?, ?, ?, ?, ?)
                """, (user_id, item_id, quantity, price, datetime.now()))
            
            self.db.commit()
            logger.debug(f"‚úÖ Added to cart: user={user_id}, item={item_id}, qty={quantity}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error adding to cart: {e}")
            return False
    
    def get_cart(self, user_id: int) -> list:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            rows = self.db.execute("""
                SELECT item_id, quantity, price 
                FROM user_carts 
                WHERE user_id = ?
                ORDER BY created_at DESC
            """, (user_id,)).fetchall()
            
            return [
                {
                    'id': row[0],
                    'quantity': row[1],
                    'price': row[2]
                }
                for row in rows
            ]
            
        except Exception as e:
            logger.error(f"‚ùå Error getting cart for {user_id}: {e}")
            return []
    
    def update_cart_quantity(self, user_id: int, item_id: str, quantity: int):
        """–û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É"""
        try:
            if quantity <= 0:
                # –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–æ—à–∏–∫–∞
                self.remove_from_cart(user_id, item_id)
            else:
                self.db.execute("""
                    UPDATE user_carts 
                    SET quantity = ?, updated_at = ?
                    WHERE user_id = ? AND item_id = ?
                """, (quantity, datetime.now(), user_id, item_id))
                self.db.commit()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error updating cart quantity: {e}")
            return False
    
    def remove_from_cart(self, user_id: int, item_id: str):
        """–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –∫–æ—à–∏–∫–∞"""
        try:
            self.db.execute("""
                DELETE FROM user_carts 
                WHERE user_id = ? AND item_id = ?
            """, (user_id, item_id))
            self.db.commit()
            logger.debug(f"üóëÔ∏è Removed from cart: user={user_id}, item={item_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error removing from cart: {e}")
            return False
    
    def clear_cart(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å –∫–æ—à–∏–∫"""
        try:
            self.db.execute("""
                DELETE FROM user_carts WHERE user_id = ?
            """, (user_id,))
            self.db.commit()
            logger.info(f"üóëÔ∏è Cart cleared for user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error clearing cart: {e}")
            return False
    
    def get_cart_total(self, user_id: int) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∫–æ—à–∏–∫–∞"""
        try:
            row = self.db.execute("""
                SELECT SUM(quantity * price) 
                FROM user_carts 
                WHERE user_id = ?
            """, (user_id,)).fetchone()
            
            return float(row[0] or 0)
            
        except Exception as e:
            logger.error(f"‚ùå Error calculating cart total: {e}")
            return 0.0
    
    def get_cart_count(self, user_id: int) -> int:
        """–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–æ—à–∏–∫—É"""
        try:
            row = self.db.execute("""
                SELECT SUM(quantity) 
                FROM user_carts 
                WHERE user_id = ?
            """, (user_id,)).fetchone()
            
            return int(row[0] or 0)
            
        except Exception as e:
            logger.error(f"‚ùå Error getting cart count: {e}")
            return 0
    
    def close(self):
        """–ó–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ –≤–ª–∞—Å–Ω–µ"""
        if self._own_connection and self.db:
            try:
                self.db.close()
                logger.info("‚úÖ SessionManager: Database connection closed")
            except Exception as e:
                logger.error(f"‚ùå Error closing database: {e}")


# ============================================================================
# Backward compatibility wrapper (–¥–ª—è –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É)
# ============================================================================

class LegacyDictWrapper:
    """
    –û–±–≥–æ—Ä—Ç–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º
    
    –ü—Ä–∞—Ü—é—î —è–∫ —Å–ª–æ–≤–Ω–∏–∫, –∞–ª–µ –∑–±–µ—Ä—ñ–≥–∞—î –≤ –ë–î
    """
    def __init__(self, session_manager, dict_type='states'):
        self.sm = session_manager
        self.dict_type = dict_type
    
    def __getitem__(self, user_id):
        if self.dict_type == 'states':
            return self.sm.get_state(user_id)
        else:  # carts
            return self.sm.get_cart(user_id)
    
    def __setitem__(self, user_id, value):
        if self.dict_type == 'states':
            if isinstance(value, dict):
                self.sm.set_state(user_id, value.get('state'), value.get('data'))
            else:
                self.sm.set_state(user_id, value)
    
    def get(self, user_id, default=None):
        try:
            return self[user_id]
        except:
            return default
