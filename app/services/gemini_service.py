"""
ü§ñ GEMINI SERVICE - Google AI Integration
–ü–æ–≤–Ω–∏–π —Ñ–∞–π–ª, –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞ GitHub
"""
import json
import logging
import time
from typing import List, Dict, Any, Optional

try:
    import google.generativeai as genai
except ImportError:
    genai = None

logger = logging.getLogger(__name__)


class GeminiService:
    """
    –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Gemini AI
    
    –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
    - –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ä–æ–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    - –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–∞–º—ñ—Ä—É (–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è/–º–µ–Ω—é/—ñ–Ω—à–µ)
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤
    - –ü–æ—à—É–∫ –ø–æ –º–µ–Ω—é
    """
    
    def __init__(self, api_key: str, model_name: str = "gemini-1.5-flash"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Gemini —Å–µ—Ä–≤—ñ—Å—É
        
        Args:
            api_key: API –∫–ª—é—á –≤—ñ–¥ Google AI Studio
            model_name: –ù–∞–∑–≤–∞ –º–æ–¥–µ–ª—ñ (gemini-1.5-flash —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞)
        """
        self.api_key = api_key
        self.model_name = model_name
        self.model = None
        self.last_request_time = {}  # –î–ª—è rate limiting
        
        logger.info(f"ü§ñ Initializing Gemini Service: {model_name}")
        
        if not api_key:
            logger.error("‚ùå GEMINI_API_KEY not provided!")
            raise ValueError("GEMINI_API_KEY is required")
        
        self._initialize()
    
    def _initialize(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API"""
        try:
            if not genai:
                logger.error("‚ùå google-generativeai not installed!")
                raise ImportError("google-generativeai is required")
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API
            genai.configure(api_key=self.api_key)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
            self.model = genai.GenerativeModel(
                model_name=self.model_name,
                generation_config={
                    'temperature': 0.7,
                    'max_output_tokens': 1000,
                    'top_p': 0.95,
                    'top_k': 40,
                }
            )
            
            logger.info(f"‚úÖ Gemini initialized: {self.model_name}")
        
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Gemini: {e}")
            raise
    
    # ========================================================================
    # RATE LIMITING
    # ========================================================================
    
    def _check_rate_limit(self, user_id: int, max_requests: int = 5, 
                         time_window: int = 60) -> tuple[bool, Optional[int]]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limiting
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            max_requests: –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Ç—ñ–≤
            time_window: –ß–∞—Å–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ (—Å–µ–∫—É–Ω–¥–∏)
        
        Returns:
            (allowed: bool, wait_seconds: Optional[int])
        """
        now = time.time()
        
        if user_id not in self.last_request_time:
            self.last_request_time[user_id] = []
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Ç–∏ –∑–∞ –º–µ–∂–∞–º–∏ —á–∞—Å–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
        self.last_request_time[user_id] = [
            req_time for req_time in self.last_request_time[user_id]
            if now - req_time < time_window
        ]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª—ñ–º—ñ—Ç
        if len(self.last_request_time[user_id]) < max_requests:
            self.last_request_time[user_id].append(now)
            return True, None
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        oldest = self.last_request_time[user_id][0]
        wait_time = int(time_window - (now - oldest)) + 1
        
        return False, max(0, wait_time)
    
    # ========================================================================
    # –û–ë–†–û–ë–ö–ê –ó–ê–ú–û–í–õ–ï–ù–¨
    # ========================================================================
    
    def process_order_request(
        self,
        user_id: int,
        user_message: str,
        menu_items: List[Dict[str, Any]],
        user_cart: List[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ AI
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            menu_items: –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏
            user_cart: –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Returns:
            {
                'action': 'add_to_cart' | 'show_menu' | 'recommend' | 'info',
                'items': [...],  # –ó–Ω–∞–π–¥–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏
                'message': '–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É',
                'success': True/False
            }
        """
        
        # 1Ô∏è‚É£ –ü–ï–†–ï–í–Ü–†–ö–ê RATE LIMITING
        allowed, wait_time = self._check_rate_limit(user_id)
        
        if not allowed:
            logger.warning(f"‚è±Ô∏è Rate limit hit for user {user_id}, wait {wait_time}s")
            return {
                'action': 'error',
                'message': f"‚è±Ô∏è –ó–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤! –ß–µ–∫–∞–π—Ç–µ {wait_time} —Å–µ–∫",
                'success': False
            }
        
        # 2Ô∏è‚É£ –ü–û–ë–£–î–û–í–ê –ü–†–û–ú–ü–¢–£
        prompt = self._build_order_prompt(user_message, menu_items, user_cart)
        
        try:
            # 3Ô∏è‚É£ –ó–ê–ü–ò–¢ –î–û GEMINI
            logger.info(f"ü§ñ Sending AI request for user {user_id}")
            response = self.model.generate_content(prompt)
            
            # 4Ô∏è‚É£ –ü–ê–†–°–ò–ù–ì –í–Ü–î–ü–û–í–Ü–î–Ü
            result = self._parse_ai_response(response.text, menu_items)
            
            logger.info(f"‚úÖ AI response received: action={result.get('action')}")
            return result
        
        except Exception as e:
            logger.error(f"‚ùå Gemini API error: {e}")
            return {
                'action': 'error',
                'message': "‚ùå –ü–æ–º–∏–ª–∫–∞ AI –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ",
                'success': False
            }
    
    def _build_order_prompt(
        self,
        user_message: str,
        menu_items: List[Dict[str, Any]],
        user_cart: List[Dict[str, Any]] = None
    ) -> str:
        """–ü–æ–±—É–¥–æ–≤–∞ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è AI"""
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é
        menu_text = "–î–û–°–¢–£–ü–ù–ï –ú–ï–ù–Æ:\n"
        for item in menu_items[:20]:  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è –∫—Ä–∞—ó —Ç–æ–∫–µ–Ω—ñ–≤
            name = item.get('name', 'Unknown')
            category = item.get('category', 'Other')
            price = item.get('price', 0)
            menu_text += f"- {name} ({category}) - {price} –≥—Ä–Ω\n"
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ—à–∏–∫–∞ (—è–∫—â–æ —î)
        cart_text = "–ü–û–¢–û–ß–ù–ò–ô –ö–û–®–ò–ö:\n"
        if user_cart:
            for item in user_cart:
                name = item.get('name', 'Unknown')
                qty = item.get('quantity', 1)
                cart_text += f"- {name} x{qty}\n"
        else:
            cart_text += "–ü–æ—Ä–æ–∂–Ω—ñ–π\n"
        
        # –û–°–ù–û–í–ù–ò–ô –ü–†–û–ú–ü–¢
        prompt = f"""ü§ñ –¢–∏ - –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ FerrikFoot.

{menu_text}

{cart_text}

–ó–ê–ü–ò–¢ –ö–û–†–ò–°–¢–£–í–ê–ß–ê: "{user_message}"

–¢–í–û–á –Ü–ù–°–¢–†–£–ö–¶–Ü–á:
1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç
2. –í–∏–∑–Ω–∞—á –Ω–∞–º—ñ—Ä:
   - "add_to_cart" - —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–∞–º–æ–≤–∏—Ç–∏
   - "show_menu" - —è–∫—â–æ —Ö–æ—á–µ –ø–æ–±–∞—á–∏—Ç–∏ –º–µ–Ω—é
   - "recommend" - —è–∫—â–æ —Ö–æ—á–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
   - "info" - –¥–ª—è —ñ–Ω—à–∏—Ö –ø–∏—Ç–∞–Ω—å
3. –ó–Ω–∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –º–µ–Ω—é (—è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ)
4. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ —Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é

‚ö†Ô∏è –û–ë–û–í'–Ø–ó–ö–û–í–û –í–Ü–î–ü–û–í–Ü–î–ê–ô –£ –§–û–†–ú–ê–¢–Ü JSON:
{{
    "action": "add_to_cart" –∞–±–æ "show_menu" –∞–±–æ "recommend" –∞–±–æ "info",
    "items": [
        {{"id": "—Ç–æ–≤–∞—Ä—É_–∞–π–¥—ñ", "name": "–ù–∞–∑–≤–∞", "price": 120, "quantity": 1}}
    ],
    "message": "–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"
}}

–ü–†–ê–í–ò–õ–ê:
‚úì –®—É–∫–∞–π —Ç–æ–≤–∞—Ä–∏ –∑–∞ —á–∞—Å—Ç–∫–æ–≤–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏
‚úì –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ—à - –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —Å—Ö–æ–∂—ñ
‚úì –ó–∞–≤–∂–¥–∏ –±—É–¥—å –≤–≤—ñ—á–ª–∏–≤–∏–º
‚úì –í–Ü–î–ü–û–í–Ü–î–ê–ô –¢–Ü–õ–¨–ö–ò JSON –ë–ï–ó –î–û–î–ê–¢–ö–û–í–û–ì–û –¢–ï–ö–°–¢–£!
"""
        
        return prompt
    
    def _parse_ai_response(
        self,
        ai_text: str,
        menu_items: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI"""
        
        try:
            # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥ markdown
            clean_text = ai_text.strip()
            if clean_text.startswith('```json'):
                clean_text = clean_text[7:]
            if clean_text.startswith('```'):
                clean_text = clean_text[3:]
            if clean_text.endswith('```'):
                clean_text = clean_text[:-3]
            
            clean_text = clean_text.strip()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON
            result = json.loads(clean_text)
            
            # –í–ê–õ–Ü–î–ê–¶–Ü–Ø –¢–û–í–ê–†–Ü–í
            if result.get('action') == 'add_to_cart' and result.get('items'):
                validated_items = []
                
                for item in result['items']:
                    item_id = item.get('id')
                    item_name = item.get('name', '').lower()
                    
                    # –®—É–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä –≤ –º–µ–Ω—é
                    found_item = None
                    for menu_item in menu_items:
                        if (str(menu_item.get('id')) == str(item_id) or 
                            menu_item.get('name', '').lower() == item_name or
                            item_name in menu_item.get('name', '').lower()):
                            found_item = menu_item
                            break
                    
                    if found_item:
                        validated_items.append({
                            'id': found_item['id'],
                            'name': found_item['name'],
                            'price': found_item.get('price', 0),
                            'quantity': int(item.get('quantity', 1))
                        })
                
                result['items'] = validated_items
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            if 'action' not in result:
                result['action'] = 'info'
            if 'message' not in result:
                result['message'] = '–í–∏–∫–æ–Ω–∞–Ω–æ'
            if 'items' not in result:
                result['items'] = []
            
            result['success'] = True
            
            return result
        
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Failed to parse AI JSON: {e}\nText: {ai_text[:200]}")
            
            return {
                'action': 'info',
                'message': ai_text if len(ai_text) < 500 else '–°–ø—Ä–æ–±—É–π—Ç–µ /menu –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–µ–Ω—é',
                'items': [],
                'success': False
            }
        
        except Exception as e:
            logger.error(f"‚ùå Error parsing AI response: {e}")
            return {
                'action': 'error',
                'message': '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ',
                'items': [],
                'success': False
            }
    
    # ========================================================================
    # –ü–û–®–£–ö –¢–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
    # ========================================================================
    
    def search_items(
        self,
        query: str,
        menu_items: List[Dict[str, Any]],
        max_results: int = 5
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º
        
        Args:
            query: –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
            menu_items: –ú–µ–Ω—é –¥–ª—è –ø–æ—à—É–∫—É
            max_results: –ú–∞–∫—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        """
        
        query_lower = query.lower()
        results = []
        
        for item in menu_items:
            name = item.get('name', '').lower()
            category = item.get('category', '').lower()
            description = item.get('description', '').lower()
            
            # –ü—Ä–æ—Å—Ç–µ –∑–±—ñ–≥–∞–Ω–Ω—è
            if (query_lower in name or 
                query_lower in category or 
                query_lower in description):
                results.append(item)
        
        return results[:max_results]
    
    def get_recommendations(
        self,
        user_mood: Optional[str] = None,
        menu_items: List[Dict[str, Any]] = None,
        max_recommendations: int = 3
    ) -> Dict[str, Any]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—Ä–æ—é
        
        Args:
            user_mood: –ù–∞—Å—Ç—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (happy, sad, busy, lazy)
            menu_items: –ú–µ–Ω—é –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
            max_recommendations: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        
        Returns:
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        """
        
        mood_prompts = {
            'happy': "—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —è—Å–∫—Ä–∞–≤—ñ, —Å–≤—è—Ç–∫–æ–≤—ñ —Å—Ç—Ä–∞–≤–∏",
            'sad': "—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É, —Ç–µ–ø–ª—É —ó–∂—É",
            'busy': "—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —à–≤–∏–¥–∫—ñ, –ª–µ–≥–∫—ñ —Å—Ç—Ä–∞–≤–∏",
            'lazy': "—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –≥–æ—Ç–æ–≤—ñ, –ª–µ–≥–∫—ñ –±–ª—é–¥–∞",
        }
        
        prompt_end = mood_prompts.get(user_mood, "—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç—Ä–∞–≤–∏")
        
        if not menu_items:
            return {
                'success': False,
                'message': '–ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ',
                'items': []
            }
        
        try:
            prompt = f"""–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É. {prompt_end}

–ú–µ–Ω—é:
{self._format_menu_for_prompt(menu_items[:15])}

–†–µ–∫–æ–º–µ–Ω–¥—É–π {max_recommendations} —Å—Ç—Ä–∞–≤–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
{{
    "items": [
        {{"id": "1", "name": "–ù–∞–∑–≤–∞", "reason": "–ö–æ—Ä–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω–∞"}}
    ],
    "message": "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏"
}}
"""
            
            response = self.model.generate_content(prompt)
            result = json.loads(response.text.strip('```json\n').strip('```'))
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            validated = []
            for rec in result.get('items', []):
                for item in menu_items:
                    if str(item.get('id')) == str(rec.get('id')):
                        validated.append(item)
                        break
            
            return {
                'success': True,
                'message': result.get('message', '–û—Å—å –º–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó'),
                'items': validated[:max_recommendations]
            }
        
        except Exception as e:
            logger.error(f"‚ùå Recommendations error: {e}")
            return {
                'success': False,
                'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π',
                'items': []
            }
    
    def _format_menu_for_prompt(self, menu_items: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–º–ø—Ç—É"""
        text = ""
        for item in menu_items:
            name = item.get('name', '')
            price = item.get('price', 0)
            category = item.get('category', '')
            text += f"- {name} ({category}) - {price} –≥—Ä–Ω\n"
        return text
    
    # ========================================================================
    # –£–¢–ò–õ–Ü–¢–ò
    # ========================================================================
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gemini API"""
        try:
            response = self.model.generate_content("–°–∫–∞–∂–∏ 'OK' —è–∫—â–æ —Ç–∏ –ø—Ä–∞—Ü—é—î—à")
            logger.info(f"‚úÖ Gemini API test successful")
            return True
        except Exception as e:
            logger.error(f"‚ùå Gemini API test failed: {e}")
            return False
    
    def generate_response(self, prompt: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
        
        Returns:
            –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI
        """
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            logger.error(f"‚ùå Error generating response: {e}")
            return "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."


# ============================================================================
# –¢–ï–°–¢–£–í–ê–ù–ù–Ø (–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
# ============================================================================

if __name__ == "__main__":
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    api_key = os.getenv("GEMINI_API_KEY")
    
    if not api_key:
        print("‚ùå GEMINI_API_KEY not set in .env")
        exit(1)
    
    print("=" * 60)
    print("üß™ TESTING GEMINI SERVICE")
    print("=" * 60)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    service = GeminiService(api_key)
    
    # –¢–µ—Å—Ç–æ–≤–∏–π –º–µ–Ω—é
    menu = [
        {'id': '1', 'name': '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 'category': 'Pizza', 'price': 120},
        {'id': '2', 'name': '–ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ', 'category': 'Pizza', 'price': 150},
        {'id': '3', 'name': '–¶–µ–∑–∞—Ä', 'category': 'Salad', 'price': 80},
        {'id': '4', 'name': 'Cola', 'category': 'Drink', 'price': 30},
    ]
    
    # –¢–µ—Å—Ç 1: Connection
    print("\n1Ô∏è‚É£ Testing connection...")
    if service.test_connection():
        print("‚úÖ Connection OK")
    else:
        print("‚ùå Connection failed")
    
    # –¢–µ—Å—Ç 2: Order processing
    print("\n2Ô∏è‚É£ Testing order processing...")
    result = service.process_order_request(
        user_id=123,
        user_message="–•–æ—á—É –ø—ñ—Ü—É –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
        menu_items=menu
    )
    print(f"Action: {result.get('action')}")
    print(f"Message: {result.get('message')}")
    print(f"Items: {len(result.get('items', []))} found")
    
    # –¢–µ—Å—Ç 3: Search
    print("\n3Ô∏è‚É£ Testing search...")
    search_result = service.search_items("–ø—ñ—Ü–∞", menu)
    print(f"Found {len(search_result)} items")
    
    print("\n" + "=" * 60)
    print("‚úÖ All tests completed!")
    print("=" * 60)
