"""
üç¥ Ferrik Bot - –¢–≤—ñ–π —Å–º–∞–∫–æ–≤–∏–π —Å—É–ø—É—Ç–Ω–∏–∫
–í–µ—Ä—Å—ñ—è 2.0 - –¢–µ–ø–ª—ñ—à–∏–π, —Ä–æ–∑—É–º–Ω—ñ—à–∏–π, –ø—Ä–∏–≤–∞–±–ª–∏–≤—ñ—à–∏–π!
"""
import os
import json
import logging
from datetime import datetime
from flask import Flask, request
import requests
from dotenv import load_dotenv

# ============================================================================
# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø
# ============================================================================
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# ============================================================================
# –Ü–ú–ü–û–†–¢–ò - –í–ò–ü–†–ê–í–õ–ï–ù–û!
# ============================================================================
# ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–Ü –Ü–ú–ü–û–†–¢–ò - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π app.services, app.database
try:
    from app.utils.validators import (
        safe_parse_price, 
        validate_phone, 
        normalize_phone, 
        validate_address
    )
    logger.info("‚úÖ Utils imported successfully")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Utils import warning: {e}")

# ============================================================================
# –ï–ú–û–î–ñ–Ü –¢–ê –¢–ï–ö–°–¢–ò (–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –±–æ—Ç–∞)
# ============================================================================
EMOJI = {
    'hello': 'üëã',
    'food': 'üç¥',
    'pizza': 'üçï',
    'burger': 'üçî',
    'sushi': 'üç£',
    'cart': 'üõí',
    'money': 'üí∞',
    'fire': 'üî•',
    'star': '‚≠ê',
    'gift': 'üéÅ',
    'heart': '‚ù§Ô∏è',
    'rocket': 'üöÄ',
    'sparkles': '‚ú®',
    'chef': 'üë®‚Äçüç≥',
    'location': 'üìç',
    'phone': 'üì±',
    'time': '‚è∞',
    'check': '‚úÖ',
    'loading': '‚è≥',
    'party': 'üéâ',
    'wink': 'üòâ',
    'yummy': 'üòã',
    'search': 'üîç',
    'settings': '‚öôÔ∏è',
    'history': 'üìú',
    'badge': 'üèÜ',
    'crown': 'üëë'
}

# ============================================================================
# –°–¢–ê–ù–ò –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# ============================================================================
STATE_IDLE = 'idle'
STATE_BROWSING = 'browsing'
STATE_AWAITING_PHONE = 'awaiting_phone'
STATE_AWAITING_ADDRESS = 'awaiting_address'
STATE_CONFIRMING = 'confirming'

# ============================================================================
# IN-MEMORY STORAGE (–ø–æ–∫–∏ –±–µ–∑ –ë–î)
# ============================================================================
user_states = {}
user_carts = {}
user_orders = {}

# ============================================================================
# –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á TELEGRAM API
# ============================================================================

def send_message(chat_id, text, reply_markup=None, parse_mode='HTML'):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': parse_mode
    }
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    
    try:
        response = requests.post(f"{TELEGRAM_API}/sendMessage", json=payload, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå Send message error: {e}")
        return None


def answer_callback(callback_id, text=None, show_alert=False):
    """–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback"""
    payload = {
        'callback_query_id': callback_id,
        'show_alert': show_alert
    }
    if text:
        payload['text'] = text
    
    try:
        requests.post(f"{TELEGRAM_API}/answerCallbackQuery", json=payload, timeout=5)
    except Exception as e:
        logger.error(f"‚ùå Answer callback error: {e}")


# ============================================================================
# –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# ============================================================================

def get_main_keyboard():
    """–ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –µ–º–æ–¥–∂—ñ"""
    return {
        'inline_keyboard': [
            [
                {'text': f"{EMOJI['food']} –ú–µ–Ω—é", 'callback_data': 'menu'},
                {'text': f"{EMOJI['search']} –ü–æ—à—É–∫", 'callback_data': 'search'}
            ],
            [
                {'text': f"{EMOJI['cart']} –ö–æ—à–∏–∫", 'callback_data': 'cart'},
                {'text': f"{EMOJI['gift']} –ê–∫—Ü—ñ—ó", 'callback_data': 'promos'}
            ],
            [
                {'text': f"{EMOJI['history']} –Ü—Å—Ç–æ—Ä—ñ—è", 'callback_data': 'history'},
                {'text': f"{EMOJI['badge']} –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è", 'callback_data': 'badges'}
            ]
        ]
    }


def get_cart_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–æ—à–∏–∫–∞"""
    return {
        'inline_keyboard': [
            [
                {'text': f"{EMOJI['check']} –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", 'callback_data': 'checkout'}
            ],
            [
                {'text': f"üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", 'callback_data': 'clear_cart'},
                {'text': f"‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", 'callback_data': 'menu'}
            ]
        ]
    }


# ============================================================================
# –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================================================

def handle_start(user_id, username):
    """–û–±—Ä–æ–±–∫–∞ /start"""
    is_new = user_id not in user_states
    
    if is_new:
        text = f"""
{EMOJI['sparkles']} <b>–í—ñ—Ç–∞—é –≤ Ferrik!</b> {EMOJI['sparkles']}

–ü—Ä–∏–≤—ñ—Ç, {username or '–¥—Ä—É–∂–µ'}! –Ø ‚Äî —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–º–∞–∫–æ–≤–∏–π —Å—É–ø—É—Ç–Ω–∏–∫ {EMOJI['chef']}

<b>–©–æ —è –≤–º—ñ—é:</b>
{EMOJI['food']} –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–π—Å–º–∞—á–Ω—ñ—à–µ –º–µ–Ω—é
{EMOJI['fire']} –ü—ñ–¥–∫–∞–∑–∞—Ç–∏ –¢–û–ü —Å—Ç—Ä–∞–≤–∏ –¥–Ω—è
{EMOJI['gift']} –ó–Ω–∞–π—Ç–∏ –∞–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏
{EMOJI['heart']} –ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ —Ç–≤–æ—ó —É–ø–æ–¥–æ–±–∞–Ω–Ω—è

<i>–ü–æ—á–Ω–µ–º–æ –∑ –º–µ–Ω—é?</i> {EMOJI['wink']}
"""
    else:
        text = f"""
{EMOJI['party']} <b>–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!</b>

–†–∞–¥–∞ —Ç–µ–±–µ –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏! {EMOJI['heart']}

–©–æ –±—É–¥–µ–º–æ –∑–∞–º–æ–≤–ª—è—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ? {EMOJI['yummy']}
"""
    
    send_message(user_id, text, reply_markup=get_main_keyboard())
    user_states[user_id] = STATE_IDLE


def handle_demo_menu(user_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ–º–æ-–º–µ–Ω—é"""
    text = f"""
{EMOJI['food']} <b>–ú–ï–ù–Æ FERRIK</b> {EMOJI['sparkles']}

<i>–î–µ–º–æ-–≤–µ—Ä—Å—ñ—è. –ü—ñ–¥–∫–ª—é—á–∏ Google Sheets –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é!</i>

<b>–î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç—Ä–∞–≤–∏:</b>
üçï –ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ - 180 –≥—Ä–Ω
üçî –ë—É—Ä–≥–µ—Ä –ö–ª–∞—Å–∏–∫ - 150 –≥—Ä–Ω
üç± –†–æ–ª –§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è - 220 –≥—Ä–Ω
ü•ó –°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä - 120 –≥—Ä–Ω
üç∞ –¢—ñ—Ä–∞–º—ñ—Å—É - 95 –≥—Ä–Ω

{EMOJI['fire']} –¢–û–ü –≤–∏–±—ñ—Ä: –†–æ–ª –§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
"""
    
    send_message(user_id, text, reply_markup=get_main_keyboard())


# ============================================================================
# ROUTES
# ============================================================================

@app.route('/', methods=['GET'])
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Ferrik Bot</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 50px auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }}
            .container {{
                background: rgba(255,255,255,0.1);
                padding: 40px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
            }}
            h1 {{
                font-size: 3em;
                margin-bottom: 20px;
            }}
            .status {{
                font-size: 1.5em;
                margin: 20px 0;
            }}
            .emoji {{
                font-size: 2em;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1><span class="emoji">üç¥</span> Ferrik Bot v2.0</h1>
            <div class="status">
                <span class="emoji">‚úÖ</span> Status: <strong>Active & Running</strong>
            </div>
            <p>–¢–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–º–∞–∫–æ–≤–∏–π —Å—É–ø—É—Ç–Ω–∏–∫ üë®‚Äçüç≥</p>
            <p><em>–í—ñ–¥–ø—Ä–∞–≤—å /start –±–æ—Ç—É —â–æ–± –ø–æ—á–∞—Ç–∏!</em></p>
        </div>
    </body>
    </html>
    """


@app.route('/health', methods=['GET'])
def health():
    """Health check"""
    return {
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'version': '2.0',
        'bot': 'ferrik-bot'
    }, 200


@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    try:
        update = request.get_json()
        
        if not update:
            return {'ok': False}, 400
        
        logger.info(f"üì® Received update from Telegram")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if 'message' in update:
            message = update['message']
            user_id = message['from']['id']
            username = message['from'].get('username', message['from'].get('first_name', ''))
            
            if 'text' in message:
                text = message['text']
                
                if text == '/start':
                    handle_start(user_id, username)
                elif text == '/menu':
                    handle_demo_menu(user_id)
                else:
                    send_message(
                        user_id,
                        f"{EMOJI['food']} –ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ /start –∞–±–æ /menu –¥–ª—è –ø–æ—á–∞—Ç–∫—É üòä",
                        reply_markup=get_main_keyboard()
                    )
        
        # –û–±—Ä–æ–±–∫–∞ callback queries
        elif 'callback_query' in update:
            callback = update['callback_query']
            user_id = callback['from']['id']
            callback_id = callback['id']
            data = callback['data']
            
            if data == 'menu':
                handle_demo_menu(user_id)
                answer_callback(callback_id)
            elif data == 'cart':
                send_message(user_id, f"{EMOJI['cart']} –¢–≤—ñ–π –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!", reply_markup=get_main_keyboard())
                answer_callback(callback_id)
            elif data == 'promos':
                send_message(user_id, f"{EMOJI['gift']} –ê–∫—Ü—ñ—ó —Å–∫–æ—Ä–æ!", reply_markup=get_main_keyboard())
                answer_callback(callback_id)
            else:
                answer_callback(callback_id)
        
        return {'ok': True}, 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        return {'ok': False}, 500


# ============================================================================
# –ó–ê–ü–£–°–ö
# ============================================================================

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    
    logger.info("üöÄ Starting Ferrik Bot v2.0...")
    logger.info(f"üîó Bot Token: {BOT_TOKEN[:20]}..." if BOT_TOKEN else "‚ö†Ô∏è BOT_TOKEN not set")
    logger.info(f"üåê Running on port {port}")
    
    app.run(host='0.0.0.0', port=port, debug=False)
