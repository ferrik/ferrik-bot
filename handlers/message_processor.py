import logging
from concurrent.futures import ThreadPoolExecutor
from services.gemini import analyze_user_request_with_gemini, format_ai_response
from services.sheets import get_menu_from_sheet
from services.telegram import tg_send_message
from handlers.cart import add_item_to_cart, show_cart
from handlers.budget import handle_budget_input, show_price_ranges
from models.user import get_state, set_state, add_chat_history

logger = logging.getLogger("ferrik.processor")

# Thread pool –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
EXECUTOR = ThreadPoolExecutor(max_workers=3)

def process_text_message(chat_id, text, user_info=None):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        add_chat_history(chat_id, text, is_user=True)
        
        user_state = get_state(chat_id)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–∞–Ω–∏
        if user_state and user_state != "normal":
            return handle_state_input(chat_id, text, user_state)
        
        # –ö–æ–º–∞–Ω–¥–∏
        if text.startswith('/'):
            return handle_commands(chat_id, text, user_info)
        
        # –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if text in get_main_menu_buttons():
            return handle_main_menu_button(chat_id, text)
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AI –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        EXECUTOR.submit(process_with_ai, chat_id, text)
        return True
        
    except Exception as e:
        logger.error(f"Error processing text message for {chat_id}: {e}")
        tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return False

def process_with_ai(chat_id, text):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é –¥–ª—è AI
        menu_items = get_menu_from_sheet()
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–∞–ø–∏—Ç
        ai_result = analyze_user_request_with_gemini(text, menu_items)
        
        if not ai_result:
            fallback_search(chat_id, text, menu_items)
            return
        
        action = ai_result.get("action")
        
        if action == "add_to_cart":
            handle_ai_add_to_cart(chat_id, ai_result)
        elif action == "question":
            handle_ai_question(chat_id, ai_result)
        elif action == "search":
            handle_ai_search(chat_id, ai_result, menu_items)
        else:
            handle_ai_error(chat_id, ai_result)
        
        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        reply = ai_result.get("reply", "")
        if reply:
            add_chat_history(chat_id, reply, is_user=False)
            
    except Exception as e:
        logger.error(f"Error in AI processing for {chat_id}: {e}")
        fallback_search(chat_id, text, get_menu_from_sheet())

def handle_ai_add_to_cart(chat_id, ai_result):
    """–û–±—Ä–æ–±–ª—è—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –¥–æ –∫–æ—à–∏–∫–∞ —á–µ—Ä–µ–∑ AI"""
    try:
        items_to_add = ai_result.get("items", [])
        reply = ai_result.get("reply", "–î–æ–¥–∞—é –¥–æ –∫–æ—à–∏–∫–∞...")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        tg_send_message(chat_id, reply)
        
        # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏
        added_count = 0
        for item_data in items_to_add:
            item_id = item_data.get("id")
            quantity = item_data.get("quantity", 1)
            
            for _ in range(quantity):
                if add_item_to_cart(chat_id, item_id, quantity=1):
                    added_count += 1
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—à–∏–∫ —è–∫—â–æ —â–æ—Å—å –¥–æ–¥–∞–Ω–æ
        if added_count > 0:
            show_cart(chat_id)
        else:
            tg_send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤ –º–µ–Ω—é.")
            
    except Exception as e:
        logger.error(f"Error handling AI add to cart: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∫–æ—à–∏–∫–∞.")

def handle_ai_question(chat_id, ai_result):
    """–û–±—Ä–æ–±–ª—è—î –ø–∏—Ç–∞–Ω–Ω—è/–ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ AI"""
    reply = ai_result.get("reply", "")
    formatted_reply = format_ai_response(ai_result)
    
    # –î–æ–¥–∞—î–º–æ —à–≤–∏–¥–∫—ñ –¥—ñ—ó —è–∫—â–æ —Ü–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è
    keyboard = None
    if any(word in reply.lower() for word in ["—Ä–µ–∫–æ–º–µ–Ω–¥—É—é", "–ø–æ—Ä–∞–¥–∂—É", "—Å–ø—Ä–æ–±—É–π—Ç–µ"]):
        keyboard = {
            "inline_keyboard": [
                [{"text": "üçΩÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", "callback_data": "show_menu"}],
                [{"text": "üí∞ –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º", "callback_data": "budget_search"}]
            ]
        }
    
    tg_send_message(chat_id, formatted_reply, reply_markup=keyboard)

def handle_ai_search(chat_id, ai_result, menu_items):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ—à—É–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –≤—ñ–¥ AI"""
    query = ai_result.get("query", "").lower()
    reply = ai_result.get("reply", "–®—É–∫–∞—é...")
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫
    tg_send_message(chat_id, reply)
    
    # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫
    found_items = [
        item for item in menu_items
        if item.get('active', True) and (
            query in item.get('name', '').lower() or
            query in item.get('category', '').lower() or
            query in item.get('description', '').lower()
        )
    ]
    
    if found_items:
        show_search_results(chat_id, found_items, query)
    else:
        suggest_alternatives(chat_id, query, menu_items)

def handle_ai_error(chat_id, ai_result):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏ AI"""
    reply = ai_result.get("reply", "–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∑–∞–ø–∏—Ç.")
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üçΩÔ∏è –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é", "callback_data": "show_menu"}],
            [{"text": "üí∞ –ü–æ—à—É–∫ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º", "callback_data": "budget_search"}],
            [{"text": "