import os
import logging
import json
import google.generativeai as genai

logger = logging.getLogger("ferrik.gemini")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY", "").strip()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Gemini
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    logger.info("Gemini API Key configured successfully.")
else:
    logger.warning("Gemini API Key not found. AI features will be disabled.")

# –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Ukrainian food bot
SYSTEM_PROMPT = """
–¢–∏ ‚Äî –¥—Ä—É–∂–Ω—ñ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram food-–±–æ—Ç–∞ FerrikFootBot. 

–¢–≤–æ—ó –∑–∞–≤–¥–∞–Ω–Ω—è:
- –î–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ –≤–∏–±–æ—Ä–æ–º —Å—Ç—Ä–∞–≤ —ñ –ø—ñ–¥–±–æ—Ä–æ–º –ø–æ –±—é–¥–∂–µ—Ç—É
- –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –≤–∏–∑–Ω–∞—á–∞—Ç–∏ —ó—Ö–Ω—ñ –Ω–∞–º—ñ—Ä–∏
- –î–∞–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –ø—Ä–æ —ó–∂—É
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é

–ü—Ä–∞–≤–∏–ª–∞:
- –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –ø—Ä–æ—Å—Ç–∏–º–∏ —Ä–µ—á–µ–Ω–Ω—è–º–∏
- –î–æ–¥–∞–≤–∞–π –µ–º–æ–¥–∑—ñ, –∞–ª–µ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â—É–π
- –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Å—Ç–∏—Å–ª–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ
- –ü—Ä–æ–ø–æ–Ω—É–π 2-4 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Ä–∏ –ø–æ—Ä–∞–¥—ñ
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç—ñ–ª—å–∫–∏ —Å—Ç—Ä–∞–≤–∏ –∑ –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –º–µ–Ω—é
- –ù–µ –≤–∏–≥–∞–¥—É–π —Ü—ñ–Ω–∏ —á–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤
- –ü–æ–≤–µ—Ä—Ç–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
"""

def analyze_user_request_with_gemini(user_text, menu_items):
    """
    –ê–Ω–∞–ª—ñ–∑—É—î –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini AI
    –ü–æ–≤–µ—Ä—Ç–∞—î JSON –∑ –¥—ñ—î—é —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
    """
    if not GEMINI_API_KEY:
        logger.warning("Gemini API not configured, returning fallback response.")
        return {
            "action": "question",
            "reply": "–í–∏–±–∞—á—Ç–µ, AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞–≤."
        }

    try:
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–º–ø—Ç—É
        menu_for_prompt = "\n".join([
            f"ID: {item.get('ID')}, –ù–∞–∑–≤–∞: {item.get('name')}, –¶—ñ–Ω–∞: {item.get('price'):.2f}, –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {item.get('category')}"
            for item in menu_items if item.get('active', True)
        ])

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–∏–π –ø—Ä–æ–º–ø—Ç
        full_prompt = f"""
{SYSTEM_PROMPT}

–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–æ–≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.

–ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{user_text}"

–î–æ—Å—Ç—É–ø–Ω–µ –º–µ–Ω—é:
---
{menu_for_prompt}
---

–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –û–î–ù–£ –∑ –¥—ñ–π —É JSON:

1. "add_to_cart": —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –¥–æ–¥–∞—Ç–∏ —â–æ—Å—å —É –∫–æ—à–∏–∫
   –§–æ—Ä–º–∞—Ç: {{"action": "add_to_cart", "items": [{{"id": "ID_—Ç–æ–≤–∞—Ä—É", "quantity": –∫—ñ–ª—å–∫—ñ—Å—Ç—å}}], "reply": "—Ç–µ–∫—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"}}

2. "question": —è–∫—â–æ —Ü–µ –ø—Ä–æ—Ö–∞–Ω–Ω—è –ø–æ—Ä–∞–¥–∏, –ø–æ—à—É–∫ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º, –∑–∞–≥–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
   –§–æ—Ä–º–∞—Ç: {{"action": "question", "reply": "–¥–µ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏"}}

3. "search": —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—Ç—Ä–∞–≤—É –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
   –§–æ—Ä–º–∞—Ç: {{"action": "search", "query": "–ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç", "reply": "–ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø–æ—à—É–∫—É"}}

4. "error": —è–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π
   –§–æ—Ä–º–∞—Ç: {{"action": "error", "reply": "–≤–∏–±–∞—á–µ–Ω–Ω—è —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –¥–æ–ø–æ–º–æ–≥–∏"}}

–ü—Ä–∏–∫–ª–∞–¥–∏:

# –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
–ó–∞–ø–∏—Ç: "–¥–≤—ñ –ø—ñ—Ü–∏ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"
JSON: {{"action": "add_to_cart", "items": [{{"id": "PZ001", "quantity": 2}}], "reply": "–î–æ–¥–∞—é 2 –ø—ñ—Ü–∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –¥–æ –∫–æ—à–∏–∫–∞!"}}

# –ü–æ—Ä–∞–¥–∞ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º  
–ó–∞–ø–∏—Ç: "—â–æ –º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –Ω–∞ 300 –≥—Ä–Ω?"
JSON: {{"action": "question", "reply": "–ù–∞ 300 –≥—Ä–Ω —Ä–µ–∫–æ–º–µ–Ω–¥—É—é: –ü—ñ—Ü—É –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ (150 –≥—Ä–Ω) + —Å–∞–ª–∞—Ç –¶–µ–∑–∞—Ä (130 –≥—Ä–Ω) = 280 –≥—Ä–Ω. –ó–∞–ª–∏—à–∏—Ç—å—Å—è —â–µ 20 –≥—Ä–Ω –Ω–∞ –Ω–∞–ø—ñ–π!"}}

# –ü–æ—à—É–∫
–ó–∞–ø–∏—Ç: "—î —Å—É—à—ñ?"
JSON: {{"action": "search", "query": "—Å—É—à—ñ", "reply": "–®—É–∫–∞—é —Å—É—à—ñ –≤ –Ω–∞—à–æ–º—É –º–µ–Ω—é..."}}

# –ó–∞–≥–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
–ó–∞–ø–∏—Ç: "—â–æ –Ω–∞–π—Å–º–∞—á–Ω—ñ—à–µ?"
JSON: {{"action": "question", "reply": "–ó–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ: –§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è (4.8/5) —Ç–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ (4.7/5). –©–æ –±—ñ–ª—å—à–µ –¥–æ –≤–ø–æ–¥–æ–±–∏ - —Å—É—à—ñ —á–∏ –ø—ñ—Ü–∞?"}}

–¢–µ–ø–µ—Ä –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–∞–ø–∏—Ç: "{user_text}" —ñ –ø–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò JSON –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É.
"""

        # –í–∏–∫–ª–∏–∫–∞—î–º–æ Gemini
        model = genai.GenerativeModel('gemini-1.5-flash')
        generation_config = genai.types.GenerationConfig(
            max_output_tokens=400,
            temperature=0.7,
            response_mime_type="application/json"
        )
        
        response = model.generate_content(full_prompt, generation_config=generation_config)
        
        # –û—á–∏—â—É—î–º–æ —Ç–∞ –ø–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        cleaned_response = response.text.strip()
        if cleaned_response.startswith("```json"):
            cleaned_response = cleaned_response.replace("```json", "").replace("```", "").strip()
        
        logger.info(f"Gemini response: {cleaned_response}")
        return json.loads(cleaned_response)
        
    except json.JSONDecodeError as e:
        logger.error(f"JSON parsing error: {e}. Response: {response.text if 'response' in locals() else 'N/A'}")
        return {
            "action": "error", 
            "reply": "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏."
        }
    except Exception as e:
        logger.error(f"Gemini request failed: {e}")
        return {
            "action": "question",
            "reply": "–ù–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –∑–∞–ø–∏—Ç. –ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –º–µ–Ω—é –∞–±–æ —É—Ç–æ—á–Ω–∏—Ç–∏, —â–æ —Å–∞–º–µ —à—É–∫–∞—î—Ç–µ?"
        }

def get_budget_recommendations(budget, menu_items):
    """–û—Ç—Ä–∏–º—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ –±—é–¥–∂–µ—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        budget_float = float(str(budget).replace(',', '.'))
        
        suitable_items = [
            item for item in menu_items 
            if item.get('active', True) and item.get('price', 0) <= budget_float
        ]
        
        if not suitable_items:
            return f"–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î —Å—Ç—Ä–∞–≤ —É –±—é–¥–∂–µ—Ç—ñ –¥–æ {budget_float:.0f} –≥—Ä–Ω. –ù–∞—à–∞ –Ω–∞–π–¥–µ—à–µ–≤—à–∞ –ø–æ–∑–∏—Ü—ñ—è –∫–æ—à—Ç—É—î {min(item.get('price', 999) for item in menu_items if item.get('active')):.0f} –≥—Ä–Ω."
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —Ç–∞ —Ü—ñ–Ω–æ—é
        suitable_items.sort(key=lambda x: (-float(x.get('rating', 0)), x.get('price', 0)))
        
        recommendations = []
        for item in suitable_items[:5]:  # –¢–æ–ø 5
            recommendations.append(
                f"‚Ä¢ {item.get('name')} - {item.get('price'):.0f} –≥—Ä–Ω"
                + (f" ‚≠ê{item.get('rating')}" if item.get('rating') else "")
            )
        
        return f"–£ –≤–∞—à–æ–º—É –±—é–¥–∂–µ—Ç—ñ {budget_float:.0f} –≥—Ä–Ω –∑–Ω–∞–π—à–æ–≤ {len(suitable_items)} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:\n\n" + "\n".join(recommendations)
        
    except (ValueError, TypeError):
        return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –±—é–¥–∂–µ—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 200)."

def get_category_recommendations(category, menu_items):
    """–û—Ç—Ä–∏–º—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
    category_items = [
        item for item in menu_items 
        if item.get('active', True) and 
        category.lower() in item.get('category', '').lower()
    ]
    
    if not category_items:
        available_categories = list(set(item.get('category') for item in menu_items if item.get('active')))
        return f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {', '.join(available_categories)}"
    
    # –¢–æ–ø-3 –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    category_items.sort(key=lambda x: -float(x.get('rating', 0)))
    
    recommendations = []
    for item in category_items[:3]:
        recommendations.append(
            f"üîπ {item.get('name')} - {item.get('price'):.0f} –≥—Ä–Ω"
            + (f" ‚≠ê{item.get('rating')}" if item.get('rating') else "")
            + (f"\n   {item.get('description')[:50]}..." if item.get('description') else "")
        )
    
    return f"–ù–∞–π–∫—Ä–∞—â—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}':\n\n" + "\n\n".join(recommendations)

def get_gemini_recommendation(query):
    """–ë–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
    simple_response = analyze_user_request_with_gemini(query, [])
    return simple_response.get("reply", "–í–∏–±–∞—á—Ç–µ, –Ω–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç.")

def format_ai_response(ai_result):
    """–§–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    if not ai_result:
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É."
    
    action = ai_result.get("action")
    reply = ai_result.get("reply", "")
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥—ñ—ó
    if action == "add_to_cart":
        return f"üõí {reply}"
    elif action == "question":
        return f"üí° {reply}"
    elif action == "search":
        return f"üîç {reply}"
    elif action == "error":
        return f"‚ùì {reply}"
    else:
        return reply