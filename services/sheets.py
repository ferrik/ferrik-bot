import os
import gspread
from google.oauth2.service_account import Credentials
import logging
import json
from datetime import datetime

logger = logging.getLogger("hubsy_sheets")

_sheets_client = None
_menu_cache = []
_cache_timestamp = None

def init_gspread_client():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets"""
    global _sheets_client
    
    if _sheets_client:
        return _sheets_client
    
    try:
        creds_json = os.environ.get("GOOGLE_CREDENTIALS_JSON")
        if not creds_json:
            logger.error("‚ùå GOOGLE_CREDENTIALS_JSON not set")
            return None
        
        creds_dict = json.loads(creds_json)
        scopes = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        _sheets_client = gspread.authorize(creds)
        
        logger.info("‚úÖ Google Sheets initialized")
        return _sheets_client
        
    except Exception as e:
        logger.error(f"‚ùå Sheets init error: {e}", exc_info=True)
        return None

def get_menu_from_sheet(force_reload=False):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω—é –∑ –∫–µ—à–µ–º"""
    global _menu_cache, _cache_timestamp
    
    # –ö–µ—à –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω
    if not force_reload and _menu_cache and _cache_timestamp:
        age = (datetime.now() - _cache_timestamp).total_seconds()
        if age < 300:
            logger.info(f"üì¶ Using cache ({len(_menu_cache)} items)")
            return _menu_cache
    
    try:
        client = init_gspread_client()
        if not client:
            logger.warning("‚ö†Ô∏è No client")
            return _menu_cache
        
        sheet_id = os.environ.get("GOOGLE_SHEET_ID") or os.environ.get("SPREADSHEET_ID")
        if not sheet_id:
            logger.error("‚ùå SHEET_ID not set")
            return _menu_cache
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∞—Ä–∫—É—à "–ú–µ–Ω—é"
        spreadsheet = client.open_by_key(sheet_id)
        menu_sheet = spreadsheet.worksheet("–ú–µ–Ω—é")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
        raw_menu = menu_sheet.get_all_records()
        
        # –ê–¥–∞–ø—Ç—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—ñ–¥ –≤–∞—à—ñ –∫–æ–ª–æ–Ω–∫–∏
        menu = []
        for item in raw_menu:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Å—Ç—Ä–∞–≤–∞
            active = str(item.get('–ê–∫—Ç–∏–≤–Ω–∏–π', '')).lower()
            if active not in ['—Ç–∞–∫', 'yes', 'true', '1']:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ø—ñ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            adapted_item = {
                'ID': item.get('ID', ''),
                '–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏': item.get('–°—Ç—Ä–∞–≤–∏', ''),  # ‚Üê –ö–õ–Æ–ß–û–í–ê –ó–ú–Ü–ù–ê
                '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', ''),
                '–¶—ñ–Ω–∞': item.get('–¶—ñ–Ω–∞', 0),
                '–û–ø–∏—Å': item.get('–û–ø–∏—Å', ''),
                '–í–∞–≥–∞': '',  # –£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—ñ—î—ó –∫–æ–ª–æ–Ω–∫–∏
                '–†–µ—Å—Ç–æ—Ä–∞–Ω': item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω', ''),
                '–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏': item.get('–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)', ''),
                '–§–æ—Ç–æ': item.get('–§–æ—Ç–æ URL', ''),
                '–†–µ–π—Ç–∏–Ω–≥': item.get('–†–µ–π—Ç–∏–Ω–≥', ''),
                '–ê–ª–ª–µ—Ä–≥–µ–Ω–∏': item.get('–ê–ª–ª–µ—Ä–≥–µ–Ω–∏', '')
            }
            
            # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –Ω–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏
            if adapted_item['–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏']:
                menu.append(adapted_item)
        
        _menu_cache = menu
        _cache_timestamp = datetime.now()
        
        logger.info(f"‚úÖ Menu loaded: {len(menu)} items")
        return menu
        
    except gspread.exceptions.WorksheetNotFound:
        logger.error("‚ùå Worksheet '–ú–µ–Ω—é' not found")
        return _menu_cache
    except Exception as e:
        logger.error(f"‚ùå Menu loading error: {e}", exc_info=True)
        return _menu_cache

def save_order_to_sheets(chat_id, cart):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        client = init_gspread_client()
        if not client:
            logger.error("‚ùå Cannot save: no client")
            return False
        
        sheet_id = os.environ.get("GOOGLE_SHEET_ID") or os.environ.get("SPREADSHEET_ID")
        spreadsheet = client.open_by_key(sheet_id)
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∞—Ä–∫—É—à "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        try:
            orders_sheet = spreadsheet.worksheet("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")
        except gspread.exceptions.WorksheetNotFound:
            logger.warning("‚ö†Ô∏è '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è' not found, creating...")
            orders_sheet = spreadsheet.add_worksheet(title="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", rows="100", cols="15")
            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —è–∫ —É –≤–∞—à—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
            orders_sheet.append_row([
                "ID –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", "Telegram User ID", "–ß–∞—Å –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", 
                "–¢–æ–≤–∞—Ä–∏ (JSON)", "–ó–∞–≥–∞–ª—å–Ω–∞ –°—É–º–∞", "–ê–¥—Ä–µ—Å–∞", "–¢–µ–ª–µ—Ñ–æ–Ω",
                "–°–ø–æ—Å—ñ–± –û–ø–ª–∞—Ç–∏", "–°—Ç–∞—Ç—É—Å", "–ö–∞–Ω–∞–ª", "–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏",
                "–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", "–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", "–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏/—Å–∞–º–æ–≤–∏–≤–æ–∑—É",
                "–û–ø–µ—Ä–∞—Ç–æ—Ä", "–ü—Ä–∏–º—ñ—Ç–∫–∏"
            ])
        
        # –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order_items = []
        total = 0
        
        for item in cart:
            name = item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '')
            item_id = item.get('ID', '')
            price = float(str(item.get('–¶—ñ–Ω–∞', 0)).replace(',', '.'))
            
            order_items.append({
                "id": item_id,
                "name": name,
                "price": price,
                "qty": 1
            })
            total += price
        
        # ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        order_id = f"ORD-{timestamp}-{chat_id}"
        
        # –ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # JSON —Ç–æ–≤–∞—Ä—ñ–≤
        items_json = json.dumps(order_items, ensure_ascii=False)
        
        # –†—è–¥–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ
        order_data = [
            order_id,
            str(chat_id),
            order_time,
            items_json,
            f"{total:.2f}",
            "",  # –ê–¥—Ä–µ—Å–∞ (–¥–æ–¥–∞–π—Ç–µ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            "",  # –¢–µ–ª–µ—Ñ–æ–Ω
            "–ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ",
            "–ù–æ–≤–µ",
            "Telegram Bot",
            "0.0",
            "",
            "",
            "",
            "",
            ""
        ]
        
        orders_sheet.append_row(order_data)
        logger.info(f"‚úÖ Order saved: {order_id}, {total:.2f} –≥—Ä–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Save order error: {e}", exc_info=True)
        return False

def is_sheets_connected():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
    try:
        client = init_gspread_client()
        return client is not None
    except:
        return False

def search_menu_items(query):
    """–ü–æ—à—É–∫ —Å—Ç—Ä–∞–≤"""
    try:
        menu = get_menu_from_sheet()
        query_lower = query.lower()
        
        results = []
        for item in menu:
            name = item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '').lower()
            category = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '').lower()
            description = item.get('–û–ø–∏—Å', '').lower()
            
            if query_lower in name or query_lower in category or query_lower in description:
                results.append(item)
        
        logger.info(f"üîç Search '{query}': {len(results)} results")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Search error: {e}", exc_info=True)
        return []

def reload_menu():
    """–ü—Ä–∏–º—É—Å–æ–≤–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"""
    logger.info("üîÑ Force reload...")
    return get_menu_from_sheet(force_reload=True)