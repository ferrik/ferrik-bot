import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
logger.info("üöÄ Starting FerrikFootBot...")

try:
    from config import BOT_TOKEN, GEMINI_API_KEY, SPREADSHEET_ID
    logger.info("‚úÖ Config imported successfully")
except Exception as e:
    logger.error(f"‚ùå Config import error: {e}")

try:
    from services.sheets import init_gspread_client, get_menu_from_sheet, save_order_to_sheets, is_sheets_connected, search_menu_items
    logger.info("‚úÖ Sheets service imported")
except Exception as e:
    logger.error(f"‚ùå Sheets import error: {e}")

try:
    from services.gemini import init_gemini_client, get_ai_response, is_gemini_connected
    logger.info("‚úÖ Gemini service imported")
except Exception as e:
    logger.error(f"‚ùå Gemini import error: {e}")

try:
    from models.user import init_user_db
    logger.info("‚úÖ User model imported")
except Exception as e:
    logger.error(f"‚ùå User model import error: {e}")


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –±–æ—Ç–∞"""
    logger.info("üîß Initializing services...")
    
    try:
        init_user_db()
        logger.info("‚úÖ User database initialized")
    except Exception as e:
        logger.error(f"‚ùå User DB initialization failed: {e}")
    
    sheets_ok = False
    try:
        sheets_ok = init_gspread_client()
        if sheets_ok:
            logger.info("‚úÖ Google Sheets connected")
        else:
            logger.warning("‚ö†Ô∏è Google Sheets connection failed")
    except Exception as e:
        logger.error(f"‚ùå Sheets initialization error: {e}")
    
    gemini_ok = False
    try:
        gemini_ok = init_gemini_client()
        if gemini_ok:
            logger.info("‚úÖ Gemini AI connected")
        else:
            logger.warning("‚ö†Ô∏è Gemini AI connection failed")
    except Exception as e:
        logger.error(f"‚ùå Gemini initialization error: {e}")
    
    logger.info("üéâ FerrikFootBot initialization completed!")
    return sheets_ok, gemini_ok


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
init_services()

# üõí –°—Ö–æ–≤–∏—â–µ –∫–æ—à–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (chat_id -> —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–≤)
user_carts = {}


# ============= ROUTES =============

@app.route('/')
def home():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ - –ø–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    try:
        menu_count = len(get_menu_from_sheet()) if is_sheets_connected() else 0
    except:
        menu_count = 0
    
    return jsonify({
        "status": "running",
        "bot": "FerrikFootBot",
        "version": "2.1",
        "services": {
            "google_sheets": is_sheets_connected(),
            "gemini_ai": is_gemini_connected()
        },
        "menu_items": menu_count,
        "timestamp": datetime.now().isoformat()
    })


@app.route('/health')
def health():
    sheets_status = is_sheets_connected()
    gemini_status = is_gemini_connected()
    status_code = 200 if (sheets_status or gemini_status) else 503
    return jsonify({
        "status": "healthy" if status_code == 200 else "degraded",
        "services": {
            "google_sheets": sheets_status,
            "gemini_ai": gemini_status
        }
    }), status_code


@app.route('/keep-alive')
def keep_alive():
    return jsonify({
        "status": "alive",
        "timestamp": datetime.now().isoformat(),
        "uptime": "running"
    }), 200


@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        update = request.get_json()
        if not update:
            logger.warning("‚ö†Ô∏è Empty update received")
            return jsonify({"ok": True}), 200
        
        logger.info(f"üì® Received update: {update.get('update_id', 'unknown')}")
        
        if 'message' in update:
            handle_message(update['message'])
        elif 'callback_query' in update:
            handle_callback_query(update['callback_query'])
        else:
            logger.warning(f"‚ö†Ô∏è Unknown update type: {list(update.keys())}")
        
        return jsonify({"ok": True}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        return jsonify({"ok": False, "error": str(e)}), 500


# ============= HANDLERS =============

def handle_message(message):
    try:
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text', '')
        user = message.get('from', {})
        
        if not chat_id:
            logger.error("No chat_id in message")
            return
        
        username = user.get('first_name', 'User')
        logger.info(f"üë§ Message from {username} ({chat_id}): {text}")
        
        if text.startswith('/'):
            handle_command(chat_id, text, user)
        else:
            handle_text_message(chat_id, text, user)
            
    except Exception as e:
        logger.error(f"‚ùå Error in handle_message: {e}", exc_info=True)
        try:
            send_message(chat_id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except:
            pass


def handle_command(chat_id, command, user):
    try:
        cmd = command.split()[0].lower()
        username = user.get('first_name', '–¥—Ä—É–∂–µ')
        
        if cmd == '/start':
            welcome_text = f"""
üëã <b>–í—ñ—Ç–∞—é, {username}!</b>

–Ø <b>FerrikFootBot</b> - –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ —ó–∂—ñ! üçï

<b>–©–æ —è –≤–º—ñ—é:</b>
üçî –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
üõí –î–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ —É –∫–æ—à–∏–∫
üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
ü§ñ –î–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –≤–∏–±–æ—Ä–æ–º —á–µ—Ä–µ–∑ AI

<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/menu - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é
/cart - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫
/help - –î–æ–ø–æ–º–æ–≥–∞
"""
            keyboard = {
                "keyboard": [
                    [{"text": "üçï –ú–µ–Ω—é"}, {"text": "üõí –ö–æ—à–∏–∫"}],
                    [{"text": "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"}]
                ],
                "resize_keyboard": True
            }
            send_message(chat_id, welcome_text, keyboard)
            
        elif cmd == '/menu':
            show_menu_with_cart_buttons(chat_id)
            
        elif cmd == '/cart':
            cart = user_carts.get(chat_id, [])
            if not cart:
                send_message(chat_id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            else:
                text = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n"
                total = 0
                for item in cart:
                    name = item.get("–°—Ç—Ä–∞–≤–∏", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
                    price = int(item.get("–¶—ñ–Ω–∞", 0))
                    text += f"‚Ä¢ {name} ‚Äì {price} –≥—Ä–Ω\n"
                    total += price
                text += f"\n<b>–†–∞–∑–æ–º:</b> {total} –≥—Ä–Ω\n\n" \
                        f"–©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /order"
                send_message(chat_id, text)
        
        elif cmd == '/help':
            help_text = """
<b>üìñ –î–æ–≤—ñ–¥–∫–∞ FerrikFootBot</b>

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/menu - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é
/cart - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫
/order - –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
"""
            send_message(chat_id, help_text)
        
        elif cmd == '/order':
            cart = user_carts.get(chat_id, [])
            if not cart:
                send_message(chat_id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            else:
                send_message(chat_id, "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è üìû")
                # TODO: —Ç—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ save_order_to_sheets(cart)
                user_carts[chat_id] = []  # –æ—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫ –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        
        else:
            send_message(chat_id, f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {cmd}\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help")
    except Exception as e:
        logger.error(f"‚ùå Error in handle_command: {e}", exc_info=True)


def handle_text_message(chat_id, text, user):
    try:
        text_lower = text.lower()
        
        if text in ['üçï –º–µ–Ω—é', '–º–µ–Ω—é']:
            show_menu_with_cart_buttons(chat_id)
            return
        
        if text in ['üõí –∫–æ—à–∏–∫', '–∫–æ—à–∏–∫']:
            handle_command(chat_id, '/cart', user)
            return
        
        if text in ['‚ÑπÔ∏è –¥–æ–ø–æ–º–æ–≥–∞', '–¥–æ–ø–æ–º–æ–≥–∞']:
            handle_command(chat_id, '/help', user)
            return
        
        if any(kw in text_lower for kw in ['–ø—ñ—Ü–∞', '—Å–∞–ª–∞—Ç', '–±—É—Ä–≥–µ—Ä', '–Ω–∞–ø—ñ–π']):
            try:
                results = search_menu_items(text)
                if results:
                    response = f"üîç <b>–ó–Ω–∞–π–¥–µ–Ω–æ:</b>\n\n"
                    for item in results[:5]:
                        response += f"<b>{item.get('–°—Ç—Ä–∞–≤–∏')}</b>\n"
                        response += f"üí∞ {item.get('–¶—ñ–Ω–∞')} –≥—Ä–Ω\n\n"
                    send_message(chat_id, response)
                    return
            except Exception as e:
                logger.error(f"Search error: {e}")
        
        if is_gemini_connected():
            try:
                user_context = {
                    'first_name': user.get('first_name', ''),
                    'username': user.get('username', '')
                }
                ai_response = get_ai_response(text, user_context)
                send_message(chat_id, ai_response)
            except Exception as e:
                logger.error(f"AI error: {e}")
                send_message(chat_id, "–ù–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ /menu –∞–±–æ /help")
        else:
            send_message(chat_id, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥—É /help")
    except Exception as e:
        logger.error(f"‚ùå Error in handle_text_message: {e}", exc_info=True)


def show_menu_with_cart_buttons(chat_id):
    try:
        if not is_sheets_connected():
            send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
            return
        menu = get_menu_from_sheet()
        if not menu:
            send_message(chat_id, "‚ö†Ô∏è –ú–µ–Ω—é –ø–æ—Ä–æ–∂–Ω—î")
            return
        buttons = []
        for idx, item in enumerate(menu[:10]):
            name = item.get("–°—Ç—Ä–∞–≤–∏", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
            price = item.get("–¶—ñ–Ω–∞", "‚Äî")
            buttons.append([{
                "text": f"{name} ‚Äì {price} –≥—Ä–Ω üõí",
                "callback_data": f"add_{idx}"
            }])
        keyboard = {"inline_keyboard": buttons}
        send_message(chat_id, "üìñ –û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É:", keyboard)
    except Exception as e:
        logger.error(f"‚ùå Error in show_menu_with_cart_buttons: {e}")
        send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–µ–Ω—é")


def handle_callback_query(callback_query):
    try:
        chat_id = callback_query.get('message', {}).get('chat', {}).get('id')
        callback_id = callback_query.get('id')
        data = callback_query.get('data', '')
        logger.info(f"üîò Callback from {chat_id}: {data}")

        if data.startswith("add_"):
            index = int(data.split("_")[1])
            menu = get_menu_from_sheet()
            if 0 <= index < len(menu):
                item = menu[index]
                name = item.get("–°—Ç—Ä–∞–≤–∏", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
                price = item.get("–¶—ñ–Ω–∞", "‚Äî")

                if chat_id not in user_carts:
                    user_carts[chat_id] = []
                user_carts[chat_id].append(item)

                send_message(chat_id, f"üõí –î–æ–¥–∞–Ω–æ: {name} ({price} –≥—Ä–Ω)\n\n"
                                      f"–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫: /cart")

        answer_callback(callback_id, "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ")
    except Exception as e:
        logger.error(f"‚ùå Callback error: {e}", exc_info=True)


# ============= HELPERS =============

def send_message(chat_id, text, reply_markup=None):
    import requests
    try:
        bot_token = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("No BOT_TOKEN")
            return None
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
        if reply_markup:
            import json
            payload["reply_markup"] = json.dumps(reply_markup)
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå Send message error: {e}")
        return None


def answer_callback(callback_id, text):
    import requests
    try:
        bot_token = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
        url = f"https://api.telegram.org/bot{bot_token}/answerCallbackQuery"
        payload = {"callback_query_id": callback_id, "text": text}
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        logger.error(f"‚ùå Answer callback error: {e}")


# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {error}")
    return jsonify({"error": "Internal server error"}), 500


# –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
if __name__ == '__main__':
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
