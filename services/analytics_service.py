"""
Analytics Service
–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
"""

import logging
from datetime import datetime, timedelta
from collections import defaultdict

logger = logging.getLogger('analytics_service')


class PlatformAnalytics:
    """–û—Å–Ω–æ–≤–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏"""
    
    @staticmethod
    def get_daily_revenue(orders_list, date_str=None):
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –¥–æ—Ö—ñ–¥ –∑–∞ –¥–µ–Ω—å
        
        Args:
            orders_list: —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
            date_str: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å—å–æ–≥–æ–¥–Ω—ñ)
        
        Returns:
            {
                'date': str,
                'orders_count': int,
                'total_amount': float,
                'commission_revenue': float,
                'platform_revenue': float
            }
        """
        
        if not date_str:
            date_str = datetime.now().strftime('%Y-%m-%d')
        
        daily_stats = {
            'date': date_str,
            'orders_count': 0,
            'total_amount': 0.0,
            'commission_revenue': 0.0,
            'platform_revenue': 0.0
        }
        
        for order in orders_list:
            order_date = order.get('date', '')[:10]  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –¥–∞—Ç—É
            
            if order_date == date_str:
                daily_stats['orders_count'] += 1
                daily_stats['total_amount'] += float(order.get('final_amount', 0))
                daily_stats['commission_revenue'] += float(order.get('commission_amount', 0))
                daily_stats['platform_revenue'] += float(order.get('platform_revenue', 0))
        
        # –û–∫—Ä—É–≥–ª—é—î–º–æ
        daily_stats['total_amount'] = round(daily_stats['total_amount'], 2)
        daily_stats['commission_revenue'] = round(daily_stats['commission_revenue'], 2)
        daily_stats['platform_revenue'] = round(daily_stats['platform_revenue'], 2)
        
        return daily_stats
    
    @staticmethod
    def get_monthly_revenue(orders_list, year=None, month=None):
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –¥–æ—Ö—ñ–¥ –∑–∞ –º—ñ—Å—è—Ü—å
        
        Returns:
            dict –∑ –º—ñ—Å—è—á–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        """
        
        if not year:
            year = datetime.now().year
        if not month:
            month = datetime.now().month
        
        monthly_stats = {
            'year': year,
            'month': month,
            'orders_count': 0,
            'total_amount': 0.0,
            'commission_revenue': 0.0,
            'platform_revenue': 0.0,
            'daily_breakdown': {}
        }
        
        for order in orders_list:
            try:
                order_date = datetime.strptime(order.get('date', '')[:10], '%Y-%m-%d')
                
                if order_date.year == year and order_date.month == month:
                    day_key = order_date.strftime('%Y-%m-%d')
                    
                    monthly_stats['orders_count'] += 1
                    monthly_stats['total_amount'] += float(order.get('final_amount', 0))
                    monthly_stats['commission_revenue'] += float(order.get('commission_amount', 0))
                    monthly_stats['platform_revenue'] += float(order.get('platform_revenue', 0))
                    
                    if day_key not in monthly_stats['daily_breakdown']:
                        monthly_stats['daily_breakdown'][day_key] = 0.0
                    
                    monthly_stats['daily_breakdown'][day_key] += float(order.get('commission_amount', 0))
            
            except (ValueError, TypeError):
                continue
        
        # –û–∫—Ä—É–≥–ª—é—î–º–æ
        monthly_stats['total_amount'] = round(monthly_stats['total_amount'], 2)
        monthly_stats['commission_revenue'] = round(monthly_stats['commission_revenue'], 2)
        monthly_stats['platform_revenue'] = round(monthly_stats['platform_revenue'], 2)
        
        return monthly_stats
    
    @staticmethod
    def get_partner_leaderboard(orders_list, partners_list, limit=10):
        """
        –í–∏–¥–∞—î —Ä–µ–π—Ç–∏–Ω–≥ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –∑–∞ –¥–æ—Ö—ñ–¥–æ–º
        
        Returns:
            list - —Ç–æ–ø –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –∑ –¥–æ—Ö–æ–¥–æ–º
        """
        
        partner_revenue = defaultdict(float)
        partner_orders = defaultdict(int)
        
        for order in orders_list:
            partner_id = order.get('partner_id')
            if partner_id:
                partner_revenue[partner_id] += float(order.get('commission_amount', 0))
                partner_orders[partner_id] += 1
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
        leaderboard = []
        for partner in partners_list:
            partner_id = partner.get('id')
            revenue = partner_revenue.get(partner_id, 0)
            orders = partner_orders.get(partner_id, 0)
            
            if revenue > 0 or orders > 0:  # –¢—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä–∏
                leaderboard.append({
                    'partner_id': partner_id,
                    'name': partner.get('name', 'N/A'),
                    'revenue': round(revenue, 2),
                    'orders': orders,
                    'avg_order': round(revenue / orders, 2) if orders > 0 else 0,
                    'rating': partner.get('rating', 0)
                })
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–æ—Ö–æ–¥–æ–º
        leaderboard.sort(key=lambda x: x['revenue'], reverse=True)
        
        return leaderboard[:limit]
    
    @staticmethod
    def get_category_analysis(orders_list, menu_list):
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        
        Returns:
            dict - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º
        """
        
        category_stats = defaultdict(lambda: {
            'orders': 0,
            'total_revenue': 0.0,
            'items_sold': 0
        })
        
        # –ü–æ–±—É–¥–æ–≤–∞ mapping –≤—ñ–¥ item_id –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        category_map = {}
        for item in menu_list:
            category_map[item.get('id')] = item.get('category', '–Ü–Ω—à–µ')
        
        # –û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
        for order in orders_list:
            # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ —â–æ —Ç–æ–≤–∞—Ä–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ
            items = order.get('items', [])
            
            if isinstance(items, str):
                # –Ø–∫—â–æ JSON —Ä—è–¥–æ–∫, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç–∏
                import json
                try:
                    items = json.loads(items)
                except:
                    items = []
            
            for item in items:
                item_id = item.get('id')
                category = category_map.get(item_id, '–Ü–Ω—à–µ')
                quantity = int(item.get('quantity', 1))
                price = float(item.get('price', 0))
                
                category_stats[category]['orders'] += 1
                category_stats[category]['total_revenue'] += price * quantity
                category_stats[category]['items_sold'] += quantity
        
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        result = {}
        for category, stats in category_stats.items():
            result[category] = {
                'orders': stats['orders'],
                'total_revenue': round(stats['total_revenue'], 2),
                'items_sold': stats['items_sold'],
                'avg_order_value': round(
                    stats['total_revenue'] / stats['orders'], 2
                ) if stats['orders'] > 0 else 0
            }
        
        return result


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    @staticmethod
    def generate_daily_report(analytics_data, date_str=None):
        """
        –ì–µ–Ω–µ—Ä—É—î —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
        
        Returns:
            str - —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è Telegram
        """
        
        if not date_str:
            date_str = datetime.now().strftime('%Y-%m-%d')
        
        report = f"""
üìä –©–û–î–ï–ù–ù–ò–ô –ó–í–Ü–¢
–î–∞—Ç–∞: {date_str}

üìà –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω—å: {analytics_data.get('orders_count', 0)}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {analytics_data.get('total_amount', 0)} –≥—Ä–Ω
‚Ä¢ –ö–æ–º—ñ—Å—ñ—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: {analytics_data.get('commission_revenue', 0)} –≥—Ä–Ω
‚Ä¢ –î–æ—Ö—ñ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: {analytics_data.get('platform_revenue', 0)} –≥—Ä–Ω

‚úÖ –ó–≤—ñ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –æ–≥–ª—è–¥—É
"""
        return report
    
    @staticmethod
    def generate_monthly_report(analytics_data):
        """
        –ì–µ–Ω–µ—Ä—É—î —â–æ–º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç
        
        Returns:
            str - —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç
        """
        
        year = analytics_data.get('year')
        month = analytics_data.get('month')
        
        report = f"""
üìä –©–û–ú–Ü–°–Ø–ß–ù–ò–ô –ó–í–Ü–¢
–ü–µ—Ä—ñ–æ–¥: {month}/{year}

üìà –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω—å: {analytics_data.get('orders_count', 0)}
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {analytics_data.get('total_amount', 0)} –≥—Ä–Ω
‚Ä¢ –ö–æ–º—ñ—Å—ñ—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º: {analytics_data.get('commission_revenue', 0)} –≥—Ä–Ω
‚Ä¢ –î–æ—Ö—ñ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: {analytics_data.get('platform_revenue', 0)} –≥—Ä–Ω

üìÖ –°–µ—Ä–µ–¥–Ω—î –Ω–∞ –¥–µ–Ω—å: {round(analytics_data.get('commission_revenue', 0) / 30, 2)} –≥—Ä–Ω

‚úÖ –ó–≤—ñ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —ñ–Ω–≤–µ—Å—Ç–æ—Ä–∞–º
"""
        return report
    
    @staticmethod
    def generate_partner_report(partner_data, period_stats):
        """
        –ì–µ–Ω–µ—Ä—É—î –∑–≤—ñ—Ç –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        
        Returns:
            str - –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç
        """
        
        report = f"""
üí∞ –ó–í–Ü–¢ –ü–ê–†–¢–ù–ï–†–ê

–ü–∞—Ä—Ç–Ω–µ—Ä: {partner_data.get('name', 'N/A')}

üìä –ó–∞ –ø–µ—Ä—ñ–æ–¥:
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω—å: {period_stats.get('total_orders', 0)}
‚Ä¢ –°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å: {period_stats.get('total_revenue', 0)} –≥—Ä–Ω
‚Ä¢ –í–∞—à–∞ –∫–æ–º—ñ—Å—ñ—è: {period_stats.get('total_commissions', 0)} –≥—Ä–Ω
‚Ä¢ –î–æ—Ö—ñ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: {period_stats.get('platform_revenue', 0)} –≥—Ä–Ω

üìà –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è:
‚Ä¢ –ù–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {period_stats.get('avg_order_value', 0)} –≥—Ä–Ω

‚≠ê –†–µ–π—Ç–∏–Ω–≥: {partner_data.get('rating', 'N/A')}
üìç –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∏–π' if partner_data.get('status') == 'active' else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}

üí≥ –ù–∞—Å—Ç—É–ø–Ω–∞ —Å–ø–ª–∞—Ç–∞: –∑–∞ –≥—Ä–∞—Ñ—ñ–∫–æ–º

‚úÖ –°–ø–∞—Å–∏–±—ñ –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é!
"""
        return report