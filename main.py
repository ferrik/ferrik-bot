"""
Hubsy Bot - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø
Telegram –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ –∑ –ø—Ä—è–º–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—è–º —Ç–æ–≤–∞—Ä—ñ–≤
"""

import logging
import os
import time
import json
from flask import Flask, request, jsonify
from typing import Dict, Any, List, Optional

import config
from services import sheets, gemini, database, telegram

logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

menu_data: List[Dict[str, Any]] = []
user_states: Dict[int, Dict[str, Any]] = {}
user_carts: Dict[int, List[Dict[str, Any]]] = {}

def initialize():
    global menu_data
    logger.info("üöÄ Starting Hubsy Bot v3.4.0 (FIXED)...")
    
    try:
        if database.init_database():
            logger.info("‚úÖ Database initialized")
    except Exception as e:
        logger.error(f"‚ùå Database error: {e}")
    
    try:
        menu_data = sheets.get_menu_from_sheet()
        if menu_data:
            logger.info(f"‚úÖ Menu loaded: {len(menu_data)} items")
    except Exception as e:
        logger.error(f"‚ùå Menu loading failed: {e}")
    
    try:
        gemini.test_gemini_connection()
    except Exception as e:
        logger.error(f"‚ö†Ô∏è  Gemini test failed: {e}")

initialize()

def add_to_cart(user_id: int, item: Dict[str, Any]):
    if user_id not in user_carts:
        user_carts[user_id] = []
    
    for cart_item in user_carts[user_id]:
        if cart_item.get('id') == item.get('id'):
            cart_item['quantity'] = cart_item.get('quantity', 1) + 1
            logger.info(f"Updated qty for {item.get('name')} in cart {user_id}")
            return
    
    item['quantity'] = 1
    user_carts[user_id].append(item)
    logger.info(f"Added {item.get('name')} to cart {user_id}")

def get_cart(user_id: int) -> List[Dict[str, Any]]:
    return user_carts.get(user_id, [])

def get_cart_total(user_id: int) -> float:
    cart = get_cart(user_id)
    total = 0
    for item in cart:
        try:
            price = float(str(item.get('price', 0)).replace(',', '.'))
            qty = int(item.get('quantity', 1))
            total += price * qty
        except (ValueError, TypeError):
            continue
    return round(total, 2)

def clear_cart(user_id: int):
    if user_id in user_carts:
        user_carts[user_id] = []

def remove_from_cart(user_id: int, item_id: str):
    if user_id in user_carts:
        user_carts[user_id] = [item for item in user_carts[user_id] if item.get('id') != item_id]

def get_user_state(user_id: int) -> Dict[str, Any]:
    if user_id not in user_states:
        user_states[user_id] = {"state": None, "data": {}}
    return user_states[user_id]

def set_user_state(user_id: int, state: str, data: Dict[str, Any] = None):
    current = get_user_state(user_id)
    current["state"] = state
    if data:
        current.update(data)

def clear_user_state(user_id: int):
    if user_id in user_states:
        user_states[user_id] = {"state": None, "data": {}}

# ============================================================================
# ‚ú® –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
# ============================================================================

def show_menu_with_buttons(chat_id: int, category: str = None):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ‚ûï –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫"""
    try:
        items = menu_data
        if category:
            items = [item for item in items if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category]
        
        if not items:
            telegram.tg_send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 —Ç–æ–≤–∞—Ä—ñ–≤
        telegram.tg_send_message(chat_id, f"üçΩÔ∏è <b>–ú–µ–Ω—é {category if category else '–≤—Å—å–æ–≥–æ'}</b>\n({len(items)} –ø–æ–∑–∏—Ü—ñ–π)")
        
        for item in items[:5]:
            item_id = item.get('ID')
            name = item.get('–°—Ç—Ä–∞–≤–∏', 'N/A')
            price = item.get('–¶—ñ–Ω–∞', 0)
            desc = item.get('–û–ø–∏—Å', '')
            
            text = f"<b>{name}</b>\nüí∞ {price} –≥—Ä–Ω"
            if desc:
                text += f"\nüìù {desc}"
            
            keyboard = {
                "inline_keyboard": [[
                    {"text": "‚ûï –î–æ–¥–∞—Ç–∏", "callback_data": f"add_item_{item_id}"},
                    {"text": f"‚ÑπÔ∏è {price}–≥—Ä–Ω", "callback_data": f"noop_{item_id}"}
                ]]
            }
            
            telegram.tg_send_message(chat_id, text, keyboard)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—à–∏–∫–∞
        show_cart_button = {
            "inline_keyboard": [[
                {"text": "üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "show_cart"},
                {"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏", "callback_data": "checkout"}
            ]]
        }
        telegram.tg_send_message(chat_id, "‚îÄ" * 30, show_cart_button)
        
    except Exception as e:
        logger.error(f"Error showing menu: {e}")
        telegram.tg_send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def show_cart_preview(chat_id: int):
    """–ü–æ–∫–∞–∑—É—î –∫–æ—à–∏–∫"""
    cart = get_cart(chat_id)
    if not cart:
        telegram.tg_send_message(chat_id, "üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n[–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å üìñ –ú–µ–Ω—é]")
        return
    
    total = get_cart_total(chat_id)
    text = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n"
    
    for item in cart:
        name = item.get('name', 'N/A')
        price = item.get('price', 0)
        qty = item.get('quantity', 1)
        text += f"‚Ä¢ {name} x{qty} = {float(price) * qty:.0f} –≥—Ä–Ω\n"
    
    text += f"\n<b>–†–∞–∑–æ–º: {total:.2f} –≥—Ä–Ω</b>"
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "callback_data": "checkout"}],
            [{"text": "üçΩÔ∏è –î–æ–¥–∞—Ç–∏ —â–µ", "callback_data": "show_menu"}],
            [{"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏", "callback_data": "clear_cart"}]
        ]
    }
    
    telegram.tg_send_message(chat_id, text, keyboard)

# ============================================================================
# ‚ú® –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
# ============================================================================

def start_checkout(chat_id: int, callback_id: str = None):
    """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑ –∑–∞–ø–∏—Ç–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    cart = get_cart(chat_id)
    
    if not cart:
        if callback_id:
            telegram.tg_answer_callback(callback_id, "üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True)
        return
    
    total = get_cart_total(chat_id)
    
    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞
    MIN_ORDER = 200
    if total < MIN_ORDER:
        telegram.tg_send_message(chat_id, 
            f"‚ö†Ô∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {MIN_ORDER} –≥—Ä–Ω\n"
            f"–£ –≤–∞—Å: {total:.2f} –≥—Ä–Ω\n"
            f"–î–æ–¥–∞–π—Ç–µ —â–µ –Ω–∞ {MIN_ORDER - total:.2f} –≥—Ä–Ω")
        return
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    telegram.tg_send_message(chat_id, 
        "üì± <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
        "<code>+380971234567</code>")
    
    set_user_state(chat_id, "checkout_phone")

def handle_phone_input(chat_id: int, text: str):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω"""
    phone = text.strip()
    
    if not phone:
        telegram.tg_send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    set_user_state(chat_id, "checkout_address", {"phone": phone})
    
    telegram.tg_send_message(chat_id,
        f"‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–π–Ω—è—Ç–æ: {phone}\n\n"
        "üìç –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "<i>–≤—É–ª. –†—É—Å—å–∫–∞, 12, –∫–≤. 5</i>")

def handle_address_input(chat_id: int, text: str):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –∞–¥—Ä–µ—Å—É —ñ –∑–∞–≤–µ—Ä—à—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    address = text.strip()
    state_data = get_user_state(chat_id)
    phone = state_data.get("data", {}).get("phone", "N/A")
    
    cart = get_cart(chat_id)
    total = get_cart_total(chat_id)
    
    if not cart:
        telegram.tg_send_message(chat_id, "‚ùå –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_id = f"ORD-{int(time.time())}"
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–æ–≤–∞—Ä–∏
    items_text = "\n".join([
        f"‚Ä¢ {item.get('name')} x{item.get('quantity', 1)} = {float(item.get('price', 0)) * item.get('quantity', 1):.0f} –≥—Ä–Ω"
        for item in cart
    ])
    
    # ‚ú® –í–ò–†–Ü–®–ï–ù–ù–Ø: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—É
    order_saved = database.save_order(
        order_id=order_id,
        user_id=chat_id,
        username=chat_id,
        items=cart,
        total=total,
        phone=phone,
        address=address,
        notes=""
    )
    
    if order_saved:
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        confirmation = (
            f"‚úÖ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
            f"<b>–¢–æ–≤–∞—Ä–∏:</b>\n{items_text}\n\n"
            f"<b>–°—É–º–∞:</b> {total:.2f} –≥—Ä–Ω\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"<b>–ê–¥—Ä–µ—Å–∞:</b> {address}\n\n"
            f"–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! üòä"
        )
        
        keyboard = {
            "inline_keyboard": [[
                {"text": "üìñ –ú–µ–Ω—é", "callback_data": "show_menu"},
                {"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", "callback_data": "contacts"}
            ]]
        }
        
        telegram.tg_send_message(chat_id, confirmation, keyboard)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        if config.OPERATOR_CHAT_ID:
            op_msg = (
                f"üîî <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {chat_id}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üìç –ê–¥—Ä–µ—Å–∞: {address}\n\n"
                f"<b>–¢–æ–≤–∞—Ä–∏:</b>\n{items_text}\n\n"
                f"üí∞ <b>–°—É–º–∞: {total:.2f} –≥—Ä–Ω</b>"
            )
            telegram.tg_send_message(config.OPERATOR_CHAT_ID, op_msg)
        
        # –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫
        clear_cart(chat_id)
        clear_user_state(chat_id)
    else:
        telegram.tg_send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

# ============================================================================
# WEBHOOK
# ============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        update = request.json
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ webhook secret
        if config.WEBHOOK_SECRET:
            secret_token = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
            if secret_token != config.WEBHOOK_SECRET:
                logger.warning("‚ùå Invalid webhook secret")
                return jsonify({"ok": False}), 401
        
        logger.info(f"üì• Update: {update.get('update_id')}")
        
        # ============ –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø ============
        if 'message' in update:
            msg = update['message']
            chat_id = msg['chat']['id']
            text = msg.get('text', '').strip()
            
            user_state = get_user_state(chat_id).get("state")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–∞–Ω–∏
            if user_state == "checkout_phone":
                handle_phone_input(chat_id, text)
                return jsonify({"ok": True})
            
            elif user_state == "checkout_address":
                handle_address_input(chat_id, text)
                return jsonify({"ok": True})
            
            # –ö–æ–º–∞–Ω–¥–∏
            if text == '/start':
                telegram.tg_send_message(chat_id,
                    "üëã –í—ñ—Ç–∞—î–º–æ –≤ <b>Hubsy Bot</b>!\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                    {"keyboard": [
                        ["üìñ –ú–µ–Ω—é", "üõí –ö–æ—à–∏–∫"],
                        ["üÜò –î–æ–ø–æ–º–æ–≥–∞"]
                    ], "resize_keyboard": True})
                
            elif text in ['üìñ –ú–µ–Ω—é', '/menu']:
                show_menu_with_buttons(chat_id)
            
            elif text in ['üõí –ö–æ—à–∏–∫', '/cart']:
                show_cart_preview(chat_id)
            
            elif text == 'üÜò –î–æ–ø–æ–º–æ–≥–∞' or text == '/help':
                telegram.tg_send_message(chat_id, "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
        
        # ============ CALLBACK QUERIES (inline –∫–Ω–æ–ø–∫–∏) ============
        elif 'callback_query' in update:
            cb = update['callback_query']
            chat_id = cb['message']['chat']['id']
            callback_data = cb.get('data', '')
            callback_id = cb['id']
            
            logger.info(f"Callback: {callback_data}")
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫
            if callback_data.startswith("add_item_"):
                item_id = callback_data.replace("add_item_", "")
                item = next((x for x in menu_data if str(x.get('ID')) == str(item_id)), None)
                
                if item:
                    add_to_cart(chat_id, {
                        'id': item_id,
                        'name': item.get('–°—Ç—Ä–∞–≤–∏', 'N/A'),
                        'price': item.get('–¶—ñ–Ω–∞', 0)
                    })
                    
                    cart_count = sum(i.get('quantity', 1) for i in get_cart(chat_id))
                    telegram.tg_answer_callback(callback_id, 
                        f"‚úÖ {item.get('–°—Ç—Ä–∞–≤–∏')} –¥–æ–¥–∞–Ω–æ!\nüõí –£ –∫–æ—à–∏–∫—É: {cart_count} –ø–æ–∑.")
            
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫
            elif callback_data == "show_cart":
                show_cart_preview(chat_id)
                telegram.tg_answer_callback(callback_id)
            
            # –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            elif callback_data == "checkout":
                start_checkout(chat_id, callback_id)
                telegram.tg_answer_callback(callback_id)
            
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
            elif callback_data == "show_menu":
                show_menu_with_buttons(chat_id)
                telegram.tg_answer_callback(callback_id)
            
            # –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫
            elif callback_data == "clear_cart":
                clear_cart(chat_id)
                telegram.tg_answer_callback(callback_id, "üóëÔ∏è –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
                show_cart_preview(chat_id)
            
            else:
                telegram.tg_answer_callback(callback_id)
        
        return jsonify({"ok": True}), 200
    
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        return jsonify({"ok": False}), 500

@app.route('/')
def index():
    return jsonify({"status": "ok", "bot": "Hubsy Bot", "version": "3.4.0"})

@app.route('/health')
def health():
    db_ok, db_info = database.test_connection()
    return jsonify({
        "status": "healthy" if db_ok else "degraded",
        "database": db_info,
        "menu_items": len(menu_data)
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', config.PORT))
    app.run(host='0.0.0.0', port=port, debug=config.DEBUG)
