import logging
from services.telegram import tg_send_message
from services.gemini import get_gemini_recommendation

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def process_text_message(chat_id, user_id, user_name, text, menu_cache, gemini_client):
    """
    –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ Gemini –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.
    """
    logger.info(f"Processing message from {user_id}: {text}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
    if text == "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫":
        response = "–í–∏–±–∞—á—Ç–µ, –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–æ–ª–∏–∫—ñ–≤ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –ó–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: +380XX XXX XX XX."
        tg_send_message(chat_id, response)
        return
    
    if text == "üí∏ –ê–∫—Ü—ñ—ó":
        response = "–ù–∞—Ä–∞–∑—ñ –∞–∫—Ü—ñ–π –Ω–µ–º–∞—î. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ –≤ –Ω–∞—à–æ–º—É Telegram-–∫–∞–Ω–∞–ª—ñ! üòä"
        tg_send_message(chat_id, response)
        return
    
    if text == "üì¶ –ú—ñ–π –∫–æ—à–∏–∫":
        from handlers.cart import show_cart
        show_cart(chat_id, user_id)
        return
    
    if text == "üçî –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É":
        response = "–û—Å—å –Ω–∞—à–µ **–ú–µ–Ω—é**! –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:\n"
        categories = set(item["category"] for item in menu_cache.values())
        if not categories:
            logger.warning("No categories found in menu cache")
            response = "–ù–∞ –∂–∞–ª—å, –º–µ–Ω—é –ø–æ—Ä–æ–∂–Ω—î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        else:
            for category in sorted(categories):
                response += f"- {category}\n"
        tg_send_message(chat_id, response)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –º–µ–Ω—é
    categories = set(item["category"] for item in menu_cache.values())
    text_lower = text.lower().strip()
    
    for category in categories:
        if category.lower() in text_lower:
            items = [item for item in menu_cache.values() if item["category"].lower() == category.lower()]
            if not items:
                response = f"–ù–∞ –∂–∞–ª—å, —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó **{category}** –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞–≤."
            else:
                response = f"–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó **{category}**:\n"
                for item in items:
                    response += f"- **{item['name']}** ({item['price']:.2f} –≥—Ä–Ω): {item['description']}\n"
            tg_send_message(chat_id, response)
            return
    
    # –Ø–∫—â–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Gemini
    if gemini_client:
        from models.user import get_chat_history
        chat_history = get_chat_history(user_id)
        try:
            response = get_gemini_recommendation(text, chat_history)
            tg_send_message(chat_id, response)
        except Exception as e:
            logger.error(f"Error in get_gemini_recommendation: {str(e)}")
            tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    else:
        tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –ª–∏—à–µ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ —â–æ–¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω—é. –ß–∏–º –º–æ–∂—É –≤–∞—Å –ø–æ—á–∞—Å—Ç—É–≤–∞—Ç–∏?")