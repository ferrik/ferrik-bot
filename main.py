import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
logger.info("üöÄ Starting FerrikFootBot...")

try:
    from config import BOT_TOKEN, GEMINI_API_KEY, SPREADSHEET_ID
    logger.info("‚úÖ Config imported successfully")
except Exception as e:
    logger.error(f"‚ùå Config import error: {e}")

try:
    from services.sheets import init_gspread_client, get_menu_from_sheet, is_sheets_connected
    logger.info("‚úÖ Sheets service imported")
except Exception as e:
    logger.error(f"‚ùå Sheets import error: {e}")

try:
    from services.gemini import init_gemini_client, is_gemini_connected
    logger.info("‚úÖ Gemini service imported")
except Exception as e:
    logger.error(f"‚ùå Gemini import error: {e}")

try:
    from models.user import init_user_db, create_user, update_user_activity
    logger.info("‚úÖ User model imported")
except Exception as e:
    logger.error(f"‚ùå User model import error: {e}")

try:
    from handlers.menu import show_menu_with_cart_buttons, show_categories
    from handlers.callbacks import handle_callback_query
    from handlers.cart import show_cart
    logger.info("‚úÖ Handlers imported")
except Exception as e:
    logger.error(f"‚ùå Handlers import error: {e}")


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –±–æ—Ç–∞"""
    logger.info("üîß Initializing services...")
    
    # –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
    try:
        init_user_db()
        logger.info("‚úÖ User database initialized")
    except Exception as e:
        logger.error(f"‚ùå User DB error: {e}")
    
    # Google Sheets
    sheets_ok = False
    try:
        sheets_ok = init_gspread_client()
        if sheets_ok:
            logger.info("‚úÖ Google Sheets connected")
        else:
            logger.warning("‚ö†Ô∏è Google Sheets connection failed")
    except Exception as e:
        logger.error(f"‚ùå Sheets error: {e}")
    
    # Gemini AI
    gemini_ok = False
    try:
        gemini_ok = init_gemini_client()
        if gemini_ok:
            logger.info("‚úÖ Gemini AI connected")
        else:
            logger.warning("‚ö†Ô∏è Gemini AI connection failed")
    except Exception as e:
        logger.error(f"‚ùå Gemini error: {e}")
    
    logger.info("üéâ FerrikFootBot initialization completed!")
    return sheets_ok, gemini_ok


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
init_services()


# ============= ROUTES =============

@app.route('/')
def home():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    try:
        menu_count = len(get_menu_from_sheet()) if is_sheets_connected() else 0
    except:
        menu_count = 0
    
    return jsonify({
        "status": "running",
        "bot": "FerrikFootBot",
        "version": "2.1",
        "features": ["menu", "cart", "ai_recommendations", "quick_order"],
        "services": {
            "google_sheets": is_sheets_connected(),
            "gemini_ai": is_gemini_connected()
        },
        "menu_items": menu_count,
        "timestamp": datetime.now().isoformat()
    })


@app.route('/health')
def health():
    """Health check"""
    sheets_status = is_sheets_connected()
    gemini_status = is_gemini_connected()
    
    status_code = 200 if (sheets_status or gemini_status) else 503
    
    return jsonify({
        "status": "healthy" if status_code == 200 else "degraded",
        "services": {
            "google_sheets": sheets_status,
            "gemini_ai": gemini_status
        }
    }), status_code


@app.route('/keep-alive')
def keep_alive():
    """Keep-alive endpoint"""
    return jsonify({
        "status": "alive",
        "timestamp": datetime.now().isoformat()
    }), 200


@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ webhook –≤—ñ–¥ Telegram"""
    try:
        update = request.get_json()
        
        if not update:
            logger.warning("‚ö†Ô∏è Empty update")
            return jsonify({"ok": True}), 200
        
        logger.info(f"üì® Update {update.get('update_id', 'unknown')}")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if 'message' in update:
            handle_message(update['message'])
        
        # –û–±—Ä–æ–±–∫–∞ callback'—ñ–≤
        elif 'callback_query' in update:
            handle_callback_query(update)
        
        else:
            logger.warning(f"‚ö†Ô∏è Unknown update type")
        
        return jsonify({"ok": True}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        return jsonify({"ok": False, "error": str(e)}), 500


def handle_message(message):
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text', '')
        user = message.get('from', {})
        
        if not chat_id:
            return
        
        user_id = user.get('id')
        username = user.get('first_name', 'User')
        
        logger.info(f"üë§ {username} ({chat_id}): {text}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        try:
            create_user(user_id, user.get('username'), username)
            update_user_activity(user_id)
        except:
            pass
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith('/'):
            handle_command(chat_id, text, user)
        
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
        elif text in ['üìñ –ú–µ–Ω—é', 'üçï –ú–µ–Ω—é', '–ú–µ–Ω—é']:
            show_menu_with_cart_buttons(chat_id)
        
        elif text in ['üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó', '–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó']:
            show_categories(chat_id)
        
        elif text in ['üõí –ö–æ—Ä–∑–∏–Ω–∞', 'üõí –ö–æ—à–∏–∫', '–ö–æ—Ä–∑–∏–Ω–∞', '–ö–æ—à–∏–∫']:
            show_cart(chat_id)
        
        # –Ü–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        else:
            handle_text_message(chat_id, text, user)
            
    except Exception as e:
        logger.error(f"‚ùå Message error: {e}", exc_info=True)


def handle_command(chat_id, command, user):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥–∏"""
    try:
        cmd = command.split()[0].lower()
        username = user.get('first_name', '–¥—Ä—É–∂–µ')
        
        if cmd == '/start':
            welcome = f"""üëã <b>–í—ñ—Ç–∞—é, {username}!</b>

–Ø <b>FerrikFootBot</b> - –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ –≤ –¢–µ—Ä–Ω–æ–ø–æ–ª—ñ!

<b>–©–æ —è –≤–º—ñ—é:</b>
üçï –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –∑ —Ñ–æ—Ç–æ
üõí –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫
üí¨ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Å—Ç—Ä–∞–≤
üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ —â–æ–± –ø–æ—á–∞—Ç–∏! üëá"""
            
            keyboard = {
                "keyboard": [
                    [{"text": "üìñ –ú–µ–Ω—é"}, {"text": "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"}],
                    [{"text": "üõí –ö–æ—à–∏–∫"}, {"text": "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"}]
                ],
                "resize_keyboard": True
            }
            
            send_message(chat_id, welcome, keyboard)
            
        elif cmd == '/menu':
            show_menu_with_cart_buttons(chat_id)
            
        elif cmd == '/help':
            help_text = """<b>üìñ –î–æ–≤—ñ–¥–∫–∞ FerrikFootBot</b>

<b>–ö–æ–º–∞–Ω–¥–∏:</b>
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/menu - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

<b>–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:</b>
1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "üìñ –ú–µ–Ω—é"
2Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É
3Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫"
4Ô∏è‚É£ –û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

<b>–®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è:</b>
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "‚ûï" - –¥–æ–¥–∞—î 1 —à—Ç
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "‚ûñ 1 ‚ûï" - –≤–∏–±—ñ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
‚Ä¢ –í –∫–æ—à–∏–∫—É –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å

–ü–∏—Ç–∞–Ω–Ω—è? –ü–∏—à—ñ—Ç—å –Ω–∞–º! üòä"""
            send_message(chat_id, help_text)
            
        else:
            send_message(chat_id, f"–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help")
            
    except Exception as e:
        logger.error(f"‚ùå Command error: {e}", exc_info=True)


def handle_text_message(chat_id, text, user):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        from services.sheets import search_menu_items
        
        # –ü–æ—à—É–∫ —Å—Ç—Ä–∞–≤
        results = search_menu_items(text)
        
        if results:
            send_message(chat_id, f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Å—Ç—Ä–∞–≤. –ü–æ–∫–∞–∑—É—é –º–µ–Ω—é...")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ —Å—Ç—Ä–∞–≤–∏
            from handlers.menu import send_menu_item_with_button
            for item in results[:5]:
                send_menu_item_with_button(chat_id, item)
        else:
            # AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            if is_gemini_connected():
                try:
                    from services.gemini import get_ai_response
                    menu = get_menu_from_sheet()
                    
                    context = "–î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ç—Ä–∞–≤–∏: " + ", ".join([
                        item.get('–°—Ç—Ä–∞–≤–∏', '') for item in menu[:10]
                    ])
                    
                    prompt = f"{context}\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {text}\n\n–î–∞–π –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."
                    
                    response = get_ai_response(prompt, {
                        'first_name': user.get('first_name', '')
                    })
                    
                    send_message(chat_id, response)
                except Exception as e:
                    logger.error(f"AI error: {e}")
                    send_message(chat_id, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")
            else:
                send_message(chat_id, "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /menu")
            
    except Exception as e:
        logger.error(f"‚ùå Text message error: {e}", exc_info=True)


def send_message(chat_id, text, reply_markup=None):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    import requests
    
    try:
        bot_token = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            return None
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        if reply_markup:
            import json
            payload["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå Send error: {e}")
        return None


# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404


@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {error}")
    return jsonify({"error": "Internal server error"}), 500


# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
