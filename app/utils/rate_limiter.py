"""
‚è±Ô∏è RATE LIMITER - –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É —Ç–∞ DDoS
–ö–µ—Ä—É—î —á–∞—Å—Ç–æ—Ç–æ—é API –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
"""

import time
import logging
from collections import defaultdict
from typing import Tuple, Optional

logger = logging.getLogger(__name__)


class RateLimiter:
    """
    –ü—Ä–æ—Å—Ç–∏–π in-memory rate limiter
    
    –û–±–º–µ–∂—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —á–∞—Å—É
    """
    
    def __init__(self, max_requests: int = 5, time_window: int = 60):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è rate limiter
        
        Args:
            max_requests: –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Ç—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5)
            time_window: –ß–∞—Å–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 60)
        """
        self.max_requests = max_requests
        self.time_window = time_window
        self.requests = defaultdict(list)
        
        logger.info(f"üìä RateLimiter initialized: {max_requests} requests per {time_window}s")
    
    def is_allowed(self, user_id: int) -> bool:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Returns:
            True —è–∫—â–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ, False —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç
        """
        now = time.time()
        
        # –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Ç–∏ –∑–∞ –º–µ–∂–∞–º–∏ —á–∞—Å–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞
        self.requests[user_id] = [
            req_time for req_time in self.requests[user_id]
            if now - req_time < self.time_window
        ]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª—ñ–º—ñ—Ç
        if len(self.requests[user_id]) < self.max_requests:
            self.requests[user_id].append(now)
            return True
        
        return False
    
    def get_wait_time(self, user_id: int) -> int:
        """
        –î—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–∫—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ —á–µ–∫–∞—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
        
        Args:
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (0 —è–∫—â–æ –º–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç)
        """
        if not self.requests[user_id]:
            return 0
        
        oldest = self.requests[user_id][0]
        wait = int(self.time_window - (time.time() - oldest)) + 1
        return max(0, wait)
    
    def reset(self, user_id: int):
        """–°–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if user_id in self.requests:
            del self.requests[user_id]
    
    def reset_all(self):
        """–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏"""
        self.requests.clear()
        logger.info("üîÑ All rate limits reset")


# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–Ü INSTANCES
# ============================================================================

# –î–ª—è AI –∑–∞–ø–∏—Ç—ñ–≤ (—Å—É–≤–æ—Ä–∏–π –ª—ñ–º—ñ—Ç)
ai_rate_limiter = RateLimiter(
    max_requests=5,      # 5 –∑–∞–ø–∏—Ç—ñ–≤
    time_window=60       # –∑–∞ 60 —Å–µ–∫—É–Ω–¥
)

# –î–ª—è –∞–¥–º—ñ–Ω-–æ–ø–µ—Ä–∞—Ü—ñ–π (–º'—è–∫—à–∏–π –ª—ñ–º—ñ—Ç)
admin_rate_limiter = RateLimiter(
    max_requests=50,     # 50 –∑–∞–ø–∏—Ç—ñ–≤
    time_window=60       # –∑–∞ 60 —Å–µ–∫—É–Ω–¥
)

# –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å (—Å–µ—Ä–µ–¥–Ω—ñ–π –ª—ñ–º—ñ—Ç)
order_rate_limiter = RateLimiter(
    max_requests=10,     # 10 –∑–∞–º–æ–≤–ª–µ–Ω—å
    time_window=3600     # –∑–∞ –≥–æ–¥–∏–Ω—É
)
