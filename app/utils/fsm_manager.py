"""
üîÑ FSM MANAGER - Finite State Machine –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
–ö–µ—Ä—É—î —Å—Ç–∞–Ω–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ–¥ —á–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
"""

import logging
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

# ============================================================================
# –°–¢–ê–ù–ò –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í
# ============================================================================

STATES = {
    'idle': {
        'name': '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
        'emoji': 'üè†',
        'description': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é'
    },
    'browsing_menu': {
        'name': '–ü–µ—Ä–µ–≥–ª—è–¥ –º–µ–Ω—é',
        'emoji': 'üìã',
        'description': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —Ç–æ–≤–∞—Ä–∏'
    },
    'awaiting_phone': {
        'name': '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É',
        'emoji': 'üì±',
        'description': '–ß–µ–∫–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É'
    },
    'awaiting_address': {
        'name': '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏',
        'emoji': 'üìç',
        'description': '–ß–µ–∫–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏'
    },
    'confirming_order': {
        'name': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
        'emoji': '‚úÖ',
        'description': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
    },
    'order_placed': {
        'name': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ',
        'emoji': 'üéâ',
        'description': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ'
    }
}

# ============================================================================
# STATE MANAGER
# ============================================================================

_user_states: Dict[int, Dict[str, Any]] = {}


def get_user_state(user_id: int) -> str:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Returns:
        –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'idle')
    """
    if user_id not in _user_states:
        _user_states[user_id] = {'state': 'idle', 'data': {}}
    
    return _user_states[user_id]['state']


def set_user_state(user_id: int, state: str, data: Dict[str, Any] = None):
    """
    –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        state: –ù–æ–≤–∏–π —Å—Ç–∞–Ω
        data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
    """
    if state not in STATES:
        logger.warning(f"‚ö†Ô∏è Unknown state: {state}")
        return
    
    if user_id not in _user_states:
        _user_states[user_id] = {}
    
    old_state = _user_states[user_id].get('state', 'idle')
    _user_states[user_id]['state'] = state
    
    if data:
        _user_states[user_id]['data'] = data
    
    logger.info(f"üîÑ User {user_id}: {old_state} ‚Üí {state}")


def get_user_state_data(user_id: int) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É"""
    if user_id not in _user_states:
        return {}
    
    return _user_states[user_id].get('data', {})


def update_state_data(user_id: int, key: str, value: Any):
    """–û–Ω–æ–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–∞–Ω–∏—Ö —Å—Ç–∞–Ω—É"""
    if user_id not in _user_states:
        _user_states[user_id] = {'state': 'idle', 'data': {}}
    
    _user_states[user_id]['data'][key] = value


def reset_user_state(user_id: int):
    """–°–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ idle"""
    if user_id in _user_states:
        _user_states[user_id] = {'state': 'idle', 'data': {}}
        logger.info(f"üîÑ User {user_id} state reset to idle")


def is_state(user_id: int, state: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –ø–µ–≤–Ω–æ–º—É —Å—Ç–∞–Ω—ñ"""
    return get_user_state(user_id) == state


def get_state_info(state: str) -> Dict[str, str]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞–Ω"""
    return STATES.get(state, {
        'name': '–ù–µ–≤—ñ–¥–æ–º–∏–π',
        'emoji': '‚ùì',
        'description': '–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞–Ω'
    })
