import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime
import requests
import json
from concurrent.futures import ThreadPoolExecutor # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–Ü –°–¢–ê–ù–û–í–Ü –ó–ú–Ü–ù–ù–Ü (–±—É–¥—É—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ) ---
# –¶—ñ –∑–º—ñ–Ω–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ –∫–µ—à—ñ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
# –í–æ–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∞–±–æ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É config, services
menu_cache = {}
sheets_client = None
telegram_api_url = ""
# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö (–±—É–¥—É—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –∑ config.py)
BOT_TOKEN = None
WEBHOOK_SECRET = None
WEBHOOK_URL = None


# ----------------------------------------------------------------------
# 1. –°–ï–†–í–Ü–°–ò –¢–ê –£–¢–ò–õ–Ü–¢–ò (Fallback —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –∑–∞–≥–ª—É—à–∫–∏)
# ----------------------------------------------------------------------

# Fallback —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó)
def fallback_send_message(chat_id, text, reply_markup=None):
    """Fallback —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ Telegram API."""
    try:
        bot_token = os.environ.get('BOT_TOKEN') or os.environ.get('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN not found for fallback.")
            return None
            
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        if reply_markup:
            payload["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå Fallback send message error: {e}")
        return None

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback query (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
def answer_callback(callback_id, text=""):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ callback query –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è "loading" —Å—Ç–∞—Ç—É—Å—É."""
    try:
        bot_token = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
        url = f"https://api.telegram.org/bot{bot_token}/answerCallbackQuery"
        
        payload = {
            "callback_query_id": callback_id,
            "text": text
        }
        
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        logger.error(f"‚ùå Answer callback error: {e}")

# ----------------------------------------------------------------------
# 2. –Ü–ú–ü–û–†–¢ –¢–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–ï–†–í–Ü–°–Ü–í
# ----------------------------------------------------------------------

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –±–æ—Ç–∞ (DB, Sheets, Gemini)."""
    global BOT_TOKEN, WEBHOOK_SECRET, WEBHOOK_URL
    global menu_cache, sheets_client, telegram_api_url
    
    logger.info("üõ†Ô∏è Initializing services...")
    
    try:
        # –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        from config import BOT_TOKEN as cfg_BOT_TOKEN, WEBHOOK_SECRET as cfg_WEBHOOK_SECRET, \
                           WEBHOOK_URL as cfg_WEBHOOK_URL, validate_config, log_config
        BOT_TOKEN = cfg_BOT_TOKEN
        WEBHOOK_SECRET = cfg_WEBHOOK_SECRET
        WEBHOOK_URL = cfg_WEBHOOK_URL
        telegram_api_url = f"https://api.telegram.org/bot{BOT_TOKEN}"

        if not validate_config():
             logger.error("‚ùå Configuration validation failed. Bot may not work.")
        log_config()

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DB
        from models.user import init_user_db
        init_user_db()
        logger.info("‚úÖ User DB initialized.")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
        from services.sheets import init_gspread_client, get_menu_from_sheet
        sheets_client = init_gspread_client()
        if sheets_client:
            logger.info("‚úÖ Google Sheets client initialized.")
            # –ö–µ—à—É–≤–∞–Ω–Ω—è –º–µ–Ω—é
            global menu_cache
            menu_cache = get_menu_from_sheet(sheets_client, force=True)
            logger.info(f"‚úÖ Menu cached: {len(menu_cache)} items.")
        else:
            logger.error("‚ùå Google Sheets client failed to initialize.")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Gemini (AI)
        from services.gemini import init_gemini_client
        init_gemini_client()
        logger.info("‚úÖ Gemini client initialized (if key present).")
        
        logger.info("üéâ FerrikFootBot initialization completed!")
        return True
    
    except Exception as e:
        logger.exception(f"‚ùå Critical startup error during service initialization: {e}")
        # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É –Ω–∞ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –≤—ñ–¥–æ–º–∏–π ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        fallback_send_message(os.environ.get('OPERATOR_CHAT_ID', ''), f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        return False

# ----------------------------------------------------------------------
# 3. –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê –û–ë–†–û–ë–ö–ò
# ----------------------------------------------------------------------

def process_update(update):
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram."""
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ handlers/ —Ç–∞ services/ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
    
    if "message" in update:
        message = update["message"]
        chat_id = message["chat"]["id"]
        
        if "text" in message:
            text = message["text"]
            
            if text == "/start":
                # –ü—Ä–∏–∫–ª–∞–¥: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                from prompts import GREETING
                fallback_send_message(chat_id, GREETING['ua'])
                
            elif text == "/menu":
                 # –ü—Ä–∏–∫–ª–∞–¥: –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
                 menu_text = "üìñ **–ú–µ–Ω—é:**\n"
                 for item in menu_cache.values():
                     menu_text += f"**{item['–°—Ç—Ä–∞–≤–∏']}** - {item['–¶—ñ–Ω–∞']} –≥—Ä–Ω\n"
                 fallback_send_message(chat_id, menu_text)
            
            else:
                 # –ü—Ä–∏–∫–ª–∞–¥: –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ Gemini
                 # from services.gemini import get_ai_response
                 # response = get_ai_response(text, menu_cache)
                 fallback_send_message(chat_id, f"–û—Ç—Ä–∏–º–∞–Ω–æ: *{text}*. –ü—Ä–∞—Ü—é—é –Ω–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é...")

        elif "location" in message:
            # –û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó (–∑–∞–≥–ª—É—à–∫–∞)
            fallback_send_message(chat_id, "–î—è–∫—É—é –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é! –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏...")

    elif "callback_query" in update:
        # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å inline-–∫–Ω–æ–ø–æ–∫
        callback_query = update["callback_query"]
        answer_callback(callback_query["id"], "–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è...")
        
        # –ü—Ä–∏–∫–ª–∞–¥:
        # data = callback_query["data"]
        # process_callback_query(data)
        
    # –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö –¥–ª—è Telegram API
    return jsonify({"status": "ok"})


# ----------------------------------------------------------------------
# 4. –†–û–£–¢–ò–ù–ì FLASK
# ----------------------------------------------------------------------

@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram."""
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != WEBHOOK_SECRET:
        logger.warning("‚ùå Webhook call with invalid secret token")
        return jsonify({"error": "Forbidden"}), 403

    # 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    try:
        update = request.get_json(force=True)
    except Exception as e:
        logger.error(f"‚ùå Failed to parse JSON: {e}")
        return jsonify({"error": "Invalid JSON"}), 400

    # 3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ThreadPoolExecutor, —â–æ–± —à–≤–∏–¥–∫–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ Telegram (HTTP 200 OK)
    # —ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—É —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.
    try:
        executor = ThreadPoolExecutor(max_workers=4)
        executor.submit(process_update, update)
    except Exception as e:
        logger.error(f"‚ùå Failed to submit job to executor: {e}")
        return jsonify({"error": "Internal server error"}), 500
    
    # –®–≤–∏–¥–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å Telegram
    return jsonify({"status": "ok"}), 200

@app.route('/keep-alive', methods=['GET'])
def keep_alive():
    """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è '–∑–∞—Å–∏–Ω–∞–Ω–Ω—é' –Ω–∞ Render."""
    return jsonify({"status": "alive"}), 200


# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Flask
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {error}")
    return jsonify({"error": "Internal server error"}), 500


# ----------------------------------------------------------------------
# 5. –ó–ê–ü–£–°–ö –î–û–î–ê–¢–ö–£
# ----------------------------------------------------------------------

with app.app_context():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
    init_services()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    debug_mode = os.environ.get("FLASK_DEBUG", "false").lower() == "true"
    
    if debug_mode:
        # –†–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–∫–∏
        logger.info(f"Running in Debug mode on port {port}")
        app.run(host="0.0.0.0", port=port, debug=True)
    else:
        # Production (Render) - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
        if WEBHOOK_URL and BOT_TOKEN and WEBHOOK_SECRET:
            try:
                # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≤ production
                response = requests.get(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                    params={
                        "url": WEBHOOK_URL,
                        "secret_token": WEBHOOK_SECRET
                    },
                    timeout=10
                )
                logger.info(f"‚úÖ Webhook set response: {response.json()}")
            except Exception as e:
                logger.error(f"‚ùå Failed to set webhook: {e}")
        else:
            logger.error("‚ùå Cannot set webhook: Missing WEBHOOK_URL, BOT_TOKEN, or WEBHOOK_SECRET.")
        
        # Gunicorn –∑–∞–ø—É—Å–∫–∞—î Flask:app, —Ç–æ–º—É —Ç—É—Ç –∫–æ–¥ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω.
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Ä—É—á–Ω—É –ª–∏—à–µ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–≥—ñ–∫–∏
        # app.run(host="0.0.0.0", port=port)
