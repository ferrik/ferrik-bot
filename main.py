"""
ü§ñ Ferrik Bot - RENDER READY VERSION

–ì–æ—Ç–æ–≤–∏–π –¥–æ deploy –Ω–∞ Render –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î –ë–î –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
"""
import os
import sys
import re
import logging
from flask import Flask, request, jsonify

# ============================================================================
# Logging Setup
# ============================================================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ============================================================================
# Auto-initialize Database (–ü–ï–†–ï–î —ñ–º–ø–æ—Ä—Ç–∞–º–∏!)
# ============================================================================
def ensure_database():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î –ë–î —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î"""
    import sqlite3
    
    db_path = 'bot.db'
    
    if not os.path.exists(db_path):
        logger.info("üîß Database not found, initializing...")
        
        conn = sqlite3.connect(db_path)
        
        # –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Ñ–∞–π–ª—É –º—ñ–≥—Ä–∞—Ü—ñ—ó
        sql_file = 'migrations/001_create_tables.sql'
        if os.path.exists(sql_file):
            try:
                with open(sql_file, 'r', encoding='utf-8') as f:
                    conn.executescript(f.read())
                logger.info("‚úÖ Database initialized from migration file")
            except Exception as e:
                logger.error(f"‚ùå Error loading migration: {e}")
                # Fallback –¥–æ –±–∞–∑–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å
                create_basic_tables(conn)
        else:
            logger.warning("‚ö†Ô∏è Migration file not found, creating basic tables")
            create_basic_tables(conn)
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ Database ready!")
    else:
        logger.info("‚úÖ Database already exists")

def create_basic_tables(conn):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —è–∫—â–æ –º—ñ–≥—Ä–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"""
    conn.execute("""
        CREATE TABLE IF NOT EXISTS user_states (
            user_id INTEGER PRIMARY KEY,
            state TEXT DEFAULT 'STATE_IDLE',
            state_data TEXT DEFAULT '{}',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS user_carts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            item_id TEXT NOT NULL,
            quantity INTEGER DEFAULT 1 CHECK(quantity > 0),
            price REAL DEFAULT 0 CHECK(price >= 0),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, item_id)
        )
    """)
    conn.execute("CREATE INDEX IF NOT EXISTS idx_carts_user ON user_carts(user_id)")
    logger.info("‚úÖ Basic tables created")

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ë–î
ensure_database()

# ============================================================================
# Import New Modules (–∑ fallback –Ω–∞ —Å—Ç–∞—Ä–∏–π –∫–æ–¥)
# ============================================================================
NEW_SYSTEM_ENABLED = False

try:
    from app.config.settings import (
        config, 
        UserState, 
        MIN_ORDER_AMOUNT
    )
    from app.services.session import SessionManager
    from app.utils.validators import (
        safe_parse_price,
        validate_phone,
        normalize_phone,
        validate_address,
        sanitize_input
    )
    NEW_SYSTEM_ENABLED = True
    logger.info("‚úÖ New system modules loaded")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è New modules not available, using legacy mode: {e}")
    # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ fallback –∑–Ω–∞—á–µ–Ω–Ω—è
    MIN_ORDER_AMOUNT = 100

# ============================================================================
# Import Services
# ============================================================================
import services.telegram as telegram
import services.sheets as sheets
import services.database as database

# ============================================================================
# Flask App
# ============================================================================
app = Flask(__name__)

# ============================================================================
# Global Variables
# ============================================================================
menu_data = []

# SessionManager –∞–±–æ fallback —Å–ª–æ–≤–Ω–∏–∫–∏
if NEW_SYSTEM_ENABLED:
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ SessionManager (–≤—ñ–Ω —Å–∞–º —Å—Ç–≤–æ—Ä–∏—Ç—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è)
    session_manager = SessionManager(db_path='bot.db')
    
    from app.services.session import LegacyDictWrapper
    user_states = LegacyDictWrapper(session_manager, 'states')
    user_carts = LegacyDictWrapper(session_manager, 'carts')
    logger.info("‚úÖ Using SessionManager with auto-created SQLite connection")
else:
    user_states = {}
    user_carts = {}
    logger.info("üì¶ Using in-memory storage (legacy)")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Å—Ç–∞–Ω—ñ–≤
STATE_IDLE = 'STATE_IDLE'
STATE_AWAITING_PHONE = 'STATE_AWAITING_PHONE'
STATE_AWAITING_ADDRESS = 'STATE_AWAITING_ADDRESS'

# ============================================================================
# Helper Functions
# ============================================================================

def get_user_state(chat_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if NEW_SYSTEM_ENABLED:
        return session_manager.get_state(chat_id)
    return user_states.get(chat_id, STATE_IDLE)

def set_user_state(chat_id, state, data=None):
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω"""
    if NEW_SYSTEM_ENABLED:
        session_manager.set_state(chat_id, state, data or {})
    else:
        user_states[chat_id] = {'state': state, 'data': data or {}}

def clear_user_state(chat_id):
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω"""
    if NEW_SYSTEM_ENABLED:
        session_manager.clear_state(chat_id)
    else:
        user_states.pop(chat_id, None)

def parse_price(value):
    """–ë–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ü—ñ–Ω–∏"""
    if NEW_SYSTEM_ENABLED:
        return safe_parse_price(value)
    try:
        return float(str(value).replace('–≥—Ä–Ω', '').replace(' ', '').replace(',', '.').strip())
    except:
        return 0.0

def add_to_cart(chat_id, item):
    """–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—à–∏–∫"""
    item_id = str(item['id'])
    price = parse_price(item.get('–¶—ñ–Ω–∞', 0))
    
    if NEW_SYSTEM_ENABLED:
        return session_manager.add_to_cart(chat_id, item_id, 1, price)
    else:
        if chat_id not in user_carts:
            user_carts[chat_id] = {}
        if item_id in user_carts[chat_id]:
            user_carts[chat_id][item_id]['quantity'] += 1
        else:
            user_carts[chat_id][item_id] = {
                'name': item.get('–ù–∞–∑–≤–∞', 'Unknown'),
                'price': price,
                'quantity': 1
            }
        return True

def get_cart(chat_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—à–∏–∫"""
    if NEW_SYSTEM_ENABLED:
        cart_items = session_manager.get_cart(chat_id)
        enriched = []
        for cart_item in cart_items:
            menu_item = next((m for m in menu_data if str(m['id']) == cart_item['id']), None)
            if menu_item:
                enriched.append({
                    'id': cart_item['id'],
                    'name': menu_item.get('–ù–∞–∑–≤–∞', 'Unknown'),
                    'price': cart_item['price'],
                    'quantity': cart_item['quantity']
                })
        return enriched
    return user_carts.get(chat_id, {})

def get_cart_total(chat_id):
    """–°—É–º–∞ –∫–æ—à–∏–∫–∞"""
    if NEW_SYSTEM_ENABLED:
        return session_manager.get_cart_total(chat_id)
    
    cart = user_carts.get(chat_id, {})
    total = 0
    for item in cart.values():
        try:
            total += float(item.get('price', 0)) * int(item.get('quantity', 1))
        except:
            pass
    return total

def clear_cart(chat_id):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫"""
    if NEW_SYSTEM_ENABLED:
        session_manager.clear_cart(chat_id)
    else:
        user_carts[chat_id] = {}

def get_cart_count(chat_id):
    """–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤"""
    if NEW_SYSTEM_ENABLED:
        return session_manager.get_cart_count(chat_id)
    return len(user_carts.get(chat_id, {}))

# ============================================================================
# Menu Display
# ============================================================================

def show_menu_with_buttons(chat_id, category=None):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    if not menu_data:
        telegram.tg_send_message(chat_id, "‚ùå –ú–µ–Ω—é –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–µ")
        return
    
    items = [i for i in menu_data if not category or i.get('category') == category]
    if not items:
        telegram.tg_send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
        return
    
    buttons = []
    for item in items[:10]:  # –ü–µ—Ä—à—ñ 10
        item_id = str(item.get('id', ''))
        name = item.get('–ù–∞–∑–≤–∞', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        price = parse_price(item.get('–¶—ñ–Ω–∞', 0))
        
        buttons.append([
            {'text': f"‚ÑπÔ∏è {name} ‚Äî {price:.0f}–≥—Ä–Ω", 'callback_data': f"info_{item_id}"},
            {'text': "‚ûï", 'callback_data': f"add_{item_id}"}
        ])
    
    cart_count = get_cart_count(chat_id)
    buttons.append([{'text': f"üõí –ö–æ—à–∏–∫ ({cart_count})", 'callback_data': "view_cart"}])
    
    telegram.tg_send_message(chat_id, "üìã *–ú–µ–Ω—é*\n–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", buttons)

def show_cart_preview(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫"""
    cart = get_cart(chat_id)
    
    if not cart or (isinstance(cart, dict) and len(cart) == 0):
        telegram.tg_send_message(chat_id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu —â–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
        return
    
    cart_text = "üõí *–í–∞—à –∫–æ—à–∏–∫:*\n\n"
    
    if NEW_SYSTEM_ENABLED and isinstance(cart, list):
        for item in cart:
            cart_text += f"‚Ä¢ {item['name']} x{item['quantity']} = {item['price'] * item['quantity']:.0f} –≥—Ä–Ω\n"
    else:
        for item_data in cart.values():
            cart_text += f"‚Ä¢ {item_data['name']} x{item_data['quantity']} = {item_data['price'] * item_data['quantity']:.0f} –≥—Ä–Ω\n"
    
    total = get_cart_total(chat_id)
    cart_text += f"\nüí∞ *–í—Å—å–æ–≥–æ: {total:.0f} –≥—Ä–Ω*"
    
    buttons = []
    if total >= MIN_ORDER_AMOUNT:
        buttons.append([{'text': '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏', 'callback_data': 'checkout'}])
    else:
        cart_text += f"\n\n‚ö†Ô∏è –ú—ñ–Ω. —Å—É–º–∞: {MIN_ORDER_AMOUNT} –≥—Ä–Ω"
    
    buttons.append([
        {'text': 'üîô –ú–µ–Ω—é', 'callback_data': 'back_to_menu'},
        {'text': 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏', 'callback_data': 'clear_cart'}
    ])
    
    telegram.tg_send_message(chat_id, cart_text, buttons)

# ============================================================================
# Checkout
# ============================================================================

def start_checkout(chat_id):
    """–ü–æ—á–∞—Ç–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"""
    set_user_state(chat_id, STATE_AWAITING_PHONE)
    telegram.tg_send_message(chat_id, "üìû *–ö—Ä–æ–∫ 1/2: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ*\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n_(–ü—Ä–∏–∫–ª–∞–¥: +380501234567)_")

def handle_phone_input(chat_id, phone):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    if NEW_SYSTEM_ENABLED:
        phone = sanitize_input(phone, 20)
        if not validate_phone(phone):
            telegram.tg_send_message(
                chat_id, 
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É\n\n" +
                "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É:\n" +
                "‚Ä¢ +380501234567\n" +
                "‚Ä¢ 0501234567\n\n" +
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
            return
        phone = normalize_phone(phone)
    else:
        if len(phone) < 10:
            telegram.tg_send_message(chat_id, "‚ùå –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
    
    set_user_state(chat_id, STATE_AWAITING_ADDRESS, {'phone': phone})
    telegram.tg_send_message(chat_id, "üìç *–ö—Ä–æ–∫ 2/2: –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É:\n_(–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—é, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä—É)_")

def handle_address_input(chat_id, address):
    """–û–±—Ä–æ–±–∫–∞ –∞–¥—Ä–µ—Å–∏"""
    if NEW_SYSTEM_ENABLED:
        address = sanitize_input(address, 200)
        if not validate_address(address):
            telegram.tg_send_message(
                chat_id, 
                "‚ùå –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É\n\n" +
                "–ü—Ä–∏–∫–ª–∞–¥: –º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, –±—É–¥. 1, –∫–≤. 10\n\n" +
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
            )
            return
        state_data = session_manager.get_state_data(chat_id)
        phone = state_data.get('phone', 'N/A')
    else:
        phone = user_states.get(chat_id, {}).get('data', {}).get('phone', 'N/A')
    
    cart = get_cart(chat_id)
    total = get_cart_total(chat_id)
    
    order_text = f"""‚úÖ *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ!*

üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üìç –ê–¥—Ä–µ—Å–∞: {address}

üõí *–¢–æ–≤–∞—Ä–∏:*
"""
    
    if NEW_SYSTEM_ENABLED and isinstance(cart, list):
        items_list = []
        for item in cart:
            order_text += f"‚Ä¢ {item['name']} x{item['quantity']} ‚Äî {item['price'] * item['quantity']:.0f} –≥—Ä–Ω\n"
            items_list.append({'name': item['name'], 'quantity': item['quantity'], 'price': item['price']})
    else:
        items_list = []
        for item_data in cart.values():
            order_text += f"‚Ä¢ {item_data['name']} x{item_data['quantity']} ‚Äî {item_data['price'] * item_data['quantity']:.0f} –≥—Ä–Ω\n"
            items_list.append({'name': item_data['name'], 'quantity': item_data['quantity'], 'price': item_data['price']})
    
    order_text += f"\nüí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total:.0f} –≥—Ä–Ω*\n\n‚ú® –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
    
    telegram.tg_send_message(chat_id, order_text)
    
    try:
        database.save_order(str(chat_id), phone, address, items_list, total)
        logger.info(f"‚úÖ Order saved for {chat_id}: {total} –≥—Ä–Ω")
    except Exception as e:
        logger.error(f"‚ùå Order save error: {e}")
    
    clear_cart(chat_id)
    clear_user_state(chat_id)

# ============================================================================
# Webhook
# ============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """–ì–æ–ª–æ–≤–Ω–∏–π webhook handler –∑ –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—î—é"""
    try:
        data = request.json
        
        # –î–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—è update_id
        update_id = data.get('update_id')
        if not hasattr(webhook, 'processed_updates'):
            webhook.processed_updates = set()
        
        if update_id and update_id in webhook.processed_updates:
            logger.debug(f"‚è≠Ô∏è Skipping duplicate update {update_id}")
            return jsonify({'ok': True}), 200
        
        if update_id:
            webhook.processed_updates.add(update_id)
            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö (–∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100)
            if len(webhook.processed_updates) > 100:
                webhook.processed_updates = set(list(webhook.processed_updates)[-100:])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç—É
        secret = request.headers.get('X-Telegram-Bot-Api-Secret-Token', '')
        expected = os.getenv('WEBHOOK_SECRET', 'default_secret')
        
        if secret != expected:
            logger.warning("‚ö†Ô∏è Invalid webhook secret")
            return jsonify({'ok': False}), 403
        
        logger.debug(f"üì® Processing update {update_id}")
        
        # Callback query
        if 'callback_query' in data:
            callback = data['callback_query']
            callback_id = callback['id']
            chat_id = callback['message']['chat']['id']
            callback_data = callback['data']
            
            logger.info(f"üñ±Ô∏è Callback from {chat_id}: {callback_data}")
            
            telegram.tg_answer_callback(callback_id)
            
            if callback_data.startswith('add_'):
                item_id = callback_data.split('_')[1]
                item = next((i for i in menu_data if str(i['id']) == item_id), None)
                if item:
                    add_to_cart(chat_id, item)
                    telegram.tg_send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫: {item.get('–ù–∞–∑–≤–∞')}")
            
            elif callback_data == 'view_cart':
                show_cart_preview(chat_id)
            
            elif callback_data == 'back_to_menu':
                show_menu_with_buttons(chat_id)
            
            elif callback_data == 'clear_cart':
                clear_cart(chat_id)
                telegram.tg_send_message(chat_id, "üóëÔ∏è –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
            
            elif callback_data == 'checkout':
                start_checkout(chat_id)
            
            elif callback_data.startswith('info_'):
                item_id = callback_data.split('_')[1]
                item = next((i for i in menu_data if str(i['id']) == item_id), None)
                if item:
                    price = parse_price(item.get('–¶—ñ–Ω–∞', 0))
                    info_text = f"üì¶ *{item.get('–ù–∞–∑–≤–∞')}*\n\nüí∞ –¶—ñ–Ω–∞: {price:.0f} –≥—Ä–Ω\n\nüìù {item.get('–û–ø–∏—Å', '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π')}"
                    telegram.tg_send_message(chat_id, info_text)
        
        # Message
        elif 'message' in data:
            msg = data['message']
            chat_id = msg['chat']['id']
            text = msg.get('text', '').strip()
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü emoji –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è (–∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏ —ñ —Ü–∏—Ñ—Ä–∏)
            text_clean = ''.join(c for c in text if c.isalnum() or c.isspace()).strip().lower()
            
            logger.info(f"üì• Message from {chat_id}: '{text}' -> '{text_clean}'")
            
            current_state = get_user_state(chat_id)
            
            # –ö–æ–º–∞–Ω–¥–∏ (–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Ç–∞ emoji)
            if text.startswith('/start') or 'start' in text_clean:
                clear_user_state(chat_id)
                telegram.tg_send_message(
                    chat_id,
                    "üëã *–í—ñ—Ç–∞—î–º–æ –≤ Ferrik Bot!*\n\n" +
                    "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∑–Ω–∏–∑—É –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n" +
                    "üìã /menu - –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤\n" +
                    "üõí /cart - –ö–æ—à–∏–∫\n" +
                    "‚ùì /help - –î–æ–ø–æ–º–æ–≥–∞"
                )
            
            elif text.startswith('/menu') or 'menu' in text_clean or '–º–µ–Ω—é' in text_clean:
                show_menu_with_buttons(chat_id)
            
            elif text.startswith('/cart') or 'cart' in text_clean or '–∫–æ—à–∏–∫' in text_clean:
                show_cart_preview(chat_id)
            
            elif text.startswith('/help') or 'help' in text_clean or '–¥–æ–ø–æ–º–æ–≥–∞' in text_clean:
                telegram.tg_send_message(
                    chat_id,
                    "üìñ *–î–æ–ø–æ–º–æ–≥–∞*\n\n" +
                    "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n" +
                    "üìã –ú–µ–Ω—é - –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤\n" +
                    "üõí –ö–æ—à–∏–∫ - –í–∞—à –∫–æ—à–∏–∫\n" +
                    "‚ùì –î–æ–ø–æ–º–æ–≥–∞ - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n" +
                    "üîÑ /start - –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É\n\n" +
                    "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∑–Ω–∏–∑—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É!"
                )
            
            # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤ (–≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É/–∞–¥—Ä–µ—Å–∏)
            elif current_state == STATE_AWAITING_PHONE:
                handle_phone_input(chat_id, text)
            
            elif current_state == STATE_AWAITING_ADDRESS:
                handle_address_input(chat_id, text)
            
            # –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞
            else:
                telegram.tg_send_message(
                    chat_id,
                    "‚ùì *–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞*\n\n" +
                    "–°–ø—Ä–æ–±—É–π—Ç–µ:\n" +
                    "üìã –ú–µ–Ω—é - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏\n" +
                    "üõí –ö–æ—à–∏–∫ - –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ—à–∏–∫\n" +
                    "‚ùì –î–æ–ø–æ–º–æ–≥–∞ - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
                )
        
        return jsonify({'ok': True}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        return jsonify({'ok': False, 'error': str(e)}), 500

# ============================================================================
# Health Check
# ============================================================================

app.route('/')
def index():
    """Health check endpoint"""
    return jsonify({
        'status': 'ok',
        'bot': 'Ferrik Bot',
        'version': '2.0',
        'new_system': NEW_SYSTEM_ENABLED,
        'menu_items': len(menu_data)
    })

@app.route('/health')
def health():
    """Detailed health check"""
    return jsonify({
        'status': 'healthy',
        'database': os.path.exists('bot.db'),
        'menu_loaded': len(menu_data) > 0,
        'new_system': NEW_SYSTEM_ENABLED,
        'environment': os.getenv('ENVIRONMENT', 'unknown')
    })

# ============================================================================
# Initialization
# ============================================================================

def initialize():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
    global menu_data
    
    logger.info("=" * 60)
    logger.info("üöÄ Initializing Ferrik Bot")
    logger.info("=" * 60)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é
    try:
        menu_data = sheets.get_menu_from_sheet()
        logger.info(f"‚úÖ Menu loaded: {len(menu_data)} items")
    except Exception as e:
        logger.error(f"‚ùå Menu load error: {e}")
        menu_data = []
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ webhook
    try:
        webhook_url = os.getenv('WEBHOOK_URL')
        
        if not webhook_url:
            # Render –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î RENDER_EXTERNAL_URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
            render_url = os.getenv('RENDER_EXTERNAL_URL')
            if render_url:
                webhook_url = f"{render_url}/webhook"
        
        if webhook_url:
            telegram.tg_set_webhook(webhook_url)
            logger.info(f"‚úÖ Webhook set: {webhook_url}")
        else:
            logger.warning("‚ö†Ô∏è No webhook URL configured")
    
    except Exception as e:
        logger.error(f"‚ùå Webhook setup error: {e}")
    
    logger.info("=" * 60)
    logger.info("‚úÖ Bot initialization complete!")
    logger.info("=" * 60)

# ============================================================================
# Main Entry Point
# ============================================================================
if __name__ == "__main__":
    # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä—Ç (Render –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
    port = int(os.getenv('PORT', 10000))
    debug = os.getenv('DEBUG', 'false').lower() == 'true'
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    logger.info("=" * 60)
    logger.info("ü§ñ CONFIGURATION")
    logger.info("=" * 60)
    logger.info(f"Port: {port}")
    logger.info(f"Debug: {debug}")
    logger.info(f"New System: {NEW_SYSTEM_ENABLED}")
    logger.info(f"Environment: {os.getenv('ENVIRONMENT', 'unknown')}")
    logger.info(f"Database: {'bot.db'}")
    logger.info("=" * 60)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–¢–Ü–õ–¨–ö–ò —Ç—É—Ç, –Ω–µ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ!)
    initialize()
    
    # –ó–∞–ø—É—Å–∫ Flask
    logger.info(f"üöÄ Starting server on 0.0.0.0:{port}")
    app.run(host="0.0.0.0", port=port, debug=debug)
    