import os
import logging
import json
import re
from flask import Flask, request, jsonify
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_cors import CORS
from handlers.cart import show_cart, add_item_to_cart
from handlers.order import start_checkout_process
from handlers.geo import check_delivery_availability
from services.sheets import init_gspread_client, update_menu_cache, get_item_by_id, test_gspread_connection
from services.gemini import get_gemini_recommendation
from services.telegram import tg_send_message, tg_send_photo, tg_answer_callback, tg_edit_message
from models.user import init_db, get_state, set_state, get_cart, set_cart
from datetime import datetime
try:
    from zoneinfo import ZoneInfo
except ImportError:
    logging.warning("zoneinfo not found. Using naive datetime.")
    ZoneInfo = None

app = Flask(__name__)
CORS(app)  # –î–æ–¥–∞—î–º–æ CORS –¥–ª—è –±–µ–∑–ø–µ–∫–∏
limiter = Limiter(app, key_func=get_remote_address, default_limits=["200 per day", "50 per hour"])

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler('bonapp.log')]
)
logger = logging.getLogger("bonapp")

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "BonApp123!").strip()
API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()
OPERATOR_CHAT_ID = os.environ.get("OPERATOR_CHAT_ID", "").strip()
DEFAULT_CITY = os.environ.get("DEFAULT_CITY", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å").strip()
TIMEZONE_NAME = os.environ.get("TIMEZONE", "Europe/Kyiv").strip()
app.config['JWT_SECRET_KEY'] = os.environ.get("JWT_SECRET_KEY", "bonapp-super-secret")

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
STATE_NORMAL = "normal"
STATE_AWAITING_PHONE = "awaiting_phone"
STATE_AWAITING_PHONE_CONFIRM = "awaiting_phone_confirm"
STATE_AWAITING_ADDRESS = "awaiting_address"
STATE_AWAITING_PAYMENT_METHOD = "awaiting_payment_method"
STATE_AWAITING_DELIVERY_TYPE = "awaiting_delivery_type"
STATE_AWAITING_DELIVERY_TIME = "awaiting_delivery_time"
STATE_AWAITING_CONFIRMATION = "awaiting_confirmation"
STATE_AWAITING_FEEDBACK = "awaiting_feedback"
STATE_AWAITING_OPERATOR_MESSAGE = "awaiting_operator_message"

# Webhook –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
@limiter.limit("5/minute")
@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    header_secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if WEBHOOK_SECRET and header_secret != WEBHOOK_SECRET:
        logger.warning("Invalid webhook secret header: %s", header_secret)
        return jsonify({"ok": False, "error": "invalid secret"}), 403

    update = request.get_json(silent=True)
    if not update:
        logger.warning("Webhook received empty data.")
        return jsonify({"status": "empty"}), 200

    # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if "message" in update:
        msg = update["message"]
        chat_id = msg["chat"]["id"]
        text = msg.get("text", "").strip()
        user_state = get_state(chat_id)

        if text == "/start":
            greeting = generate_personalized_greeting(msg.get("from", {}).get("first_name", "–î—Ä—É–∂–µ"))
            tg_send_message(chat_id, greeting, reply_markup=main_keyboard())
            set_state(chat_id, STATE_NORMAL)
        elif text == "/menu":
            show_menu(chat_id)
        elif text == "/cart":
            show_cart(chat_id)
        elif text.startswith("/add_"):
            item_id = text.replace("/add_", "")
            add_item_to_cart(chat_id, item_id)
        elif user_state == STATE_AWAITING_PHONE:
            phone_number = re.sub(r'[^\d+]', '', text)
            if re.match(r'^\+?3?8?0\d{9}$', phone_number):
                keyboard = {
                    "inline_keyboard": [
                        [{"text": "‚úÖ –í—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä", "callback_data": f"confirm_phone_{phone_number}"}],
                        [{"text": "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π", "callback_data": "change_phone"}]
                    ]
                }
                tg_send_message(chat_id, f"–í–∏ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä: {phone_number}. –ß–∏ –≤—ñ—Ä–Ω–∏–π –≤—ñ–Ω? üòä", reply_markup=keyboard)
                set_state(chat_id, STATE_AWAITING_PHONE_CONFIRM)
            else:
                tg_send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX. üì±")
        elif user_state == STATE_AWAITING_ADDRESS:
            address = text.strip()
            coords = check_delivery_availability(address)
            if coords:
                cart = get_cart(chat_id)
                cart["address"] = address
                cart["coords"] = coords
                set_cart(chat_id, cart)
                tg_send_message(chat_id, "–ê–¥—Ä–µ—Å–∞ –ø—Ä–∏–π–Ω—è—Ç–∞! üè† –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup={
                    "inline_keyboard": [
                        [{"text": "üí≥ –ö–∞—Ä—Ç–∞", "callback_data": "payment_card"}],
                        [{"text": "üíµ –ì–æ—Ç—ñ–≤–∫–∞", "callback_data": "payment_cash"}]
                    ]
                })
                set_state(chat_id, STATE_AWAITING_PAYMENT_METHOD)
            else:
                tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ —Ü—ñ—î—é –∞–¥—Ä–µ—Å–æ—é –Ω–µ–º–æ–∂–ª–∏–≤–∞. üòî –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É.")

    # –û–±—Ä–æ–±–∫–∞ callback
    if "callback_query" in update:
        cq = update["callback_query"]
        data = cq.get("data", "")
        callback_id = cq.get("id")
        message = cq.get("message", {})
        chat_id = message.get("chat", {}).get("id")
        message_id = message.get("message_id")

        if data == "show_menu":
            show_menu(chat_id)
            tg_answer_callback(callback_id)
        elif data == "show_cart":
            show_cart(chat_id)
            tg_answer_callback(callback_id)
        elif data == "get_recommendation":
            recommendation = get_gemini_recommendation("–†–µ–∫–æ–º–µ–Ω–¥—É–π —Å—Ç—Ä–∞–≤—É –¥–ª—è –≤–µ—á–µ—Ä—ñ")
            tg_send_message(chat_id, f"ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –≤—ñ–¥ AI: {recommendation} üçΩÔ∏è")
            tg_answer_callback(callback_id)
        elif data == "contact_operator":
            tg_send_message(chat_id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: üìû")
            set_state(chat_id, STATE_AWAITING_OPERATOR_MESSAGE)
            tg_answer_callback(callback_id)
        elif data == "leave_feedback":
            tg_send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫: üìù")
            set_state(chat_id, STATE_AWAITING_FEEDBACK)
            tg_answer_callback(callback_id)
        elif data.startswith("confirm_phone_"):
            phone_number = data.replace("confirm_phone_", "")
            cart = get_cart(chat_id)
            cart["phone"] = phone_number
            set_cart(chat_id, cart)
            tg_answer_callback(callback_id, text="–ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! ‚úÖ")
            tg_edit_message(chat_id, message_id, "‚úÖ –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!", reply_markup=None)
            set_state(chat_id, STATE_AWAITING_ADDRESS)
            tg_send_message(chat_id, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏: üè†")
        elif data == "change_phone":
            tg_answer_callback(callback_id, text="–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä. üì±")
            tg_edit_message(chat_id, message_id, "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:", reply_markup=None)
            set_state(chat_id, STATE_AWAITING_PHONE)

    return jsonify({"ok": True})

def generate_personalized_greeting(user_name="–î—Ä—É–∂–µ"):
    user_name = (user_name or '').strip() or '–î—Ä—É–∂–µ'
    current = datetime.now() if not ZoneInfo else datetime.now(ZoneInfo(TIMEZONE_NAME))
    hour = current.hour
    greeting = f"–î–æ–±—Ä–æ–≥–æ {'—Ä–∞–Ω–∫—É' if 6 <= hour < 12 else '–¥–Ω—è' if 12 <= hour < 18 else '–≤–µ—á–æ—Ä–∞'}, {user_name}! üòäüçî"
    status = "–†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π! üçΩÔ∏è –ì–æ—Ç–æ–≤—ñ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è." if is_restaurant_open() else "–†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä–∏—Ç–∏–π. üòî –ü—Ä–∞—Ü—é—î–º–æ –∑ 9:00 –¥–æ 22:00."
    return f"{greeting}\n\n{status}\n\n–í—ñ—Ç–∞—î–º–æ –≤ BonApp! üçï –Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–º–∞—á–Ω–æ—ó —ó–∂—ñ!\nüìã /menu - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é\nüõí /cart - –≤–∞—à –∫–æ—à–∏–∫"

def is_restaurant_open():
    current_hour = datetime.now().hour if not ZoneInfo else datetime.now(ZoneInfo(TIMEZONE_NAME)).hour
    return 9 <= current_hour < 22

def show_menu(chat_id):
    update_menu_cache()
    menu = [item for item in menu_cache if item.get("–ê–∫—Ç–∏–≤–Ω–∏–π", "–¢–∞–∫").lower() == "—Ç–∞–∫"]
    if not menu:
        tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, –º–µ–Ω—é –ø–æ—Ä–æ–∂–Ω—î. üòî –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!")
        return
    for item in menu:
        photo_url = item.get("–§–æ—Ç–æ URL", "")
        caption = f"üçΩÔ∏è *{item['–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏']}* ({item['–¶—ñ–Ω–∞']} –≥—Ä–Ω)\n{item['–û–ø–∏—Å']}"
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", "callback_data": f"add_{item['ID']}"}],
                [{"text": "‚ÑπÔ∏è –î–µ—Ç–∞–ª—ñ", "callback_data": f"details_{item['ID']}"}]
            ]
        }
        if photo_url:
            tg_send_photo(chat_id, photo_url, caption, reply_markup=keyboard)
        else:
            tg_send_message(chat_id, caption, reply_markup=keyboard)
    tg_send_message(chat_id, "üìã –í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É:", reply_markup=main_keyboard())

def main_keyboard():
    return {
        "inline_keyboard": [
            [{"text": "üçΩÔ∏è –ú–µ–Ω—é", "callback_data": "show_menu"}],
            [{"text": "üõí –ö–æ—à–∏–∫", "callback_data": "show_cart"}],
            [{"text": "ü§ñ –ü–æ—Ä–∞–¥–∞ –≤—ñ–¥ AI", "callback_data": "get_recommendation"}],
            [{"text": "üìû –û–ø–µ—Ä–∞—Ç–æ—Ä", "callback_data": "contact_operator"}],
            [{"text": "‚≠ê –í—ñ–¥–≥—É–∫", "callback_data": "leave_feedback"}]
        ]
    }

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
with app.app_context():
    logger.info("BonApp initialization started.")
    init_db()
    if init_gspread_client():
        test_gspread_connection()
        update_menu_cache(force=True)
    else:
        logger.error("Google Sheets initialization failed.")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
