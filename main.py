# main.py (–¥–æ–¥–∞–π –¥–æ –ü–û–ß–ê–¢–ö–£ —Ñ–∞–π–ª—É)

"""
üçï FERRIKBOT v2.1 - –∑ Google Sheets –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é
"""

import os
import logging
import threading
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler
import json

# ============ IMPORT SYNC –°–ò–°–¢–ï–ú–ò ============
from services.sheets_sync import GoogleSheetsSync, DatabaseSync, SyncScheduler

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

app = Flask(__name__)
bot_application = None

# ============ –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü –î–õ–Ø SYNC ============
sheets_sync = None
db_sync = None
sync_scheduler = None

# ============ –ö–û–ù–§–Ü–ì ============

class Config:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL", "http://localhost:5000")
    DEBUG = os.getenv("DEBUG", "False").lower() == "true"
    ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
    PORT = int(os.getenv("PORT", 5000))
    
    # Google Sheets
    GOOGLE_SHEETS_ID = os.getenv("GOOGLE_SHEETS_ID", "")
    GOOGLE_SHEETS_CREDENTIALS = os.getenv("GOOGLE_SHEETS_CREDENTIALS", "")
    
    # Database
    DATABASE_URL = os.getenv("DATABASE_URL", "")
    
    @staticmethod
    def validate():
        if not Config.TELEGRAM_BOT_TOKEN:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not set")
            return False
        if not Config.DATABASE_URL:
            logger.error("‚ùå DATABASE_URL not set")
            return False
        return True


config = Config()

# ============ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø SYNC ============

def init_sync():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é"""
    global sheets_sync, db_sync, sync_scheduler
    
    logger.info("üîÑ Initializing Google Sheets & Database Sync...")
    
    try:
        # Google Sheets
        if config.GOOGLE_SHEETS_ID and config.GOOGLE_SHEETS_CREDENTIALS:
            sheets_sync = GoogleSheetsSync(
                config.GOOGLE_SHEETS_CREDENTIALS,
                config.GOOGLE_SHEETS_ID
            )
            logger.info("‚úÖ Google Sheets initialized")
        else:
            logger.warning("‚ö†Ô∏è Google Sheets credentials not set")
        
        # Database
        db_sync = DatabaseSync(config.DATABASE_URL)
        logger.info("‚úÖ Database initialized")
        
        # Scheduler
        if sheets_sync and db_sync:
            sync_scheduler = SyncScheduler(sheets_sync, db_sync)
            sync_scheduler.start()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–π –æ–¥—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
            sync_scheduler.sync_menu_job()
            logger.info("‚úÖ Sync scheduler started")
        
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Sync initialization error: {e}")
        return False


# ============ TELEGRAM HANDLERS ============

def setup_handlers(application):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    
    logger.info("üìù Setting up handlers...")
    
    try:
        async def start_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /start"""
            await update.message.reply_text(
                "üç¥ –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî Ferrik ü§ñ\n\n"
                "üìã /menu ‚Äî –ú–µ–Ω—é\n"
                "/categories ‚Äî –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó\n"
                "/help ‚Äî –î–æ–ø–æ–º–æ–≥–∞"
            )
        
        async def menu_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –≤–∏–≤—ñ–¥ –º–µ–Ω—é –∑ –ë–î"""
            try:
                if not db_sync:
                    await update.message.reply_text("‚ùå –ë–î –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞")
                    return
                
                menu = db_sync.get_menu()
                
                if not menu:
                    await update.message.reply_text("üòî –ú–µ–Ω—é –ø–æ—Ä–æ–∂–Ω—î")
                    return
                
                # –§–æ—Ä–º–∞—Ç—É–π –º–µ–Ω—é
                text = "üìã *–ú–ï–ù–Æ:*\n\n"
                for item in menu[:10]:  # –ü–µ—Ä—à–∏—Ö 10
                    text += f"üçï *{item['name']}* ‚Äî {item['price']} –≥—Ä–Ω\n"
                    if item.get('description'):
                        text += f"   _{item['description'][:50]}..._\n"
                    text += "\n"
                
                await update.message.reply_text(text, parse_mode='Markdown')
            
            except Exception as e:
                logger.error(f"‚ùå Menu error: {e}")
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é")
        
        async def categories_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /categories"""
            try:
                if not db_sync:
                    await update.message.reply_text("‚ùå –ë–î –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞")
                    return
                
                # –û—Ç—Ä–∏–º–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                import sqlalchemy
                session = db_sync.Session()
                categories = session.query(
                    sqlalchemy.distinct(db_sync.db_sync.__class__.__dict__['MenuItem'].category)
                ).all() if False else ["–ü—ñ—Ü–∏", "–ë—É—Ä–≥–µ—Ä–∏", "–°–∞–ª–∞—Ç–∏"]
                session.close()
                
                text = "üìÇ *–ö–ê–¢–ï–ì–û–†–Ü–á:*\n\n"
                for cat in categories:
                    text += f"‚Ä¢ {cat}\n"
                
                await update.message.reply_text(text, parse_mode='Markdown')
            
            except Exception as e:
                logger.error(f"‚ùå Categories error: {e}")
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞")
        
        async def help_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /help"""
            await update.message.reply_text(
                "üìö *–î–û–ü–û–ú–û–ì–ê:*\n\n"
                "/menu ‚Äî –í—Å–µ –º–µ–Ω—é\n"
                "/categories ‚Äî –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó\n"
                "/status ‚Äî –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó\n"
            )
        
        async def status_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
            status_text = "üìä *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–ò:*\n\n"
            status_text += f"ü§ñ –ë–æ—Ç: ‚úÖ Online\n"
            status_text += f"üìä –ë–î: {'‚úÖ Connected' if db_sync else '‚ùå Disconnected'}\n"
            status_text += f"üì∞ Sheets: {'‚úÖ Connected' if sheets_sync else '‚ùå Disconnected'}\n"
            status_text += f"üîÑ Sync: {'‚úÖ Running' if sync_scheduler else '‚ùå Stopped'}\n"
            
            await update.message.reply_text(status_text, parse_mode='Markdown')
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CommandHandler("categories", categories_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status_command))
        
        logger.info("‚úÖ Handlers registered")
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Handler error: {e}")
        return False


# ============ BOT CREATION ============

def create_bot_application():
    global bot_application
    
    logger.info("ü§ñ Creating bot...")
    
    TOKEN = config.TELEGRAM_BOT_TOKEN
    
    if not TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN not found")
        return None
    
    try:
        bot_application = Application.builder().token(TOKEN).build()
        
        import asyncio
        async def init_app():
            await bot_application.initialize()
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(init_app())
        
        setup_handlers(bot_application)
        
        logger.info("‚úÖ Bot created")
        return bot_application
    
    except Exception as e:
        logger.error(f"‚ùå Bot creation error: {e}")
        return None


# ============ STARTUP ============

def startup():
    logger.info("=" * 70)
    logger.info("üöÄ FERRIKBOT v2.1 + GOOGLE SHEETS SYNC")
    logger.info("=" * 70)
    logger.info("")
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if not config.validate():
        return False
    
    logger.info("‚úÖ Configuration valid")
    logger.info("")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è sync
    if not init_sync():
        logger.warning("‚ö†Ô∏è Sync not available, continuing without it...")
    
    logger.info("")
    
    # –°—Ç–≤–æ—Ä–∏ –±–æ—Ç–∞
    if not create_bot_application():
        return False
    
    logger.info("‚úÖ BOT READY!")
    logger.info("=" * 70)
    logger.info("")
    
    return True


# ============ ROUTES ============

@app.route('/')
def index():
    return jsonify({
        "status": "üü¢ online",
        "bot": "üçï FerrikBot v2.1",
        "sync": "‚úÖ Google Sheets" if sheets_sync else "‚ùå No Sheets",
        "db": "‚úÖ PostgreSQL" if db_sync else "‚ùå No DB"
    })


@app.route('/webhook', methods=['POST'])
def webhook():
    if not bot_application:
        return jsonify({"ok": False}), 500
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({"ok": False}), 400
        
        update = Update.de_json(data, bot_application.bot)
        if not update:
            return jsonify({"ok": False}), 400
        
        import asyncio
        
        async def process():
            try:
                await bot_application.process_update(update)
            except Exception as e:
                logger.error(f"‚ùå Update error: {e}")
        
        threading.Thread(target=lambda: asyncio.run(process())).start()
        return jsonify({"ok": True}), 200
    
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return jsonify({"ok": False}), 500


# ============ MAIN ============

initialized = False

@app.before_request
def init_on_first_request():
    global initialized
    
    if not initialized:
        if startup():
            initialized = True


if __name__ == '__main__':
    app.run(host="0.0.0.0", port=config.PORT, debug=config.DEBUG, use_reloader=False)