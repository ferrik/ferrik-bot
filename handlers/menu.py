"""
–í–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é –∑ –ø—Ä—è–º–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º —É –∫–æ—à–∏–∫
"""

import logging
from services.sheets import get_menu_from_sheet, get_menu_by_category, get_item_by_id
from services.telegram import tg_send_message, tg_answer_callback, tg_send_photo
from models.user import get_cart, set_cart, get_state
from handlers.cart import add_item_to_cart

logger = logging.getLogger('ferrik')


def show_menu_with_cart_buttons(chat_id, category=None, page=1):
    """
    –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫
    
    Args:
        chat_id: ID —á–∞—Ç—É
        category: –§—ñ–ª—å—Ç—Ä –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        page: –ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó)
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é
        if category:
            menu = get_menu_from_sheet()
            menu = [item for item in menu if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category]
        else:
            menu = get_menu_from_sheet()
        
        if not menu:
            tg_send_message(chat_id, "‚ùå –ú–µ–Ω—é –ø–æ—Ä–æ–∂–Ω—î –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
            return
        
        # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è (6 —Å—Ç—Ä–∞–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ)
        ITEMS_PER_PAGE = 6
        total_pages = (len(menu) - 1) // ITEMS_PER_PAGE + 1
        start_idx = (page - 1) * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        page_items = menu[start_idx:end_idx]
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if category:
            header = f"üçΩ <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}</b>\n"
        else:
            header = "üçΩ <b>–ù–∞—à–µ –º–µ–Ω—é</b>\n"
        
        header += f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{total_pages}\n\n"
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–∂–Ω—É —Å—Ç—Ä–∞–≤—É –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ –∫–Ω–æ–ø–∫–æ—é
        tg_send_message(chat_id, header)
        
        for item in page_items:
            send_menu_item_with_button(chat_id, item)
        
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
        navigation = build_navigation_keyboard(category, page, total_pages)
        tg_send_message(chat_id, "üëÜ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚ûï —â–æ–± –¥–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É –≤ –∫–æ—à–∏–∫", reply_markup=navigation)
        
    except Exception as e:
        logger.error(f"Error showing menu: {e}", exc_info=True)
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é")


def send_menu_item_with_button(chat_id, item):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –æ–¥–Ω—É —Å—Ç—Ä–∞–≤—É –∑ –∫–Ω–æ–ø–∫–æ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    
    Args:
        chat_id: ID —á–∞—Ç—É
        item: –î–∞–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –∑ Google Sheets
    """
    try:
        item_id = item.get('ID')
        name = item.get('–°—Ç—Ä–∞–≤–∏', 'N/A')
        desc = item.get('–û–ø–∏—Å', '')
        price = item.get('–¶—ñ–Ω–∞', 0)
        rating = item.get('–†–µ–π—Ç–∏–Ω–≥', '')
        cook_time = item.get('–ß–∞—Å_–ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è', '')
        allergens = item.get('–ê–ª–ª–µ—Ä–≥–µ–Ω–∏', '')
        photo_url = item.get('–§–æ—Ç–æ URL', '').strip()
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
        text = f"<b>{name}</b>\n"
        
        if desc:
            text += f"üìù {desc}\n"
        
        text += f"üí∞ <b>{price} –≥—Ä–Ω</b>\n"
        
        if rating:
            stars = '‚≠ê' * int(float(rating)) if rating else ''
            text += f"{stars} {rating}/5\n"
        
        if cook_time:
            text += f"‚è± –ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è: {cook_time} —Ö–≤\n"
        
        if allergens:
            text += f"‚ö†Ô∏è –ê–ª–µ—Ä–≥–µ–Ω–∏: {allergens}\n"
        
        # Inline –∫–Ω–æ–ø–∫–∏
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", "callback_data": f"add_to_cart_{item_id}"},
                ],
                [
                    {"text": "‚ûñ 1 ‚ûï", "callback_data": f"quick_qty_{item_id}"},
                    {"text": "üîç –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", "callback_data": f"item_details_{item_id}"}
                ]
            ]
        }
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ —Ñ–æ—Ç–æ –∞–±–æ –±–µ–∑
        if photo_url and photo_url.startswith('http'):
            tg_send_photo(chat_id, photo_url, text, reply_markup=keyboard)
        else:
            tg_send_message(chat_id, text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error sending menu item: {e}", exc_info=True)


def build_navigation_keyboard(category, current_page, total_pages):
    """–ë—É–¥—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ –º–µ–Ω—é"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    nav_row = []
    if current_page > 1:
        callback = f"menu_page_{category or 'all'}_{current_page - 1}"
        nav_row.append({"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback_data": callback})
    
    nav_row.append({"text": f"{current_page}/{total_pages}", "callback_data": "noop"})
    
    if current_page < total_pages:
        callback = f"menu_page_{category or 'all'}_{current_page + 1}"
        nav_row.append({"text": "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", "callback_data": callback})
    
    buttons.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    buttons.append([
        {"text": "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó", "callback_data": "show_categories"},
        {"text": "üõí –ö–æ—à–∏–∫", "callback_data": "show_cart"}
    ])
    
    return {"inline_keyboard": buttons}


def show_categories(chat_id):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –≤–∏–±–æ—Ä—É"""
    try:
        menu = get_menu_from_sheet()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        categories = {}
        for item in menu:
            cat = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ')
            categories[cat] = categories.get(cat, 0) + 1
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = "üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Å—Ç—Ä–∞–≤:</b>\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        keyboard = {"inline_keyboard": []}
        
        for category, count in sorted(categories.items()):
            text += f"‚Ä¢ {category}: {count} –ø–æ–∑–∏—Ü—ñ–π\n"
            keyboard["inline_keyboard"].append([
                {"text": f"{category} ({count})", "callback_data": f"category_{category}"}
            ])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–í—Å–µ –º–µ–Ω—é"
        keyboard["inline_keyboard"].append([
            {"text": "üçΩ –í—Å–µ –º–µ–Ω—é", "callback_data": "menu_page_all_1"}
        ])
        
        tg_send_message(chat_id, text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing categories: {e}", exc_info=True)


def handle_add_to_cart_callback(chat_id, callback_data, callback_id):
    """
    –û–±—Ä–æ–±–ª—è—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫ —á–µ—Ä–µ–∑ callback
    
    Args:
        chat_id: ID —á–∞—Ç—É
        callback_data: –î–∞–Ω—ñ callback (—Ñ–æ—Ä–º–∞—Ç: add_to_cart_{item_id})
        callback_id: ID callback –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    """
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ ID —Ç–æ–≤–∞—Ä—É
        item_id = callback_data.replace('add_to_cart_', '')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
        item = get_item_by_id(item_id)
        
        if not item:
            tg_answer_callback(callback_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –î–æ–¥–∞—î–º–æ –≤ –∫–æ—à–∏–∫ (quantity=1 –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
        success = add_item_to_cart(chat_id, item_id, quantity=1)
        
        if success:
            item_name = item.get('–°—Ç—Ä–∞–≤–∏', '–¢–æ–≤–∞—Ä')
            tg_answer_callback(callback_id, f"‚úÖ {item_name} –¥–æ–¥–∞–Ω–æ!")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —à–≤–∏–¥–∫—ñ –¥—ñ—ó
            show_quick_actions(chat_id, item_id)
        else:
            tg_answer_callback(callback_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error handling add to cart: {e}", exc_info=True)
        tg_answer_callback(callback_id, "‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)


def show_quick_actions(chat_id, last_item_id):
    """
    –ü–æ–∫–∞–∑—É—î —à–≤–∏–¥–∫—ñ –¥—ñ—ó –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
    
    Args:
        chat_id: ID —á–∞—Ç—É
        last_item_id: ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –¥–æ–¥–∞–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
    """
    try:
        cart = get_cart(chat_id)
        items_count = sum(item.get('qty', 0) for item in cart.get('items', []))
        total = sum(
            float(item.get('price', 0)) * int(item.get('qty', 0)) 
            for item in cart.get('items', [])
        )
        
        text = f"üõí –£ –∫–æ—à–∏–∫—É: {items_count} –ø–æ–∑., —Å—É–º–∞: {total:.0f} –≥—Ä–Ω\n\n"
        text += "–©–æ –¥–∞–ª—ñ?"
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚ûï –î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–Ω—É", "callback_data": f"add_to_cart_{last_item_id}"},
                ],
                [
                    {"text": "üçΩ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", "callback_data": "continue_shopping"},
                    {"text": "üõí –ö–æ—à–∏–∫", "callback_data": "show_cart"}
                ],
                [
                    {"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "callback_data": "checkout"}
                ]
            ]
        }
        
        tg_send_message(chat_id, text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing quick actions: {e}", exc_info=True)


def handle_quick_quantity_selector(chat_id, callback_data, callback_id):
    """
    –ü–æ–∫–∞–∑—É—î —Å–µ–ª–µ–∫—Ç–æ—Ä –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    
    Args:
        chat_id: ID —á–∞—Ç—É
        callback_data: –î–∞–Ω—ñ callback (—Ñ–æ—Ä–º–∞—Ç: quick_qty_{item_id})
        callback_id: ID callback
    """
    try:
        item_id = callback_data.replace('quick_qty_', '')
        item = get_item_by_id(item_id)
        
        if not item:
            tg_answer_callback(callback_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        item_name = item.get('–°—Ç—Ä–∞–≤–∏', '–¢–æ–≤–∞—Ä')
        price = item.get('–¶—ñ–Ω–∞', 0)
        
        text = f"<b>{item_name}</b>\nüí∞ {price} –≥—Ä–Ω/—à—Ç\n\n–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:"
        
        # –ö–Ω–æ–ø–∫–∏ –∑ —Ä—ñ–∑–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "1 —à—Ç", "callback_data": f"add_qty_{item_id}_1"},
                    {"text": "2 —à—Ç", "callback_data": f"add_qty_{item_id}_2"},
                    {"text": "3 —à—Ç", "callback_data": f"add_qty_{item_id}_3"}
                ],
                [
                    {"text": "4 —à—Ç", "callback_data": f"add_qty_{item_id}_4"},
                    {"text": "5 —à—Ç", "callback_data": f"add_qty_{item_id}_5"},
                    {"text": "10 —à—Ç", "callback_data": f"add_qty_{item_id}_10"}
                ],
                [
                    {"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "callback_data": "cancel_qty"}
                ]
            ]
        }
        
        tg_answer_callback(callback_id, "–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å")
        tg_send_message(chat_id, text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing quantity selector: {e}", exc_info=True)


def handle_add_quantity_callback(chat_id, callback_data, callback_id):
    """
    –î–æ–¥–∞—î —Ç–æ–≤–∞—Ä –∑ –≤–∫–∞–∑–∞–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é
    
    Args:
        callback_data: –§–æ—Ä–º–∞—Ç add_qty_{item_id}_{quantity}
    """
    try:
        parts = callback_data.split('_')
        item_id = parts[2]
        quantity = int(parts[3])
        
        item = get_item_by_id(item_id)
        if not item:
            tg_answer_callback(callback_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –î–æ–¥–∞—î–º–æ –≤ –∫–æ—à–∏–∫
        success = add_item_to_cart(chat_id, item_id, quantity=quantity)
        
        if success:
            item_name = item.get('–°—Ç—Ä–∞–≤–∏')
            price = item.get('–¶—ñ–Ω–∞', 0)
            total = price * quantity
            
            tg_answer_callback(
                callback_id, 
                f"‚úÖ {item_name} x{quantity} = {total:.0f} –≥—Ä–Ω"
            )
            show_quick_actions(chat_id, item_id)
        else:
            tg_answer_callback(callback_id, "‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error adding quantity: {e}", exc_info=True)
        tg_answer_callback(callback_id, "‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)


def show_item_details(chat_id, item_id, callback_id=None):
    """
    –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—Ä–∞–≤—É
    
    Args:
        chat_id: ID —á–∞—Ç—É
        item_id: ID —Å—Ç—Ä–∞–≤–∏
        callback_id: ID callback (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        item = get_item_by_id(item_id)
        
        if not item:
            if callback_id:
                tg_answer_callback(callback_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        text = f"<b>{item.get('–°—Ç—Ä–∞–≤–∏', 'N/A')}</b>\n\n"
        
        desc = item.get('–û–ø–∏—Å', '')
        if desc:
            text += f"üìù <b>–û–ø–∏—Å:</b>\n{desc}\n\n"
        
        text += f"üí∞ <b>–¶—ñ–Ω–∞:</b> {item.get('–¶—ñ–Ω–∞', 0)} –≥—Ä–Ω\n"
        
        category = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '')
        if category:
            text += f"üçΩ <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {category}\n"
        
        restaurant = item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω', '')
        if restaurant:
            text += f"üè™ <b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> {restaurant}\n"
        
        cook_time = item.get('–ß–∞—Å_–ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è', '')
        if cook_time:
            text += f"‚è± <b>–ü—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:</b> {cook_time} —Ö–≤\n"
        
        delivery_time = item.get('–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)', '')
        if delivery_time:
            text += f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_time} —Ö–≤\n"
        
        allergens = item.get('–ê–ª–ª–µ—Ä–≥–µ–Ω–∏', '')
        if allergens:
            text += f"‚ö†Ô∏è <b>–ê–ª–µ—Ä–≥–µ–Ω–∏:</b> {allergens}\n"
        
        rating = item.get('–†–µ–π—Ç–∏–Ω–≥', '')
        if rating:
            stars = '‚≠ê' * int(float(rating))
            text += f"\n{stars} <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}/5\n"
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚ûï –î–æ–¥–∞—Ç–∏ 1 —à—Ç", "callback_data": f"add_to_cart_{item_id}"},
                    {"text": "‚ûï –í–∏–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", "callback_data": f"quick_qty_{item_id}"}
                ],
                [
                    {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", "callback_data": "menu_page_all_1"}
                ]
            ]
        }
        
        # –§–æ—Ç–æ
        photo_url = item.get('–§–æ—Ç–æ URL', '').strip()
        if photo_url and photo_url.startswith('http'):
            tg_send_photo(chat_id, photo_url, text, reply_markup=keyboard)
        else:
            tg_send_message(chat_id, text, reply_markup=keyboard)
        
        if callback_id:
            tg_answer_callback(callback_id)
        
    except Exception as e:
        logger.error(f"Error showing item details: {e}", exc_info=True)


# –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è main.py
__all__ = [
    'show_menu_with_cart_buttons',
    'show_categories',
    'handle_add_to_cart_callback',
    'handle_quick_quantity_selector',
    'handle_add_quantity_callback',
    'show_item_details'
]
