"""
Order Handler with Commission Processing
–û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–º –∫–æ–º—ñ—Å—ñ–π
"""

import logging
import json
from datetime import datetime
from config import (
    COMMISSION_CONFIG,
    ORDER_EXTENSION_FIELDS,
    PROMO_FIELDS,
    format_commission_report
)
from services.commission_service import (
    CommissionProcessor,
    PromoCodeManager,
    PartnerAnalytics
)

logger = logging.getLogger('order_handler')


class OrderManager:
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ –∑ –∫–æ–º—ñ—Å—ñ—è–º–∏"""
    
    def __init__(self, sheets_service, partners_data=None, promo_codes=None):
        """
        Args:
            sheets_service: —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets
            partners_data: —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ
            promo_codes: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ
        """
        self.sheets = sheets_service
        self.partners_data = partners_data or []
        self.promo_codes = promo_codes or []
        self.commission_processor = CommissionProcessor()
        self.promo_manager = PromoCodeManager()
    
    def create_order_with_commission(self, user_id, items, partner_id, promo_code=None):
        """
        –°—Ç–≤–æ—Ä—é—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –∫–æ–º—ñ—Å—ñ—é
        
        Args:
            user_id: Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            items: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ [{id, name, price, quantity}, ...]
            partner_id: ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (—Ä–µ—Å—Ç–æ—Ä–∞–Ω—É)
            promo_code: –ø—Ä–æ–º–æ–∫–æ–¥ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            {
                'order_id': str,
                'success': bool,
                'message': str,
                'commission_info': dict
            }
        """
        
        try:
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É
            order_total = sum(
                float(item.get('price', 0)) * int(item.get('quantity', 1))
                for item in items
            )
            
            if order_total < COMMISSION_CONFIG['min_order_value']:
                return {
                    'success': False,
                    'message': f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {COMMISSION_CONFIG['min_order_value']} –≥—Ä–Ω"
                }
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–∞–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_data = next(
                (p for p in self.partners_data if p.get('id') == partner_id),
                None
            )
            
            if not partner_data:
                logger.warning(f"Partner {partner_id} not found")
                partner_data = {'id': partner_id, 'commission_rate': COMMISSION_CONFIG['default_rate']}
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ–º–æ–∫–æ–¥
            discount_amount = 0
            if promo_code:
                is_valid, discount_percent, error = self.promo_manager.validate_promo_code(
                    promo_code,
                    self.promo_codes
                )
                
                if not is_valid:
                    logger.warning(f"Invalid promo code: {promo_code} - {error}")
                    # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∞–ª–µ —Å–ø–æ–≤—ñ—â–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    promo_code = None
                else:
                    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–Ω–∏–∂–∫—É
                    from config import apply_promo_discount
                    order_total, discount_amount = apply_promo_discount(order_total, discount_percent)
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ–º—ñ—Å—ñ—é
            order_data = {
                'order_id': self._generate_order_id(),
                'partner_id': partner_id,
                'total_amount': order_total,
                'promo_code': promo_code
            }
            
            commission_info = self.commission_processor.process_order_commission(
                order_data,
                partner_data
            )
            
            # –§–æ—Ä–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ
            order_record = {
                'order_id': commission_info['order_id'],
                'user_id': user_id,
                'partner_id': partner_id,
                'items': json.dumps(items),  # JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
                'total_amount': commission_info['original_amount'],
                'discount_amount': commission_info['discount_amount'],
                'final_amount': commission_info['final_amount'],
                'commission_rate': commission_info['commission_rate'],
                'commission_amount': commission_info['commission_amount'],
                'platform_revenue': commission_info['platform_revenue'],
                'promo_code': promo_code or '',
                'status': 'pending',
                'created_at': datetime.now().isoformat()
            }
            
            logger.info(f"Order {order_record['order_id']} created with commission {commission_info['commission_amount']} –≥—Ä–Ω")
            
            return {
                'success': True,
                'order_id': commission_info['order_id'],
                'message': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ',
                'commission_info': commission_info,
                'order_record': order_record
            }
        
        except Exception as e:
            logger.error(f"Error creating order: {e}", exc_info=True)
            return {
                'success': False,
                'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
            }
    
    def get_order_summary(self, order_data):
        """
        –§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—é–º–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Returns:
            str - —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –¥–ª—è Telegram
        """
        
        summary = f"""
üìã –†–ï–ó–Æ–ú–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø

ID: {order_data.get('order_id')}

üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å:
‚Ä¢ –°—É–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤: {order_data.get('original_amount', 0)} –≥—Ä–Ω
‚Ä¢ –ó–Ω–∏–∂–∫–∞: {order_data.get('discount_amount', 0)} –≥—Ä–Ω
‚Ä¢ –î–æ —Å–ø–ª–∞—Ç–∏: {order_data.get('final_amount', 0)} –≥—Ä–Ω

üìä –î–µ—Ç–∞–ª—ñ:
‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä: {order_data.get('partner_name', 'N/A')}
‚Ä¢ –ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data.get('delivery_time', 'N/A')} —Ö–≤
‚Ä¢ –°—Ç–∞—Ç—É—Å: {order_data.get('status', '–æ–±—Ä–æ–±–∫–∞')}

‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ
üöö –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
"""
        return summary
    
    def get_partner_commission_summary(self, partner_id, orders_list):
        """
        –û—Ç—Ä–∏–º—É—î —Ä–µ–∑—é–º–µ –∫–æ–º—ñ—Å—ñ–π –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        
        Returns:
            str - —Ä–µ–∑—é–º–µ –¥–ª—è Telegram
        """
        
        partner_data = next(
            (p for p in self.partners_data if p.get('id') == partner_id),
            None
        )
        
        if not partner_data:
            return "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        partner_orders = [o for o in orders_list if o.get('partner_id') == partner_id]
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = CommissionProcessor.calculate_weekly_stats(partner_orders)
        
        partner_data.update(stats)
        
        return format_commission_report(partner_data)
    
    def _generate_order_id(self):
        """–ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        import random
        random_part = random.randint(1000, 9999)
        return f"ORD-{timestamp}-{random_part}"


class PromoCodeHandler:
    """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤"""
    
    def __init__(self, sheets_service):
        self.sheets = sheets_service
        self.promo_manager = PromoCodeManager()
    
    def apply_promo_to_order(self, promo_code, order_total, promo_codes_list):
        """
        –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        
        Returns:
            {
                'success': bool,
                'new_total': float,
                'discount': float,
                'message': str
            }
        """
        
        is_valid, discount_percent, error = self.promo_manager.validate_promo_code(
            promo_code,
            promo_codes_list
        )
        
        if not is_valid:
            return {
                'success': False,
                'message': error or '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π'
            }
        
        from config import apply_promo_discount
        new_total, discount = apply_promo_discount(order_total, discount_percent)
        
        return {
            'success': True,
            'new_total': new_total,
            'discount': discount,
            'discount_percent': discount_percent,
            'message': f"–ó–Ω–∏–∂–∫–∞ {discount_percent}% –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞: –µ–∫–æ–Ω–æ–º—ñ—è {discount} –≥—Ä–Ω"
        }
    
    def create_promo_for_partner(self, partner_id, discount_percent, usage_limit=None, expiry_days=30):
        """
        –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        
        Returns:
            dict –∑ –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        """
        
        code = self.promo_manager.generate_promo_code()
        
        from datetime import timedelta
        expiry_date = (datetime.now() + timedelta(days=expiry_days)).strftime('%Y-%m-%d')
        
        promo_data = {
            'code': code,
            'partner_id': partner_id,
            'discount_percent': discount_percent,
            'usage_limit': usage_limit or 0,  # 0 = –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
            'usage_count': 0,
            'expiry_date': expiry_date,
            'status': 'active',
            'created_at': datetime.now().isoformat()
        }
        
        logger.info(f"Promo code created: {code} for partner {partner_id}")
        
        return promo_data


class OrderAnalytics:
    """–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    
    @staticmethod
    def get_order_completion_rate(orders_list):
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î % –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
        
        Returns:
            float - –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 100
        """
        
        if not orders_list:
            return 0.0
        
        completed = len([o for o in orders_list if o.get('status') == 'completed'])
        return round((completed / len(orders_list)) * 100, 1)
    
    @staticmethod
    def get_average_order_value(orders_list):
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å–µ—Ä–µ–¥–Ω—é –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        
        Returns:
            float - —Å–µ—Ä–µ–¥–Ω—è —Å—É–º–∞
        """
        
        if not orders_list:
            return 0.0
        
        total = sum(float(o.get('final_amount', 0)) for o in orders_list)
        return round(total / len(orders_list), 2)
    
    @staticmethod
    def get_refund_rate(orders_list):
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î % –ø–æ–≤–µ—Ä–Ω–µ–Ω—å –∫–æ—à—Ç—ñ–≤
        
        Returns:
            float - –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ 0 –¥–æ 100
        """
        
        if not orders_list:
            return 0.0
        
        refunded = len([o for o in orders_list if o.get('refund_status') == 'refunded'])
        return round((refunded / len(orders_list)) * 100, 1)