import os
import logging
from flask import Flask, request, jsonify
from werkzeug.exceptions import BadRequest
import json
from datetime import datetime
import time

# –Ü–º–ø–æ—Ä—Ç–∏ –¥–ª—è –±–æ—Ç–∞
from utils.telegram_api import send_message as tg_send_message, send_photo, edit_message  # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç
from database.db_manager import init_db, create_user, get_user
from handlers.message_processor import process_text_message
from utils.google_sheets import init_sheets, add_user_data, get_menu_from_sheets
from config import BOT_TOKEN, GEMINI_API_KEY, SPREADSHEET_ID
from utils.gemini_api import get_gemini_recommendation

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
menu_cache = {}
sheets_client = None

def initialize_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –±–æ—Ç–∞"""
    global menu_cache, sheets_client
    
    logger.info("üöÄ FerrikFootBot starting initialization...")
    
    try:
        # 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        init_db()
        logger.info("‚úÖ Database initialized")
        
        # 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
        sheets_client = init_sheets()
        logger.info("‚úÖ Google Sheets connected")
        
        # 3. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
        menu_cache = get_menu_from_sheets()
        logger.info(f"‚úÖ Menu cached: {len(menu_cache)} items")
        
        # 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        create_dashboard_structure()
        logger.info("‚úÖ Dashboard structure created")
        
        logger.info("üéâ FerrikFootBot initialization completed!")
        
    except Exception as e:
        logger.error(f"‚ùå Initialization failed: {e}")
        raise

def create_dashboard_structure():
    """–°—Ç–≤–æ—Ä—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        if sheets_client:
            # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–æ—Ä–∫—à—ñ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
            try:
                stats_sheet = sheets_client.worksheet("Statistics")
            except:
                try:
                    stats_sheet = sheets_client.add_worksheet("Statistics", 1000, 10)
                    # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    stats_sheet.append_row([
                        "Date", "User ID", "Username", "Action", 
                        "Order Details", "Total Amount", "Status"
                    ])
                except Exception as e:
                    logger.error(f"Error creating Statistics worksheet: {e}")
    except Exception as e:
        logger.error(f"Error creating dashboard: {e}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
initialize_bot()

@app.route('/', methods=['GET'])
def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–∞—Å–∏–ø–∞–Ω–Ω—é"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "FerrikFootBot"
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Telegram"""
    try:
        data = request.get_json()
        
        if not data:
            raise BadRequest("No JSON data received")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if "message" in data:
            process_message(data["message"])
        elif "callback_query" in data:
            process_callback_query(data["callback_query"])
            
        return jsonify({"status": "ok"})
        
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def process_message(message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]
        username = message["from"].get("first_name", "User")
        text = message.get("text", "")
        
        logger.info(f"Processing message from {username} ({user_id}): {text}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        user = get_user(user_id)
        if not user:
            create_user(user_id, username)
            logger.info(f"Created new user: {user_id}")
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ Google Sheets
            try:
                add_user_data(user_id, username, "New user registered")
            except Exception as e:
                logger.error(f"Error adding user data: {e}")
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
        if text == "/start":
            greeting_text = f"""
üçî –í—ñ—Ç–∞—î–º–æ –≤ FerrikFoot! 

–ü—Ä–∏–≤—ñ—Ç, {username}! üëã

–Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–º–∞—á–Ω–æ—ó —ó–∂—ñ. 
–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?
"""
            
            keyboard = {
                "keyboard": [
                    [{"text": "üçî –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É"}],
                    [{"text": "üìã –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"}, {"text": "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"}],
                    [{"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"}, {"text": "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"}]
                ],
                "resize_keyboard": True,
                "one_time_keyboard": False
            }
            
            tg_send_message(chat_id, greeting_text, keyboard=keyboard)
            return
        
        # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if text == "üçî –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É":
            show_menu(chat_id)
        elif text == "üìã –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
            show_orders(chat_id)
        elif text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
            show_info(chat_id)
        elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏":
            show_contacts(chat_id)
        elif text == "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
            show_recommendations(chat_id)
        else:
            # –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–µ–∑ AI
            try:
                prompt = f"""
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤: "{text}"
–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: {json.dumps(menu_cache, ensure_ascii=False)}
–î–∞–π –∫–æ—Ä–∏—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
"""
                # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ prompt
                response_text = get_gemini_recommendation(prompt)
                tg_send_message(chat_id, response_text)
            except Exception as e:
                logger.error(f"AI processing error: {e}")
                tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
        
    except Exception as e:
        logger.error(f"Error in process_message for chat_id {chat_id}: {e}")
        try:
            tg_send_message(chat_id, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        except:
            logger.error("Failed to send error message to user")

def show_menu(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    if not menu_cache:
        tg_send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
        return
    
    menu_text = "üçΩÔ∏è **–ù–∞—à–µ –º–µ–Ω—é:**\n\n"
    for item_id, item in menu_cache.items():
        if item.get('active', True):
            menu_text += f"üçï **{item['name']}**\n"
            menu_text += f"üí∞ –¶—ñ–Ω–∞: {item['price']} –≥—Ä–Ω\n"
            if item.get('description'):
                menu_text += f"üìù {item['description']}\n"
            menu_text += "\n"
    
    tg_send_message(chat_id, menu_text)

def show_orders(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    tg_send_message(chat_id, "üìã –í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n–ü–æ–∫–∏ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.")

def show_info(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"""
    info_text = """
‚ÑπÔ∏è **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ FerrikFoot**

üïí **–ß–∞—Å —Ä–æ–±–æ—Ç–∏:**
–ü–Ω-–ù–¥: 10:00 - 22:00

üöö **–î–æ—Å—Ç–∞–≤–∫–∞:**
–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 300 –≥—Ä–Ω
–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏: 30-45 —Ö–≤

üí≥ **–û–ø–ª–∞—Ç–∞:**
‚Ä¢ –ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ
‚Ä¢ –ö–∞—Ä—Ç–∫–æ—é –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ
‚Ä¢ –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞

üéØ **–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:**
‚Ä¢ –°–≤—ñ–∂—ñ –ø—Ä–æ–¥—É–∫—Ç–∏
‚Ä¢ –®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ñ —Ü—ñ–Ω–∏
‚Ä¢ –Ø–∫—ñ—Å–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
"""
    tg_send_message(chat_id, info_text)

def show_contacts(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏"""
    contacts_text = """
üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è**

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380XX XXX XX XX
üìß Email: info@ferrikfoot.com
üåê –°–∞–π—Ç: www.ferrikfoot.com

üìç **–ê–¥—Ä–µ—Å–∞:**
–º. –ö–∏—ó–≤, –≤—É–ª. –ü—Ä–∏–∫–ª–∞–¥–Ω–∞, 1

üïí **–ß–∞—Å —Ä–æ–±–æ—Ç–∏:**
–©–æ–¥–Ω—è –∑ 10:00 –¥–æ 22:00

üì± **–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ:**
Instagram: @ferrikfoot
Facebook: FerrikFoot
"""
    tg_send_message(chat_id, contacts_text)

def show_recommendations(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    if not menu_cache:
        tg_send_message(chat_id, "‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
        return
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º—Ç –¥–ª—è AI
        menu_items = []
        for item in menu_cache.values():
            if item.get('active', True):
                menu_items.append(f"{item['name']} - {item['price']} –≥—Ä–Ω")
        
        prompt = f"""
–ó –Ω–∞—à–æ–≥–æ –º–µ–Ω—é: {', '.join(menu_items)}
–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 2-3 –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ —Å—Ç—Ä–∞–≤–∏ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. 
–í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–ª–∏–≤–æ.
"""
        
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ prompt
        recommendation = get_gemini_recommendation(prompt)
        tg_send_message(chat_id, f"üéØ **–ù–∞—à—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**\n\n{recommendation}")
        
    except Exception as e:
        logger.error(f"Error getting recommendations: {e}")
        tg_send_message(chat_id, "üçï –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –Ω–∞—à—É —Ñ—ñ—Ä–º–æ–≤—É –ø—ñ—Ü—É!")

def process_callback_query(callback_query):
    """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    try:
        chat_id = callback_query["message"]["chat"]["id"]
        data = callback_query["data"]
        
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ inline –∫–Ω–æ–ø–æ–∫
        tg_send_message(chat_id, f"–û–±—Ä–∞–Ω–æ: {data}")
        
    except Exception as e:
        logger.error(f"Error processing callback query: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É
@app.route('/keep-alive', methods=['GET'])
def keep_alive():
    """Endpoint –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É"""
    return jsonify({
        "status": "alive",
        "timestamp": datetime.now().isoformat(),
        "uptime": "service is running"
    })

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))