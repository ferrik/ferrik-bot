"""
üèÜ Gamification - –ë–µ–π–¥–∂—ñ, —Ä—ñ–≤–Ω—ñ, –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
"""
from datetime import datetime, timedelta
from typing import Dict, List

EMOJI = {
    'seedling': 'üå±',
    'fork': 'üç¥',
    'chef': 'üë®‚Äçüç≥',
    'star': '‚≠ê',
    'crown': 'üëë',
    'fire': 'üî•',
    'trophy': 'üèÜ',
    'medal': 'ü•á',
    'gift': 'üéÅ',
    'rocket': 'üöÄ'
}

class GamificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å —Ç–∞ –±–µ–π–¥–∂—ñ–≤"""
    
    LEVELS = [
        {'name': '–ù–æ–≤–∞—á–æ–∫', 'emoji': EMOJI['seedling'], 'orders': 0},
        {'name': '–õ—é–±–∏—Ç–µ–ª—å', 'emoji': EMOJI['fork'], 'orders': 3},
        {'name': '–ì—É—Ä–º–∞–Ω', 'emoji': EMOJI['chef'], 'orders': 7},
        {'name': '–ú–∞–π—Å—Ç–µ—Ä', 'emoji': EMOJI['star'], 'orders': 15},
        {'name': '–õ–µ–≥–µ–Ω–¥–∞', 'emoji': EMOJI['crown'], 'orders': 30},
    ]
    
    BADGES = {
        'first_order': {
            'name': '–ü–µ—Ä—à—ñ –∫—Ä–æ–∫–∏',
            'emoji': 'üéØ',
            'description': '–ü–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
            'condition': lambda stats: stats['total_orders'] >= 1
        },
        'early_bird': {
            'name': '–†–∞–Ω–Ω—è –ø—Ç–∞—à–∫–∞',
            'emoji': 'üåÖ',
            'description': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ 9 —Ä–∞–Ω–∫—É',
            'condition': lambda stats: stats['early_orders'] >= 1
        },
        'night_owl': {
            'name': '–ù—ñ—á–Ω–∏–π —Ñ—ñ–ª—ñ–Ω',
            'emoji': 'ü¶â',
            'description': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è 22:00',
            'condition': lambda stats: stats['late_orders'] >= 1
        },
        'pizza_lover': {
            'name': '–õ—é–±–∏—Ç–µ–ª—å –ø—ñ—Ü–∏',
            'emoji': 'üçï',
            'description': '10 –ø—ñ—Ü –∑–∞–º–æ–≤–ª–µ–Ω–æ',
            'condition': lambda stats: stats.get('pizza_count', 0) >= 10
        },
        'big_spender': {
            'name': '–í–µ–ª–∏–∫–∏–π —Å–ø–æ–∂–∏–≤–∞—á',
            'emoji': 'üíé',
            'description': '–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å >5000 –≥—Ä–Ω',
            'condition': lambda stats: stats['total_spent'] >= 5000
        },
        'loyal': {
            'name': '–í—ñ—Ä–Ω–∏–π –¥—Ä—É–≥',
            'emoji': '‚ù§Ô∏è',
            'description': '30 –∑–∞–º–æ–≤–ª–µ–Ω—å',
            'condition': lambda stats: stats['total_orders'] >= 30
        },
        'speed_demon': {
            'name': '–®–≤–∏–¥–∫—ñ—Å–Ω–∏–π',
            'emoji': '‚ö°',
            'description': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ <2 —Ö–≤–∏–ª–∏–Ω–∏',
            'condition': lambda stats: stats.get('fast_orders', 0) >= 5
        },
        'variety_seeker': {
            'name': '–®—É–∫–∞—á —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ',
            'emoji': 'üåà',
            'description': '–ó–∞–º–æ–≤–ª–µ–Ω–æ >20 —Ä—ñ–∑–Ω–∏—Ö —Å—Ç—Ä–∞–≤',
            'condition': lambda stats: stats.get('unique_items', 0) >= 20
        }
    }
    
    def __init__(self, db):
        self.db = db
    
    def get_user_level(self, user_id: int) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        orders = self.db.get_user_orders(user_id)
        order_count = len(orders)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
        current_level = self.LEVELS[0]
        for level in self.LEVELS:
            if order_count >= level['orders']:
                current_level = level
            else:
                break
        
        # –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
        current_idx = self.LEVELS.index(current_level)
        next_level = None
        if current_idx < len(self.LEVELS) - 1:
            next_level = self.LEVELS[current_idx + 1]
        
        return {
            'level': current_level['name'],
            'emoji': current_level['emoji'],
            'orders': order_count,
            'next_level': next_level['name'] if next_level else None,
            'orders_to_next': next_level['orders'] - order_count if next_level else 0
        }
    
    def get_user_stats(self, user_id: int) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        orders = self.db.get_user_orders(user_id)
        
        stats = {
            'total_orders': len(orders),
            'total_spent': sum(o.get('total_amount', 0) for o in orders),
            'early_orders': 0,
            'late_orders': 0,
            'pizza_count': 0,
            'unique_items': set(),
            'fast_orders': 0
        }
        
        for order in orders:
            # –ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            timestamp = order.get('created_at')
            if timestamp:
                if isinstance(timestamp, str):
                    timestamp = datetime.fromisoformat(timestamp)
                hour = timestamp.hour
                
                if hour < 9:
                    stats['early_orders'] += 1
                if hour >= 22:
                    stats['late_orders'] += 1
            
            # –ü—ñ—Ü–∏
            items = order.get('items_json', [])
            if isinstance(items, str):
                import json
                items = json.loads(items)
            
            for item in items:
                name = item.get('name', '').lower()
                if '–ø—ñ—Ü–∞' in name:
                    stats['pizza_count'] += 1
                
                stats['unique_items'].add(item.get('item_id'))
        
        stats['unique_items'] = len(stats['unique_items'])
        
        return stats
    
    def get_earned_badges(self, user_id: int) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω—ñ –±–µ–π–¥–∂—ñ"""
        stats = self.get_user_stats(user_id)
        
        earned = []
        for badge_id, badge in self.BADGES.items():
            if badge['condition'](stats):
                earned.append({
                    'id': badge_id,
                    'name': badge['name'],
                    'emoji': badge['emoji'],
                    'description': badge['description']
                })
        
        return earned
    
    def get_available_badges(self, user_id: int) -> List[Dict]:
        """–î–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–µ–π–¥–∂—ñ"""
        stats = self.get_user_stats(user_id)
        
        available = []
        for badge_id, badge in self.BADGES.items():
            if not badge['condition'](stats):
                available.append({
                    'id': badge_id,
                    'name': badge['name'],
                    'emoji': badge['emoji'],
                    'description': badge['description']
                })
        
        return available
    
    def check_new_achievements(self, user_id: int, prev_stats: Dict) -> List[Dict]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
        new_achievements = []
        
        current_stats = self.get_user_stats(user_id)
        
        for badge_id, badge in self.BADGES.items():
            was_earned = badge['condition'](prev_stats)
            is_earned = badge['condition'](current_stats)
            
            if not was_earned and is_earned:
                new_achievements.append({
                    'id': badge_id,
                    'name': badge['name'],
                    'emoji': badge['emoji'],
                    'description': badge['description']
                })
        
        return new_achievements
    
    def get_profile_summary(self, user_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        level = self.get_user_level(user_id)
        stats = self.get_user_stats(user_id)
        badges = self.get_earned_badges(user_id)
        
        text = f"""
{level['emoji']} <b>–†—ñ–≤–µ–Ω—å: {level['level']}</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω—å: {stats['total_orders']}
‚Ä¢ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {stats['total_spent']:.0f} –≥—Ä–Ω
‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—Ç—Ä–∞–≤: {stats['unique_items']}

üèÜ <b>–ë–µ–π–¥–∂—ñ ({len(badges)}):</b>
"""
        
        for badge in badges:
            text += f"{badge['emoji']} {badge['name']}\n"
        
        if level['next_level']:
            text += f"\nüéØ –î–æ —Ä—ñ–≤–Ω—è <b>{level['next_level']}</b>: "
            text += f"—â–µ {level['orders_to_next']} –∑–∞–º–æ–≤–ª–µ–Ω—å"
        
        return text
    
    def get_daily_challenge(self) -> Dict:
        """–©–æ–¥–µ–Ω–Ω–∏–π —á–µ–ª–µ–Ω–¥–∂"""
        challenges = [
            {
                'title': '–°–ø—Ä–æ–±—É–π —â–æ—Å—å –Ω–æ–≤–µ',
                'description': '–ó–∞–º–æ–≤ —Å—Ç—Ä–∞–≤—É, —è–∫—É —â–µ –Ω–µ –ø—Ä–æ–±—É–≤–∞–≤',
                'reward': '10% –∑–Ω–∏–∂–∫–∞',
                'emoji': 'üåü'
            },
            {
                'title': '–ö–æ–º–±–æ –º–∞–π—Å—Ç–µ—Ä',
                'description': '–ó–∞–º–æ–≤ 3 —Ä—ñ–∑–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –∑–∞ —Ä–∞–∑',
                'reward': '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–µ—Å–µ—Ä—Ç',
                'emoji': 'üéÅ'
            },
            {
                'title': '–†–∞–Ω–Ω—è –ø—Ç–∞—à–∫–∞',
                'description': '–ó–∞–º–æ–≤ —Å–Ω—ñ–¥–∞–Ω–æ–∫ –¥–æ 10:00',
                'reward': '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –∫–∞–≤–∞',
                'emoji': '‚òï'
            },
            {
                'title': '–ü–æ–¥—ñ–ª–∏—Å—å –∑ –¥—Ä—É–≥–æ–º',
                'description': '–ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∞ –≤ Ferrik',
                'reward': '50 –≥—Ä–Ω –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫',
                'emoji': 'üë•'
            }
        ]
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ –¥–Ω—é —Ç–∏–∂–Ω—è
        day = datetime.now().weekday()
        return challenges[day % len(challenges)]
