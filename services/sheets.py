"""
üìä Google Sheets Service
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Google Sheets –¥–ª—è –º–µ–Ω—é —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
"""
import os
import json
import logging
from typing import List, Dict, Optional
from datetime import datetime

import gspread
from oauth2client.service_account import ServiceAccountCredentials

logger = logging.getLogger(__name__)

class SheetsService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets"""
    
    def __init__(self):
        self.client = None
        self.spreadsheet = None
        self._initialize_client()
    
    def _initialize_client(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets –∫–ª—ñ—î–Ω—Ç–∞"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ credentials –∑ environment
            creds_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
            sheets_id = os.getenv('GOOGLE_SHEETS_ID')
            
            if not creds_json or not sheets_id:
                logger.warning("‚ö†Ô∏è Google Sheets credentials not configured")
                return
            
            # –ü–∞—Ä—Å–∏–º–æ JSON credentials
            if isinstance(creds_json, str):
                creds_dict = json.loads(creds_json)
            else:
                creds_dict = creds_json
            
            # Scope –¥–ª—è –¥–æ—Å—Ç—É–ø—É
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ credentials
            credentials = ServiceAccountCredentials.from_json_keyfile_dict(
                creds_dict, 
                scope
            )
            
            # –ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ—Å—å
            self.client = gspread.authorize(credentials)
            
            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            self.spreadsheet = self.client.open_by_key(sheets_id)
            
            logger.info("‚úÖ Google Sheets connected successfully")
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Invalid JSON in GOOGLE_CREDENTIALS_JSON: {e}")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Google Sheets: {e}")
    
    def get_menu_items(self) -> List[Dict]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω—é –∑ Google Sheets
        
        –û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ "–ú–µ–Ω—é":
        ID | –ö–∞—Ç–µ–≥–æ—Ä—ñ—è | –°—Ç—Ä–∞–≤–∏ | –û–ø–∏—Å | –¶—ñ–Ω–∞ | –†–µ—Å—Ç–æ—Ä–∞–Ω | –ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ | –§–æ—Ç–æ URL | –ê–∫—Ç–∏–≤–Ω–∏–π
        """
        try:
            if not self.spreadsheet:
                logger.warning("‚ö†Ô∏è Google Sheets not initialized, returning empty menu")
                return self._get_demo_menu()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ª–∏—Å—Ç "–ú–µ–Ω—é"
            worksheet = self.spreadsheet.worksheet('–ú–µ–Ω—é')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
            data = worksheet.get_all_records()
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–æ–≤–∞—Ä–∏
            active_items = [
                item for item in data 
                if item.get('–ê–∫—Ç–∏–≤–Ω–∏–π', '').lower() in ['yes', '—Ç–∞–∫', 'true', '1', '–∞–∫—Ç–∏–≤–Ω–∏–π']
            ]
            
            logger.info(f"üìã Loaded {len(active_items)} menu items from Google Sheets")
            return active_items
            
        except gspread.exceptions.WorksheetNotFound:
            logger.error("‚ùå Worksheet '–ú–µ–Ω—é' not found")
            return self._get_demo_menu()
        except Exception as e:
            logger.error(f"‚ùå Error loading menu: {e}")
            return self._get_demo_menu()
    
    def add_order(self, order_data: Dict) -> bool:
        """
        –î–æ–¥–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Google Sheets
        
        –û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç 
