"""
Hubsy Bot - Telegram Bot –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ
Version: 3.2.0 - Enhanced UX with vivid messages
"""

import os
import sys
import logging
import uuid
import random
import json
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from collections import defaultdict
from threading import RLock
from datetime import datetime

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)
logger.info("üöÄ Starting Hubsy Bot v3.2.0 with Enhanced UX...")

# =============================================================================
# –Ü–ú–ü–û–†–¢–ò
# =============================================================================

PERSONALIZATION_ENABLED = False
AI_ENABLED = False

try:
    import bot_config as config
    from services import telegram as tg_service
    from services import sheets as sheets_service
    from services import database as db_service
    logger.info("‚úÖ Core services imported")
except Exception as e:
    logger.critical(f"‚ùå Critical import failed: {e}")
    sys.exit(1)

try:
    from services import gemini as ai_service
    AI_ENABLED = True
    logger.info("‚úÖ AI Service enabled")
except Exception as ae:
    AI_ENABLED = False
    logger.warning(f"‚ö†Ô∏è  AI Service disabled: {ae}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
try:
    db_service.init_database()
    ok, info = db_service.test_connection()
    if ok:
        logger.info(f"‚úÖ Database OK: {info}")
    else:
        logger.error(f"‚ùå Database FAILED: {info}")
except Exception as e:
    logger.error(f"DB check error: {e}")

app = Flask(__name__)

# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü
# =============================================================================

user_states = {}
user_state_data = {}
user_states_lock = RLock()

user_carts = defaultdict(dict)
user_carts_lock = RLock()

menu_cache = []
menu_cache_lock = RLock()

user_navigation = defaultdict(list)
nav_lock = RLock()

MAX_CART_ITEMS = 50
MAX_ITEM_QUANTITY = 99

class State:
    MAIN_MENU = "main_menu"
    BROWSING_CATEGORIES = "browsing_categories"
    VIEWING_CATEGORY = "viewing_category"
    VIEWING_ITEM = "viewing_item"
    IN_CART = "in_cart"
    SEARCHING = "searching"
    CHECKOUT_PHONE = "checkout_phone"
    CHECKOUT_ADDRESS = "checkout_address"
    CHECKOUT_CONFIRM = "checkout_confirm"

# =============================================================================
# –†–ê–ù–î–û–ú–ù–Ü –§–†–ê–ó–ò
# =============================================================================

GREETINGS = [
    "üëã –ü—Ä–∏–≤—ñ—Ç! –ì–æ—Ç–æ–≤–∏–π —â–æ—Å—å —Å–º–∞—á–Ω–µ–Ω—å–∫–µ –∑–∞–º–æ–≤–∏—Ç–∏?",
    "üçΩÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–∞–¥!",
    "üòã –ì–æ–ª–æ–¥–Ω–∏–π? –ú–∏ —Ü–µ –∑–∞—Ñ—ñ–∫—Å—É—î–º–æ! üòÑ",
    "üéâ –í—ñ—Ç–∞—î–º–æ! –ß–∞—Å –ø–µ—Ä–µ–∫—É—Å–∏—Ç–∏!",
    "üë®‚Äçüç≥ –®–µ—Ñ —á–µ–∫–∞—î –Ω–∞ —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
]

MENU_STARTERS = [
    "üçΩÔ∏è –û—Å—å –Ω–∞—à—ñ –Ω–∞–π—Å–º–∞—á–Ω—ñ—à—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó!",
    "üë®‚Äçüç≥ –®–µ—Ñ —Ä–∞–¥–∏—Ç—å —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ üëá",
    "üåü –ù–∞—à–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–µ–∫–∞—î –Ω–∞ —Ç–µ–±–µ!",
    "üéØ –û–±–µ—Ä–∏, —â–æ —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è üòã",
]

CART_EMPTY = [
    "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è... üò¢",
    "–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ —á–µ–∫–∞—î –Ω–∞ –ø–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏!",
    "–ü–æ–∫–∏ —â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –¥–æ–¥–∞–≤. –î–∞–≤–∞–π —Ü–µ –≤–∏–ø—Ä–∞–≤–∏–º–æ! üõçÔ∏è",
]

SUCCESS_MESSAGES = [
    "‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! –ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! üëå",
    "üéâ –ß—É–¥–æ–≤–æ! –¶–µ –±—É–¥–µ —Å–º–∞—á–Ω–æ!",
    "üòã –í–∏–±—ñ—Ä –Ω–æ–º–µ—Ä –æ–¥–∏–Ω! –î–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!",
    "üëç –°—É–ø–µ—Ä! –©–µ —â–æ—Å—å?",
]

ERROR_MESSAGES = [
    "ü§î –ù–µ –∑–æ–≤—Å—ñ–º —Ä–æ–∑—É–º—ñ—é... –í–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é üëá",
    "üòï –¶–µ –º–µ–Ω—ñ –Ω–µ–≤—ñ–¥–æ–º–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",
    "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–æ—Å—å –∑ –∫–Ω–æ–ø–æ–∫!",
]

def random_greeting():
    return random.choice(GREETINGS)

def random_menu_starter():
    return random.choice(MENU_STARTERS)

def random_success():
    return random.choice(SUCCESS_MESSAGES)

def random_error():
    return random.choice(ERROR_MESSAGES)

logger.info("‚úÖ Global variables initialized")

# =============================================================================
# HELPER –§–£–ù–ö–¶–Ü–á
# =============================================================================

def get_menu():
    """–û—Ç—Ä–∏–º—É—î –º–µ–Ω—é –∑ –∫–µ—à—É"""
    global menu_cache
    with menu_cache_lock:
        if not menu_cache:
            logger.info("üìã Loading menu from Google Sheets...")
            try:
                menu_cache = sheets_service.get_menu_from_sheet()
                logger.info(f"‚úÖ Menu loaded: {len(menu_cache)} items")
            except Exception as e:
                logger.error(f"‚ùå Failed to load menu: {e}")
                return []
        return menu_cache

def get_categories():
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    menu = get_menu()
    categories = set()
    for item in menu:
        category = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ')
        if category:
            categories.add(category)
    return sorted(list(categories))

def get_items_by_category(category):
    """–û—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
    menu = get_menu()
    return [item for item in menu if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category]

def find_item_by_name(name):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞ –Ω–∞–∑–≤–æ—é"""
    menu = get_menu()
    for item in menu:
        if item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏') == name:
            return item
    return None

def safe_escape(text):
    """–ë–µ–∑–ø–µ—á–Ω–æ escape HTML"""
    import html
    if text is None:
        return ""
    return html.escape(str(text))

# =============================================================================
# FSM –§–£–ù–ö–¶–Ü–á
# =============================================================================

def set_state(chat_id, state, **data):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    with user_states_lock:
        user_states[chat_id] = state
        if data:
            if chat_id not in user_state_data:
                user_state_data[chat_id] = {}
            user_state_data[chat_id].update(data)
        logger.debug(f"State {chat_id}: {state}")

def get_state(chat_id):
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω"""
    return user_states.get(chat_id, State.MAIN_MENU)

def get_state_data(chat_id, key, default=None):
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É"""
    return user_state_data.get(chat_id, {}).get(key, default)

def clear_state(chat_id):
    """–û—á–∏—â—É—î —Å—Ç–∞–Ω"""
    with user_states_lock:
        user_states.pop(chat_id, None)
        user_state_data.pop(chat_id, None)

# =============================================================================
# –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø
# =============================================================================

def format_item(item):
    """–§–æ—Ä–º–∞—Ç—É—î —Ç–æ–≤–∞—Ä –∑ –∫—Ä–∞—Å–∏–≤–∏–º –¥–∏–∑–∞–π–Ω–æ–º"""
    name = safe_escape(item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏'))
    category = safe_escape(item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', ''))
    price = safe_escape(item.get('–¶—ñ–Ω–∞', '0'))
    description = safe_escape(item.get('–û–ø–∏—Å', ''))
    rating = item.get('–†–µ–π—Ç–∏–Ω–≥', '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê')
    delivery_time = item.get('–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)', '30-45')
    
    text = f"üçΩÔ∏è <b>{name}</b>\n{'‚îÄ'*30}\n\n"
    if description:
        text += f"üìù {description}\n\n"
    text += f"üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {category}\n"
    text += f"‚è±Ô∏è <b>–ß–∞—Å:</b> {delivery_time} —Ö–≤\n"
    text += f"üåü <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n\n"
    text += f"üí∞ <b>–¶—ñ–Ω–∞: {price} ‚Ç¥</b>"
    return text

def format_cart(chat_id):
    """–§–æ—Ä–º–∞—Ç—É—î –∫–æ—Ä–∑–∏–Ω—É"""
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    if not cart:
        return f"üõí <b>–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>\n\n{random.choice(CART_EMPTY)}\n\nüìã –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –º–µ–Ω—é!"
    
    text = "üõí <b>–í–ê–® –ö–û–®–ò–ö</b>\n" + "‚îÄ"*30 + "\n\n"
    total = 0.0
    
    for i, (item_name, qty) in enumerate(cart.items(), 1):
        item = find_item_by_name(item_name)
        if item:
            name = safe_escape(item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏'))
            try:
                price = float(str(item.get('–¶—ñ–Ω–∞', 0)).replace(',', '.'))
            except:
                price = 0.0
            item_total = price * qty
            total += item_total
            text += f"{i}Ô∏è‚É£ <b>{name}</b>\n   {price:.2f} ‚Ç¥ √ó {qty} = {item_total:.2f} ‚Ç¥\n\n"
    
    text += "‚îÄ"*30 + f"\nüí≥ <b>–í–°–¨–û–ì–û: {total:.2f} ‚Ç¥</b>"
    return text

# =============================================================================
# –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# =============================================================================

def kb_main():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    return {
        "keyboard": [
            [{"text": "üìã –ú–µ–Ω—é"}, {"text": "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"}],
            [{"text": "üõí –ö–æ—à–∏–∫"}, {"text": "üë§ –ü—Ä–æ—Ñ—ñ–ª—å"}],
            [{"text": "üîç –ü–æ—à—É–∫"}, {"text": "üÜò –î–æ–ø–æ–º–æ–≥–∞"}]
        ],
        "resize_keyboard": True
    }

def kb_categories():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    categories = get_categories()
    kb = {"inline_keyboard": []}
    for cat in categories:
        kb["inline_keyboard"].append([{"text": f"üçΩÔ∏è {cat}", "callback_data": f"cat:{cat}"}])
    kb["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back"}])
    return kb

def kb_item(item, cat, idx, total):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä—É"""
    name = item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '')
    kb = {"inline_keyboard": [[{"text": "‚ûï –î–æ–¥–∞—Ç–∏", "callback_data": f"add:{name}"}]]}
    
    if total > 1:
        nav = []
        if idx > 0:
            nav.append({"text": "‚¨ÖÔ∏è", "callback_data": f"item:{cat}:{idx-1}"})
        nav.append({"text": f"{idx+1}/{total}", "callback_data": "noop"})
        if idx < total - 1:
            nav.append({"text": "‚û°Ô∏è", "callback_data": f"item:{cat}:{idx+1}"})
        kb["inline_keyboard"].append(nav)
    
    photo_url = item.get('–§–æ—Ç–æ URL', '')
    if photo_url:
        kb["inline_keyboard"].append([{"text": "üì∏ –ü–æ–∫–∞–∑–∞—Ç–∏ —Ñ–æ—Ç–æ", "url": photo_url}])
    
    kb["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_cat"}])
    return kb

def kb_cart():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–æ—Ä–∑–∏–Ω–∏"""
    return {
        "keyboard": [
            [{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏"}],
            [{"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏"}, {"text": "üìã –ú–µ–Ω—é"}]
        ],
        "resize_keyboard": True
    }

# =============================================================================
# –í–Ü–î–ü–†–ê–í–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
# =============================================================================

def send_msg(chat_id, text, markup=None):
    """Wrapper –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""
    try:
        logger.info(f"üì§ Sending to {chat_id}: {text[:50]}...")
        result = tg_service.tg_send_message(chat_id, text, markup, "HTML")
        if result and result.get("ok"):
            logger.info(f"‚úÖ Message delivered to {chat_id}")
        else:
            logger.error(f"‚ùå Message failed to {chat_id}: {result}")
        return result
    except Exception as e:
        logger.error(f"‚ùå Send error to {chat_id}: {e}", exc_info=True)
        return None

# =============================================================================
# –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î
# =============================================================================

def handle_start(chat_id, first_name=None):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    try:
        clear_state(chat_id)
        set_state(chat_id, State.MAIN_MENU)
        
        text = (
            f"{random_greeting()}\n\n"
            "üçΩÔ∏è <i>–ó–∞–º–æ–≤–ª—è–π—Ç–µ —Å–º–∞—á–Ω—É —ó–∂—É –æ–Ω–ª–∞–π–Ω</i>\n"
            "üöÄ <i>–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 30-45 —Ö–≤</i>\n"
            "üí≥ <i>–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ</i>\n"
            "‚≠ê <i>–ì–∞—Ä—è—á—ñ —ñ —Å–≤—ñ–∂—ñ —Å—Ç—Ä–∞–≤–∏</i>\n\n"
            f"{'‚îÄ'*30}\n"
            "<b>–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?</b>"
        )
        
        send_msg(chat_id, text, kb_main())
    except Exception as e:
        logger.error(f"Error in handle_start: {e}", exc_info=True)

def handle_menu(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        set_state(chat_id, State.BROWSING_CATEGORIES)
        categories = get_categories()
        
        if not categories:
            send_msg(chat_id, "‚ùå –ú–µ–Ω—é –ø–æ—Ä–æ–∂–Ω—î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", kb_main())
            return
        
        text = (
            "üìã <b>–ù–ê–®–ï –ú–ï–ù–Æ</b>\n"
            f"{'‚îÄ'*30}\n\n"
            f"{random_menu_starter()}\n\n"
            f"‚ú® <i>–î–æ—Å—Ç—É–ø–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π</i>\n\n"
            "<b>–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–∫–∞–≤—É –¥–ª—è –≤–∞—Å:</b>"
        )
        
        send_msg(chat_id, text, kb_categories())
    except Exception as e:
        logger.error(f"Error in handle_menu: {e}", exc_info=True)

def show_item(chat_id, category, index):
    """–ü–æ–∫–∞–∑—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–≤–∞—Ä"""
    try:
        items = get_items_by_category(category)
        
        if not items or index < 0 or index >= len(items):
            send_msg(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", kb_main())
            return
        
        set_state(chat_id, State.VIEWING_ITEM, category=category, index=index)
        
        item = items[index]
        text = format_item(item)
        photo = item.get('–§–æ—Ç–æ URL', '')
        kb = kb_item(item, category, index, len(items))
        
        if photo and photo.startswith('http'):
            try:
                tg_service.tg_send_photo(chat_id, photo, caption=text, reply_markup=kb)
            except Exception as photo_err:
                logger.error(f"Photo send failed: {photo_err}")
                send_msg(chat_id, text, kb)
        else:
            send_msg(chat_id, text, kb)
    except Exception as e:
        logger.error(f"Error in show_item: {e}", exc_info=True)

def add_to_cart(chat_id, item_name):
    """–î–æ–¥–∞—î —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        item = find_item_by_name(item_name)
        
        if not item:
            send_msg(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        with user_carts_lock:
            cart = user_carts[chat_id]
            
            if len(cart) >= MAX_CART_ITEMS:
                send_msg(chat_id, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_CART_ITEMS} —Ä—ñ–∑–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤")
                return
            
            current = cart.get(item_name, 0)
            if current >= MAX_ITEM_QUANTITY:
                send_msg(chat_id, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_ITEM_QUANTITY} —à—Ç")
                return
            
            cart[item_name] = current + 1
        
        name = safe_escape(item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏'))
        price = safe_escape(item.get('–¶—ñ–Ω–∞', '0'))
        qty = cart[item_name]
        
        text = (
            f"{random_success()}\n\n"
            f"üçΩÔ∏è <b>{name}</b>\n"
            f"üí∞ {price} ‚Ç¥\n"
            f"üì¶ –í –∫–æ—à–∏–∫—É: <b>{qty}</b> —à—Ç\n\n"
            f"{'‚îÄ'*30}\n"
            "–©–æ –¥–∞–ª—ñ?"
        )
        
        kb = {
            "inline_keyboard": [
                [
                    {"text": "üõí –î–æ –∫–æ—à–∏–∫–∞", "callback_data": "cart"},
                    {"text": "üìã –©–µ —â–æ—Å—å", "callback_data": "menu"}
                ]
            ]
        }
        
        send_msg(chat_id, text, kb)
    except Exception as e:
        logger.error(f"Error in add_to_cart: {e}", exc_info=True)

def handle_cart(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        set_state(chat_id, State.IN_CART)
        text = format_cart(chat_id)
        
        with user_carts_lock:
            has_items = len(user_carts.get(chat_id, {})) > 0
        
        kb = kb_cart() if has_items else kb_main()
        send_msg(chat_id, text, kb)
    except Exception as e:
        logger.error(f"Error in handle_cart: {e}", exc_info=True)

def handle_profile(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"""
    try:
        text = (
            "üë§ <b>–í–ê–® –ü–†–û–§–Ü–õ–¨</b>\n"
            f"{'‚îÄ'*30}\n\n"
            "üõçÔ∏è <b>–ó–∞–º–æ–≤–ª–µ–Ω—å:</b> 0\n"
            "üí∏ <b>–ë–æ–Ω—É—Å—ñ–≤:</b> 0 ‚Ç¥\n"
            "üåü <b>–°—Ç–∞—Ç—É—Å:</b> –ù–æ–≤–∞—á–æ–∫\n"
            "üéÅ <b>–ó–Ω–∏–∂–∫–∞:</b> 0%\n\n"
            "<i>–ó—Ä–æ–±—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –π –æ—Ç—Ä–∏–º–∞–π—Ç–µ –±–æ–Ω—É—Å–∏!</i>"
        )
        send_msg(chat_id, text, kb_main())
    except Exception as e:
        logger.error(f"Error in handle_profile: {e}", exc_info=True)

def handle_recommendations(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    try:
        text = (
            "‚≠ê <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á</b>\n"
            f"{'‚îÄ'*30}\n\n"
            "üë®‚Äçüç≥ <i>–¶—å–æ–≥–æ –¥–Ω—è:</i>\n\n"
            "1Ô∏è‚É£ –ß–æ—Ä–Ω–∏–π –±—É—Ä–≥–µ—Ä - 149‚Ç¥\n"
            "   <i>–ë–µ—Å—Ç—Å–µ–ª–µ—Ä! üî•</i>\n\n"
            "2Ô∏è‚É£ –õ–∞—Ç—Ç–µ - 89‚Ç¥\n"
            "   <i>–Ü–¥–µ–∞–ª—å–Ω–æ –¥–æ –±—É—Ä–≥–µ—Ä–∞ ‚òï</i>\n\n"
            "üí° –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –º–µ–Ω—é —â–æ–± –∑–∞–º–æ–≤–∏—Ç–∏!"
        )
        send_msg(chat_id, text, kb_main())
    except Exception as e:
        logger.error(f"Error in handle_recommendations: {e}", exc_info=True)

def handle_help(chat_id):
    """–î–æ–ø–æ–º–æ–≥–∞"""
    try:
        text = (
            "üÜò <b>–î–û–ü–û–ú–û–ì–ê</b>\n"
            f"{'‚îÄ'*30}\n\n"
            "<b>–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:</b>\n"
            "1Ô∏è‚É£ üìã –ú–µ–Ω—é ‚Äî –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é\n"
            "2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É\n"
            "3Ô∏è‚É£ ‚ûï –î–æ–¥–∞–π—Ç–µ –≤ –∫–æ—à–∏–∫\n"
            "4Ô∏è‚É£ üõí –ö–æ—à–∏–∫ ‚Äî –æ—Ñ–æ—Ä–º—ñ—Ç—å\n\n"
            "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏:</b>\n"
            "‚òéÔ∏è +38 (99) 123-45-67\n"
            "üìß support@hubsy.ua\n\n"
            "ü§î –ü–∏—Ç–∞–Ω–Ω—è? –ü–∏—à—ñ—Ç—å!"
        )
        send_msg(chat_id, text, kb_main())
    except Exception as e:
        logger.error(f"Error in handle_help: {e}", exc_info=True)

def handle_search(chat_id):
    """–ü–æ—à—É–∫"""
    try:
        if not AI_ENABLED:
            send_msg(chat_id, "üîç –ü–æ—à—É–∫ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π", kb_main())
            return
        
        set_state(chat_id, State.SEARCHING)
        text = (
            "üîç <b>–ü–û–®–£–ö</b>\n"
            f"{'‚îÄ'*30}\n\n"
            "–ù–∞–ø–∏—à—ñ—Ç—å —â–æ —à—É–∫–∞—î—Ç–µ:\n\n"
            "üí° –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "‚Ä¢ —â–æ—Å—å –≥–æ—Å—Ç—Ä–µ üå∂Ô∏è\n"
            "‚Ä¢ –≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–µ ü•ó\n"
            "‚Ä¢ –¥–µ—Å–µ—Ä—Ç üç∞"
        )
        kb = {"keyboard": [[{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]], "resize_keyboard": True}
        send_msg(chat_id, text, kb)
    except Exception as e:
        logger.error(f"Error in handle_search: {e}", exc_info=True)

def start_checkout(chat_id):
    """–ü–æ—á–∞—Ç–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"""
    try:
        with user_carts_lock:
            cart = user_carts.get(chat_id, {})
        
        if not cart:
            send_msg(chat_id, "‚ùå –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üò¢", kb_main())
            return
        
        set_state(chat_id, State.CHECKOUT_PHONE)
        
        text = (
            "üìû <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø</b>\n"
            f"{'‚îÄ'*30}\n\n"
            "–ö—Ä–æ–∫ 1Ô∏è‚É£/3Ô∏è‚É£\n\n"
            "üì± –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
        )
        
        kb = {
            "keyboard": [
                [{"text": "üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", "request_contact": True}],
                [{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": True
        }
        
        send_msg(chat_id, text, kb)
    except Exception as e:
        logger.error(f"Error in start_checkout: {e}", exc_info=True)

def handle_phone(chat_id, phone):
    """–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ"""
    try:
        set_state(chat_id, State.CHECKOUT_ADDRESS, phone=phone)
        
        text = (
            f"‚úÖ –ù–æ–º–µ—Ä: <code>{phone}</code>\n\n"
            "–ö—Ä–æ–∫ 2Ô∏è‚É£/3Ô∏è‚É£\n\n"
            "üìç <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
            "<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 5</i>"
        )
        
        kb = {"keyboard": [[{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]], "resize_keyboard": True}
        send_msg(chat_id, text, kb)
    except Exception as e:
        logger.error(f"Error in handle_phone: {e}", exc_info=True)

def handle_address(chat_id, address):
    """–ê–¥—Ä–µ—Å–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞"""
    try:
        if len(address) < 10:
            send_msg(chat_id, "‚ùå –ê–¥—Ä–µ—Å–∞ –∫–æ—Ä–æ—Ç–∫–∞\n\n–ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤")
            return
        
        set_state(chat_id, State.CHECKOUT_CONFIRM, address=address)
        
        phone = get_state_data(chat_id, 'phone', 'N/A')
        summary = format_cart(chat_id)
        
        text = (
            f"{summary}\n\n"
            f"{'‚îÄ'*30}\n\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>\n"
            f"üìç <b>–ê–¥—Ä–µ—Å–∞:</b> {safe_escape(address)}\n\n"
            "–ö—Ä–æ–∫ 3Ô∏è‚É£/3Ô∏è‚É£\n\n"
            "<b>–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å ‚úÖ</b>"
        )
        
        kb = {
            "keyboard": [
                [{"text": "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"}],
                [{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]
            ],
            "resize_keyboard": True
        }
        
        send_msg(chat_id, text, kb)
    except Exception as e:
        logger.error(f"Error in handle_address: {e}", exc_info=True)

def confirm_order(chat_id):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        with user_carts_lock:
            cart = user_carts.get(chat_id, {})
        
        if not cart:
            send_msg(chat_id, "‚ùå –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return
        
        phone = get_state_data(chat_id, 'phone', 'N/A')
        address = get_state_data(chat_id, 'address', 'N/A')
        
        total = 0.0
        items = []
        
        for name, qty in cart.items():
            item = find_item_by_name(name)
            if item:
                try:
                    price = float(str(item.get('–¶—ñ–Ω–∞', 0)).replace(',', '.'))
                    total += price * qty
                    items.append({"name": name, "quantity": qty, "price": price})
                except:
                    pass
        
        order_id = str(uuid.uuid4())[:8].upper()
        
        db_service.save_order(order_id, chat_id, None, items, f"{total:.2f}", phone, address, "")
        
        text = (
            "üéâ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–û!</b>\n\n"
            f"‚úÖ ID: <code>{order_id}</code>\n\n"
            f"üí≥ –î–æ –æ–ø–ª–∞—Ç–∏: {total:.2f} ‚Ç¥\n\n"
            "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 30-45 —Ö–≤\n"
            "üì± –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ—Ç—å—Å—è\n\n"
            "üôè –î—è–∫—É—î–º–æ! –ü—Ä–∏—î–º–Ω–æ–≥–æ –∞–ø–µ—Ç–∏—Ç—É! üòã"
        )
        
        with user_carts_lock:
            user_carts[chat_id] = {}
        
        clear_state(chat_id)
        send_msg(chat_id, text, kb_main())
        
        # Notify admin
        try:
            admin_id = int(os.getenv('ADMIN_TELEGRAM_ID', 0))
            if admin_id:
                admin_text = f"üÜï <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b>\n\nID: {order_id}\nüë§ User: {chat_id}\nüí∞ –°—É–º–∞: {total:.2f} ‚Ç¥\nüìû {phone}\nüìç {address}"
                send_msg(admin_id, admin_text)
        except:
            pass
            
    except Exception as e:
        logger.error(f"Error in confirm_order: {e}", exc_info=True)
        send_msg(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è")

# =============================================================================
# WEBHOOK
# =============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –¥–ª—è Telegram"""
    try:
        data = request.get_json()
        if not data:
            logger.warning("Empty webhook request")
            return jsonify({"ok": False})
        
        update_id = data.get('update_id', 'unknown')
        logger.info(f"üì• Webhook: {update_id}")
        
        if 'message' in data:
            msg = data['message']
            chat_id = msg['chat']['id']
            text = msg.get('text', '').strip()
            first_name = msg['chat'].get('first_name', 'User')
            
            logger.info(f"üì® Message from {chat_id} ({first_name}): {text[:50]}")
            
            try:
                # –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É
                if 'contact' in msg:
                    contact = msg['contact']
                    phone = contact['phone_number']
                    handle_phone(chat_id, phone)
                
                # –ö–æ–º–∞–Ω–¥–∏
                elif text == '/start':
                    handle_start(chat_id, first_name)
                elif text == 'üìã –ú–µ–Ω—é':
                    handle_menu(chat_id)
                elif text == 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å':
                    handle_profile(chat_id)
                elif text == '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó':
                    handle_recommendations(chat_id)
                elif text == 'üõí –ö–æ—à–∏–∫':
                    handle_cart(chat_id)
                elif text == 'üÜò –î–æ–ø–æ–º–æ–≥–∞':
                    handle_help(chat_id)
                elif text == 'üîç –ü–æ—à—É–∫':
                    handle_search(chat_id)
                elif text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏':
                    start_checkout(chat_id)
                elif text == '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏':
                    confirm_order(chat_id)
                elif text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏':
                    with user_carts_lock:
                        user_carts[chat_id] = {}
                    send_msg(chat_id, "üóëÔ∏è –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ ‚ú®", kb_main())
                elif text in ['üìã –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏', '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏']:
                    handle_start(chat_id)
                
                # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤
                else:
                    state = user_states.get(chat_id, State.MAIN_MENU)
                    
                    if state == State.CHECKOUT_ADDRESS:
                        handle_address(chat_id, text)
                    elif state == State.SEARCHING and AI_ENABLED:
                        try:
                            menu = get_menu()
                            menu_text = "\n".join([f"‚Ä¢ {item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '')} ({item.get('–¶—ñ–Ω–∞', '')} ‚Ç¥)" for item in menu[:20]])
                            response = ai_service.ask_gemini(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î: {text}\n\n–ú–µ–Ω—é:\n{menu_text}\n\n–ü–æ—Ä–∞–¥—å 2-3 —Å—Ç—Ä–∞–≤–∏.")
                            send_msg(chat_id, f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</b>\n\n{response}", kb_main())
                        except Exception as search_err:
                            logger.error(f"Search error: {search_err}")
                            send_msg(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É üòï", kb_main())
                    else:
                        send_msg(chat_id, random_error(), kb_main())
                        
            except Exception as handler_err:
                logger.error(f"‚ùå Handler error: {handler_err}", exc_info=True)
                try:
                    send_msg(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start", kb_main())
                except:
                    pass
                
                # Notify admin
                try:
                    admin_id = int(os.getenv('ADMIN_TELEGRAM_ID', 0))
                    if admin_id:
                        error_text = f"üö® <b>–ü–æ–º–∏–ª–∫–∞</b>\n\nüë§ User: {chat_id}\nüìù Text: {text[:100]}\n\n‚ùå Error: {str(handler_err)[:200]}"
                        send_msg(admin_id, error_text)
                except:
                    logger.error("Failed to notify admin")
        
        elif 'callback_query' in data:
            cb = data['callback_query']
            chat_id = cb['from']['id']
            cb_data = cb.get('data', '')
            cb_id = cb.get('id', '')
            
            logger.info(f"üîò Callback from {chat_id}: {cb_data}")
            
            try:
                if cb_data == 'back':
                    handle_menu(chat_id)
                elif cb_data == 'back_cat':
                    handle_menu(chat_id)
                elif cb_data == 'noop':
                    pass
                elif cb_data == 'cart':
                    handle_cart(chat_id)
                elif cb_data == 'menu':
                    handle_menu(chat_id)
                elif cb_data.startswith('cat:'):
                    category = cb_data[4:]
                    show_item(chat_id, category, 0)
                elif cb_data.startswith('add:'):
                    item_name = cb_data[4:]
                    add_to_cart(chat_id, item_name)
                elif cb_data.startswith('item:'):
                    parts = cb_data[5:].split(':')
                    if len(parts) == 2:
                        category = parts[0]
                        try:
                            index = int(parts[1])
                            show_item(chat_id, category, index)
                        except ValueError:
                            logger.error(f"Invalid index: {parts[1]}")
                else:
                    logger.warning(f"Unknown callback: {cb_data}")
                    
            except Exception as cb_err:
                logger.error(f"‚ùå Callback error: {cb_err}", exc_info=True)
                try:
                    tg_service.tg_answer_callback(cb_id, "‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)
                except:
                    pass
        
        return jsonify({"ok": True})
        
    except Exception as webhook_err:
        logger.error(f"‚ùå WEBHOOK ERROR: {webhook_err}", exc_info=True)
        return jsonify({"ok": False, "error": str(webhook_err)})

@app.route('/health', methods=['GET'])
def health():
    """Health check"""
    return jsonify({"status": "ok", "bot": "Hubsy v3.2"})

@app.route('/', methods=['GET'])
def index():
    """Index page"""
    return jsonify({
        "name": "Hubsy Bot",
        "version": "3.2.0",
        "status": "running"
    })

# =============================================================================
# –ó–ê–ü–£–°–ö
# =============================================================================

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    logger.info(f"üåê Starting Hubsy Bot on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)