"""
üí¨ –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ AI
–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è –Ω–∞–º—ñ—Ä—ñ–≤
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from app.utils.session import (
    get_user_session,
    update_user_session,
    get_user_cart,
    add_to_cart,
    get_user_stats,
)
from app.utils.validators import sanitize_input, validate_phone, normalize_phone
from app.services.gemini_service import GeminiService

logger = logging.getLogger(__name__)

# ============================================================================
# –ü–ï–†–°–û–ù–ê–õ–Ü–ó–û–í–ê–ù–Ü –í–Ü–î–ü–û–í–Ü–î–Ü
# ============================================================================

MOOD_SUGGESTIONS = {
    'sad': {
        'emoji': 'üò¢',
        'message': '–Ø –±–∞—á—É, —â–æ —Ç–∏ –≤ —Å—É–º–Ω–æ–º—É –Ω–∞—Å—Ç—Ä–æ—ó... üíî',
        'categories': ['comfort food', 'desserts', 'warm drinks'],
        'discount': 15,
    },
    'happy': {
        'emoji': 'üòä',
        'message': '–ß—É–¥–æ–≤–æ! –°–≤—è—Ç–∫—É—î–º–æ? üéâ',
        'categories': ['pizza', 'sushi', 'celebrations'],
        'discount': 10,
    },
    'busy': {
        'emoji': '‚ö°',
        'message': '–Ø –±–∞—á—É, —Ç–∏ —Å–ø—ñ—à–∏—à... ‚è∞',
        'categories': ['fast food', 'quick meals'],
        'discount': 5,
    },
    'lazy': {
        'emoji': 'üò¥',
        'message': '–õ—ñ–Ω–∏–≤–æ –≥–æ—Ç—É–≤–∞—Ç–∏? –Ø —Ä–æ–∑—É–º—ñ—é! üò¥',
        'categories': ['ready-to-eat', 'comfort food'],
        'discount': 0,
    },
}

INTENT_KEYWORDS = {
    'menu': ['–º–µ–Ω—é', '—á—Ç–æ –µ—Å—Ç—å', '–∫–∞—Ç–∞–ª–æ–≥', '—Å–ø–∏—Å–æ–∫', '–ø–æ–∫–∞–∑–∞—Ç—å', '–º–µ–Ω—é'],
    'recommendation': ['–ø–æ—Ä–∞–¥—å', '—á—Ç–æ –∑–∞–∫–∞–∑–∞—Ç—å', '—Å–æ–≤–µ—Ç', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–π', '—á—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å'],
    'cart': ['–∫–æ—Ä–∑–∏–Ω–∞', '–∫–æ—à–∏–∫', '—á—Ç–æ —è –∑–∞–∫–∞–∑–∞–ª', '–º–æ–π –∑–∞–∫–∞–∑'],
    'checkout': ['–æ—Ñ–æ—Ä–º–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–¥–æ—Å—Ç–∞–≤–∏—Ç—å'],
    'mood': ['–≥—Ä—É—Å—Ç–Ω–æ', '–≤–µ—Å–µ–ª–æ', '—Å–ø–µ—à—É', '–ª–µ–Ω–∏–≤–æ', '—Ö–æ–ª–æ–¥–Ω–æ', '–∂–∞—Ä–∫–æ'],
}


async def handle_ai_order(update, context, text):
    user = update.effective_user
    
    # –û–¢–†–ò–ú–£–Ñ–ú–û GEMINI SERVICE
    gemini = context.bot_data.get('gemini_service')
    
    # –û–ë–†–û–ë–õ–Ø–Ñ–ú–û –ó RATE LIMITING
    result = gemini.process_order_request(
        user_id=user.id,
        text=text,
        menu_items=[...]
    )
    
    # –Ø–ö –©–û –†–ï–ô–¢ –õ–Ü–ú–Ü–¢?
    if result.get('action') == 'error':
        await update.message.reply_text(
            result['message'],
            parse_mode='Markdown'
        )
        return
    
    # –ó–≤–∏—á–∞–π–Ω–∞ –æ–±—Ä–æ–±–∫–∞
    # ...
    
    # ========================================================================
    # –û–ë–†–û–ë–ö–ê –†–Ü–ó–ù–ò–• –°–¢–ê–ù–Ü–í
    # ========================================================================
    
    current_state = session.get('state', 'idle')
    
    # –°–¢–ê–ù: –æ—á—ñ–∫—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    if current_state == 'awaiting_phone':
        if validate_phone(text):
            normalized = normalize_phone(text)
            update_user_session(user.id, {
                'phone': normalized,
                'state': 'awaiting_address'
            })
            
            await update.message.reply_text(
                "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
                "üìç –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                "_(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –†—É—Å—å–∫–∞, 12, –∫–≤. 5)_",
                parse_mode='Markdown'
            )
            return
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É!\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:\n"
                "‚úÖ +380501234567\n"
                "‚úÖ 0501234567",
                parse_mode='Markdown'
            )
            return
    
    # –°–¢–ê–ù: –æ—á—ñ–∫—É—î–º–æ –∞–¥—Ä–µ—Å—É
    if current_state == 'awaiting_address':
        if len(text) >= 10 and any(c.isdigit() for c in text):
            update_user_session(user.id, {
                'address': text,
                'state': 'confirming_order'
            })
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
            cart = get_user_cart(user.id)
            if cart:
                order_data = {
                    'items': cart,
                    'phone': session.get('phone'),
                    'address': text,
                }
                
                summary = format_order_summary(order_data)
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_order"),
                        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order"),
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"{summary}\n\nüí¨ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            return
        else:
            await update.message.reply_text(
                "‚ùå –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞! üòï\n\n"
                "–ü–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ –º–∞—Ç–∏ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É.\n\n"
                "_(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –≤—É–ª. –†—É—Å—å–∫–∞, 12, –∫–≤. 5)_",
                parse_mode='Markdown'
            )
            return
    
    # –°–¢–ê–ù: –æ—á—ñ–∫—É—î–º–æ –ø—Ä–æ–º–æ–∫–æ–¥
    if current_state == 'awaiting_promocode':
        sheets_service = context.bot_data.get('sheets_service')
        if sheets_service:
            promo_data = sheets_service.validate_promocode(text)
            if promo_data:
                update_user_session(user.id, {
                    'promocode': text,
                    'state': 'idle'
                })
                
                await update.message.reply_text(
                    f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ **{text}** –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ!\n\n"
                    f"–ó–Ω–∏–∂–∫–∞: **{promo_data['discount_percent']}%** ‚≠ê",
                    parse_mode='Markdown'
                )
                return
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è! üòî",
                    parse_mode='Markdown'
                )
                return
    
    # ========================================================================
    # –ù–û–†–ú–ê–õ–¨–ù–ò–ô –†–ï–ñ–ò–ú: –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    # ========================================================================
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–º—ñ—Ä
    intent = detect_intent(text)
    mood = detect_mood(text)
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–º—ñ—Ä—É
    if intent == 'recommendation':
        await handle_recommendation(update, context, text, mood, stats)
    
    elif intent == 'menu':
        await handle_menu_request(update, context)
    
    elif intent == 'cart':
        await handle_cart_request(update, context)
    
    elif intent == 'checkout':
        await handle_checkout_request(update, context)
    
    else:
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–ø—Ä–æ–±—É—î–º–æ –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞ —á–µ—Ä–µ–∑ AI
        await handle_ai_order(update, context, text)


def detect_intent(text: str) -> str:
    """–í–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    text_lower = text.lower()
    
    for intent, keywords in INTENT_KEYWORDS.items():
        if any(keyword in text_lower for keyword in keywords):
            return intent
    
    return 'order'  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å–ø—Ä–æ–±–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è


def detect_mood(text: str) -> str:
    """–í–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    text_lower = text.lower()
    
    mood_keywords = {
        'sad': ['–≥—Ä—É—Å—Ç–Ω–æ', '—Å—É–º–Ω–æ', '–ø–æ–≥–∞–Ω–æ', '–ø–ª–æ—Ö–æ', '–¥–∏–ø—Ä–µ—Å—ñ—è'],
        'happy': ['–≤–µ—Å–µ–ª–æ', '–∫–ª–∞—Å–Ω–æ', '–∫–ª–µ–≤–æ', '–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä', '—Ä–∞–¥—ñ—Å–Ω–æ'],
        'busy': ['—Å–ø—ñ—à—É', '–ø–æ—Å–ø–µ—à–∞—é', '—à–≤–∏–¥–∫–æ', '—Å—Ä–æ—á–Ω–æ', '–Ω–µ—Ç—É –≤—Ä–µ–º–µ–Ω–∏'],
        'lazy': ['–ª–µ–Ω–∏–≤—ã–π', '–ª—ñ–Ω–∏–≤–æ', '–Ω–µ —Ö–æ—á—É –≥–æ—Ç—É–≤–∞—Ç–∏', '–Ω–µ —Ö–æ—á—É –≥–æ—Ç–æ–≤–∏—Ç—å'],
    }
    
    for mood, keywords in mood_keywords.items():
        if any(keyword in text_lower for keyword in keywords):
            return mood
    
    return None


async def handle_recommendation(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    mood: str,
    stats: dict
):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é"""
    gemini_service = context.bot_data.get('gemini_service')
    sheets_service = context.bot_data.get('sheets_service')
    
    if not gemini_service or not sheets_service:
        await update.message.reply_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    # –§–æ—Ä–º—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç
    menu_items = sheets_service.get_menu()
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ—é
    mood_context = ""
    if mood and mood in MOOD_SUGGESTIONS:
        mood_info = MOOD_SUGGESTIONS[mood]
        mood_context = f"\n–ù–∞—Å—Ç—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {mood_info['message']}"
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–ª—é–±–ª–µ–Ω–∏—Ö —Å—Ç—Ä–∞–≤
    favorites_context = ""
    if stats['favorite_item']:
        favorites_context = f"\n–£–ª—é–±–ª–µ–Ω–∞ —Å—Ç—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {stats['favorite_item']}"
    
    # –ó–∞–ø–∏—Ç –¥–æ AI
    prompt = f"""–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—Ä–æ—Å–∏–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é: "{text}"
{mood_context}
{favorites_context}

–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 2-3 –Ω–∞–π–±—ñ–ª—å—à –ø—ñ–¥—Ö–æ–¥—è—â—ñ —Å—Ç—Ä–∞–≤–∏ –∑ –º–µ–Ω—é.
–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ —Ç–∞ –ø–æ—è—Å–Ω–∏ —á–æ–º—É —Å–∞–º–µ —Ü—ñ —Å—Ç—Ä–∞–≤–∏."""
    
    response = await gemini_service.generate_response(prompt)
    
    keyboard = [
        [InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="show_menu")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        response,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def handle_menu_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –º–µ–Ω—é"""
    sheets_service = context.bot_data.get('sheets_service')
    
    if not sheets_service:
        await update.message.reply_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    menu_items = sheets_service.get_menu()
    
    if not menu_items:
        await update.message.reply_text("üòî –ú–µ–Ω—é –Ω–∞—Ä–∞–∑—ñ –ø–æ—Ä–æ–∂–Ω—î")
        return
    
    # –ì—Ä—É–ø—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    categories = {}
    for item in menu_items:
        cat = item.get('category', '–Ü–Ω—à–µ')
        if cat not in categories:
            categories[cat] = []
        categories[cat].append(item)
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message_parts = ["üìã **–ú–ï–ù–Æ**\n"]
    
    for category, items in categories.items():
        message_parts.append(f"\n**{category}**")
        for item in items[:5]:  # –û–±–º–µ–∂—É—î–º–æ 5 –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            name = item.get('name', '')
            price = item.get('price', 0)
            rating = item.get('rating', 0)
            stars = "‚≠ê" * int(rating) if rating > 0 else ""
            
            message_parts.append(f"üîπ {name} ‚Äî {price} –≥—Ä–Ω {stars}")
    
    message_parts.append("\nüí¨ –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏ —â–æ–± –¥–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞!")
    
    menu_text = "\n".join(message_parts)
    
    keyboard = [
        [InlineKeyboardButton("üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data="show_cart")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if len(menu_text) > 4000:
        chunks = [menu_text[i:i+4000] for i in range(0, len(menu_text), 4000)]
        for chunk in chunks:
            await update.message.reply_text(chunk, parse_mode='Markdown')
        await update.message.reply_text(
            "üìç –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            menu_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


async def handle_cart_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –∫–æ—à–∏–∫–∞"""
    user = update.effective_user
    cart = get_user_cart(user.id)
    
    if not cart or len(cart) == 0:
        keyboard = [[InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π! üòî\n\n"
            "–î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —Å–º–∞—á–Ω–µ –∑ –º–µ–Ω—é! üçï",
            reply_markup=reply_markup
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ –∫–æ—à–∏–∫
    order_data = {'items': cart}
    summary = format_order_summary(order_data)
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")],
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏", callback_data="checkout")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear_cart")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        summary,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def handle_checkout_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"""
    user = update.effective_user
    cart = get_user_cart(user.id)
    
    if not cart or len(cart) == 0:
        await update.message.reply_text(
            "üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π! –ù–µ–º–∞ —á–æ–≥–æ –∑–∞–º–æ–≤–ª—è—Ç–∏ üòî"
        )
        return
    
    update_user_session(user.id, {'state': 'awaiting_phone'})
    
    await update.message.reply_text(
        "üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
        "_(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380501234567 –∞–±–æ 0501234567)_",
        parse_mode='Markdown'
    )


async def handle_ai_order(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ AI"""
    user = update.effective_user
    gemini_service = context.bot_data.get('gemini_service')
    sheets_service = context.bot_data.get('sheets_service')
    
    if not gemini_service or not sheets_service:
        await update.message.reply_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é
    menu_items = sheets_service.get_menu()
    cart = get_user_cart(user.id)
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ —á–µ—Ä–µ–∑ AI
    ai_result = await gemini_service.process_order_request(
        text,
        menu_items,
        cart
    )
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    if ai_result.get('action') == 'add_to_cart':
        # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –¥–æ –∫–æ—à–∏–∫–∞
        items_added = []
        for item in ai_result.get('items', []):
            add_to_cart(user.id, item)
            items_added.append(f"‚úÖ {item['name']}")
        
        response_text = "\n".join(items_added)
        response_text += "\n\nüõí –î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!"
        response_text += "\n\n–©–µ —â–æ—Å—å –¥–æ–¥–∞—Ç–∏ —á–∏ –æ—Ñ–æ—Ä–º–∏—Ç–∏? üòã"
    
    else:
        response_text = ai_result.get('message', '–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∑–∞–ø–∏—Ç üòï')
    
    keyboard = [
        [
            InlineKeyboardButton("üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data="show_cart"),
            InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        response_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# ============================================================================

def format_order_summary(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    lines = ["üì¶ **–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n"]
    
    for idx, item in enumerate(order.get('items', []), 1):
        name = item.get('name', 'Unknown')
        price = item.get('price', 0)
        qty = item.get('quantity', 1)
        total = price * qty
        
        lines.append(f"{idx}. {name}")
        lines.append(f"   {qty} √ó {price} –≥—Ä–Ω = **{total} –≥—Ä–Ω**\n")
    
    total = sum(
        item.get('price', 0) * item.get('quantity', 1)
        for item in order.get('items', [])
    )
    
    lines.append(f"\nüí∞ **–í—Å—å–æ–≥–æ: {total} –≥—Ä–Ω**")
    
    if order.get('phone'):
        lines.append(f"\nüì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {order['phone']}")
    
    if order.get('address'):
        lines.append(f"üìç **–ê–¥—Ä–µ—Å–∞:** {order['address']}")
    
    return "\n".join(lines)
