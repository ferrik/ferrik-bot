"""
üîÑ –°–µ—Ä–≤—ñ—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –∑ Google Sheets –≤ –ë–î
"""
import logging
import sqlite3
from datetime import datetime
from typing import List, Dict, Optional

logger = logging.getLogger(__name__)

class SyncService:
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Google Sheets ‚Üí SQLite"""
    
    def __init__(self, db_connection, sheets_service):
        """
        Args:
            db_connection: SQLite –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            sheets_service: –ú–æ–¥—É–ª—å services.sheets
        """
        self.db = db_connection
        self.sheets = sheets_service
    
    def sync_menu_from_sheets(self) -> Dict[str, any]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –º–µ–Ω—é –∑ Google Sheets –≤ –ë–î
        
        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {'success': bool, 'added': int, 'updated': int, 'errors': list}
        """
        result = {
            'success': False,
            'added': 0,
            'updated': 0,
            'deleted': 0,
            'errors': [],
            'total_items': 0
        }
        
        try:
            logger.info("üîÑ Starting menu sync from Google Sheets...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ Sheets
            sheets_data = self.sheets.get_menu_from_sheet()
            result['total_items'] = len(sheets_data)
            
            if not sheets_data:
                logger.warning("‚ö†Ô∏è No menu items found in Google Sheets")
                result['errors'].append("No items in source")
                return result
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ ID –∑ –ë–î
            existing_ids = set()
            rows = self.db.execute("SELECT id FROM menu_items").fetchall()
            for row in rows:
                existing_ids.add(row[0])
            
            # ID –∑ Sheets
            sheets_ids = set()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω —Ç–æ–≤–∞—Ä
            for item in sheets_data:
                try:
                    item_id = str(item.get('id', ''))
                    if not item_id:
                        result['errors'].append(f"Item without ID: {item.get('–ù–∞–∑–≤–∞', 'Unknown')}")
                        continue
                    
                    sheets_ids.add(item_id)
                    
                    # –ü–∞—Ä—Å–∏—Ç–∏ –¥–∞–Ω—ñ
                    name = item.get('–ù–∞–∑–≤–∞', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
                    price = self._parse_price(item.get('–¶—ñ–Ω–∞', 0))
                    category = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ')
                    description = item.get('–û–ø–∏—Å', '')
                    image_url = item.get('–§–æ—Ç–æ', '')
                    available = item.get('–î–æ—Å—Ç—É–ø–Ω–æ', True)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ available –≤ boolean
                    if isinstance(available, str):
                        available = available.lower() not in ['–Ω—ñ', 'no', 'false', '0', '–Ω–µ–º–∞—î']
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —ñ—Å–Ω—É—î
                    if item_id in existing_ids:
                        # –û–Ω–æ–≤–∏—Ç–∏
                        self.db.execute("""
                            UPDATE menu_items 
                            SET name = ?, price = ?, category = ?, description = ?, 
                                image_url = ?, available = ?, updated_at = ?
                            WHERE id = ?
                        """, (name, price, category, description, image_url, available, datetime.now(), item_id))
                        result['updated'] += 1
                    else:
                        # –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π
                        self.db.execute("""
                            INSERT INTO menu_items (id, name, price, category, description, image_url, available)
                            VALUES (?, ?, ?, ?, ?, ?, ?)
                        """, (item_id, name, price, category, description, image_url, available))
                        result['added'] += 1
                
                except Exception as e:
                    error_msg = f"Error syncing item {item.get('id', 'unknown')}: {e}"
                    logger.error(f"‚ùå {error_msg}")
                    result['errors'].append(error_msg)
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —è–∫—ñ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤ Sheets
            items_to_delete = existing_ids - sheets_ids
            if items_to_delete:
                placeholders = ','.join('?' * len(items_to_delete))
                self.db.execute(f"DELETE FROM menu_items WHERE id IN ({placeholders})", list(items_to_delete))
                result['deleted'] = len(items_to_delete)
                logger.info(f"üóëÔ∏è Deleted {result['deleted']} items not in Sheets")
            
            # Commit –∑–º—ñ–Ω
            self.db.commit()
            
            result['success'] = True
            logger.info(
                f"‚úÖ Menu sync completed: " +
                f"+{result['added']} added, " +
                f"~{result['updated']} updated, " +
                f"-{result['deleted']} deleted"
            )
            
            # –ó–∞–ø–∏—Å–∞—Ç–∏ –≤ –ª–æ–≥
            self._log_sync('menu', 'success', result['total_items'])
            
        except Exception as e:
            error_msg = f"Sync failed: {e}"
            logger.error(f"‚ùå {error_msg}")
            result['errors'].append(error_msg)
            self._log_sync('menu', 'error', 0, error_msg)
        
        return result
    
    def get_menu_from_db(self) -> List[Dict]:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é –∑ –ë–î
        
        Returns:
            List[Dict] - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
        """
        try:
            rows = self.db.execute("""
                SELECT id, name, price, category, description, image_url, available, sort_order
                FROM menu_items
                WHERE available = 1
                ORDER BY sort_order, category, name
            """).fetchall()
            
            menu_items = []
            for row in rows:
                menu_items.append({
                    'id': row[0],
                    '–ù–∞–∑–≤–∞': row[1],
                    '–¶—ñ–Ω–∞': row[2],
                    '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': row[3],
                    '–û–ø–∏—Å': row[4],
                    '–§–æ—Ç–æ': row[5],
                    '–î–æ—Å—Ç—É–ø–Ω–æ': bool(row[6]),
                    'sort_order': row[7]
                })
            
            logger.debug(f"üìã Loaded {len(menu_items)} items from DB")
            return menu_items
            
        except Exception as e:
            logger.error(f"‚ùå Error loading menu from DB: {e}")
            return []
    
    def get_last_sync_info(self) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é"""
        try:
            row = self.db.execute("""
                SELECT sync_type, status, items_count, error_message, synced_at
                FROM sync_log
                WHERE sync_type = 'menu'
                ORDER BY synced_at DESC
                LIMIT 1
            """).fetchone()
            
            if row:
                return {
                    'type': row[0],
                    'status': row[1],
                    'items_count': row[2],
                    'error': row[3],
                    'synced_at': row[4]
                }
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error getting sync info: {e}")
            return None
    
    def _parse_price(self, value) -> float:
        """–ë–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —Ü—ñ–Ω–∏"""
        if value is None:
            return 0.0
        
        try:
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–∫—Å—Ç —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏
            clean = str(value).replace('–≥—Ä–Ω', '').replace(' ', '').replace(',', '.').strip()
            return float(clean) if clean else 0.0
        except:
            return 0.0
    
    def _log_sync(self, sync_type: str, status: str, items_count: int, error_message: str = None):
        """–ó–∞–ø–∏—Å–∞—Ç–∏ –ª–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
        try:
            self.db.execute("""
                INSERT INTO sync_log (sync_type, status, items_count, error_message)
                VALUES (?, ?, ?, ?)
            """, (sync_type, status, items_count, error_message))
            self.db.commit()
        except Exception as e:
            logger.error(f"‚ùå Error logging sync: {e}")


# ============================================================================
# Scheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
# ============================================================================

class MenuSyncScheduler:
    """–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
    
    def __init__(self, sync_service, interval_minutes=30):
        """
        Args:
            sync_service: SyncService –µ–∫–∑–µ–º–ø–ª—è—Ä
            interval_minutes: –Ü–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
        """
        self.sync_service = sync_service
        self.interval_minutes = interval_minutes
        self.last_sync = None
    
    def should_sync(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è"""
        if not self.last_sync:
            return True
        
        from datetime import datetime, timedelta
        now = datetime.now()
        return (now - self.last_sync) > timedelta(minutes=self.interval_minutes)
    
    def sync_if_needed(self) -> Optional[Dict]:
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ"""
        if self.should_sync():
            logger.info("‚è∞ Auto-sync triggered")
            result = self.sync_service.sync_menu_from_sheets()
            self.last_sync = datetime.now()
            return result
        return None