"""
üéØ –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î - –ó WARM GREETINGS
–°–∫–æ–ø—ñ—é–π—Ç–µ –≤–µ—Å—å —Ñ–∞–π–ª!
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from app.utils.session import get_user_session, get_user_stats, update_user_session
from app.utils.warm_greetings import WarmGreetings

logger = logging.getLogger(__name__)

# ============================================================================
# /start - –¢–ï–ü–õ–ò–ô –ó–ê–ü–£–°–ö!
# ============================================================================

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î WarmGreetings –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    """
    user = update.effective_user
    
    logger.info(f"üë§ User {user.id} (@{user.username}) started bot")
    
    # 1Ô∏è‚É£ –û–¢–†–ò–ú–£–Ñ–ú–û –î–ê–ù–Ü –ö–û–†–ò–°–¢–£–í–ê–ß–ê
    session = get_user_session(user.id)
    stats = get_user_stats(user.id)
    
    # 2Ô∏è‚É£ –í–ò–ë–ò–†–ê–Ñ–ú–û –ü–†–ò–í–Ü–¢–ê–ù–ù–Ø –ù–ê –û–°–ù–û–í–Ü –Ü–°–¢–û–†–Ü–á
    greeting = WarmGreetings.get_greeting_by_order_count(
        order_count=stats['order_count'],
        badge=stats['badge']['name'],
        bonus=stats['bonus_points']
    )
    
    logger.info(f"üì® Greeting type: order_count={stats['order_count']}")
    
    # 3Ô∏è‚É£ –°–¢–í–û–†–Æ–Ñ–ú–û –ö–õ–ê–í–Ü–ê–¢–£–†–£ –ó –ö–ù–û–ü–ö–ê–ú–ò
    keyboard = [
        [
            InlineKeyboardButton("üéÅ –°—é—Ä–ø—Ä–∏–∑!", callback_data="surprise_me"),
            InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu"),
        ],
        [
            InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart"),
            InlineKeyboardButton("‚≠ê –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
        ],
        [
            InlineKeyboardButton("üéØ –ß–µ–ª–ª–µ–Ω–¥–∂", callback_data="show_challenge"),
            InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="show_help"),
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # 4Ô∏è‚É£ –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –ü–†–ò–í–Ü–¢–ê–ù–ù–Ø
    await update.message.reply_text(
        greeting,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    logger.info(f"‚úÖ Welcome message sent to {user.id}")


# ============================================================================
# /menu - –ü–û–ö–ê–ó–ê–¢–ò –ú–ï–ù–Æ
# ============================================================================

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /menu - –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é"""
    user = update.effective_user
    
    logger.info(f"üìã User {user.id} requested menu")
    
    # –ó–∞–≥–ª—É—à–∫–∞ (–Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ —Ç—É—Ç –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ Google Sheets)
    menu_text = """üìã **–ú–ï–ù–Æ**

**–ü—ñ—Ü—ñ:**
üîπ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ ‚Äî 120 –≥—Ä–Ω ‚≠ê‚≠ê‚≠ê‚≠ê
üîπ –ü–µ–ø–µ—Ä–æ–Ω—ñ ‚Äî 150 –≥—Ä–Ω ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

**–ù–∞–ø–æ—ó:**
üîπ Cola 0.5–ª ‚Äî 30 –≥—Ä–Ω
üîπ –°—ñ–∫ ‚Äî 40 –≥—Ä–Ω

üí¨ –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É —â–æ–± –¥–æ–¥–∞—Ç–∏ —É –∫–æ—à–∏–∫!"""
    
    keyboard = [
        [InlineKeyboardButton("üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data="show_cart")],
        [InlineKeyboardButton("üéÅ –°—é—Ä–ø—Ä–∏–∑", callback_data="surprise_me")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        menu_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# /cart - –ü–û–ö–ê–ó–ê–¢–ò –ö–û–®–ò–ö
# ============================================================================

async def cart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cart - –ø–æ–∫–∞–∑—É—î –∫–æ—à–∏–∫"""
    user = update.effective_user
    
    logger.info(f"üõí User {user.id} requested cart")
    
    from app.utils.session import get_user_cart
    cart = get_user_cart(user.id)
    
    if not cart or len(cart) == 0:
        await update.message.reply_text(
            "üõí **–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!** üòî\n\n"
            "–î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —Å–º–∞—á–Ω–µ –∑ –º–µ–Ω—é! üçï",
            parse_mode='Markdown'
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ –∫–æ—à–∏–∫
    cart_text = "üõí **–í–∞—à –∫–æ—à–∏–∫:**\n\n"
    total = 0
    
    for idx, item in enumerate(cart, 1):
        name = item.get('name', 'Unknown')
        price = item.get('price', 0)
        qty = item.get('quantity', 1)
        subtotal = price * qty
        total += subtotal
        
        cart_text += f"{idx}. {name}\n"
        cart_text += f"   {qty} √ó {price} –≥—Ä–Ω = **{subtotal} –≥—Ä–Ω**\n\n"
    
    cart_text += f"\nüí∞ **–í—Å—å–æ–≥–æ: {total} –≥—Ä–Ω**"
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")],
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏", callback_data="checkout")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear_cart")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        cart_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# /order - –û–§–û–†–ú–ò–¢–ò –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
# ============================================================================

async def order_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /order - –ø–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"""
    user = update.effective_user
    
    logger.info(f"üì¶ User {user.id} started checkout")
    
    from app.utils.session import get_user_cart
    cart = get_user_cart(user.id)
    
    if not cart or len(cart) == 0:
        await update.message.reply_text(
            "üõí **–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!** üòî\n\n"
            "–ù–µ–º–∞ —á–æ–≥–æ –∑–∞–º–æ–≤–ª—è—Ç–∏!",
            parse_mode='Markdown'
        )
        return
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω "–æ—á—ñ–∫—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω"
    update_user_session(user.id, {'state': 'awaiting_phone'})
    
    await update.message.reply_text(
        "üì± **–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:**\n\n"
        "_(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380501234567 –∞–±–æ 0501234567)_",
        parse_mode='Markdown'
    )


# ============================================================================
# /help - –î–û–ü–û–ú–û–ì–ê
# ============================================================================

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –¥–æ–ø–æ–º–æ–≥–∞"""
    help_text = """‚ùì **–î–û–ü–û–ú–û–ì–ê**

**–ú–æ—ó –∫–æ–º–∞–Ω–¥–∏:**
/start ‚Äî –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/menu ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é
/cart ‚Äî –ú—ñ–π –∫–æ—à–∏–∫
/order ‚Äî –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/profile ‚Äî –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å
/help ‚Äî –¶—è –¥–æ–ø–æ–º–æ–≥–∞

**–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:**
1Ô∏è‚É£ –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å [üìã –ú–µ–Ω—é]
2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ
3Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å [‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏]
4Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ –∞–¥—Ä–µ—Å—É

**–ü–∏—Ç–∞–Ω–Ω—è?**
üìû –ù–∞–ø–∏—à—ñ—Ç—å /support –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –Ω–∞–º–∏"""
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )


# ============================================================================
# /cancel - –°–ö–ê–°–£–í–ê–¢–ò
# ============================================================================

async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel - —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é"""
    user = update.effective_user
    
    logger.info(f"‚ùå User {user.id} cancelled operation")
    
    update_user_session(user.id, {'state': 'idle'})
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu")],
        [InlineKeyboardButton("/start", callback_data="back_to_menu")]
    ]
    
    await update.message.reply_text(
        "‚ùå **–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞**\n\n"
        "–ü–æ—á–Ω—ñ—Ç—å –∑ –Ω—É–ª—è! üëã",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


# ============================================================================
# –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø - –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø HANDLERS
# ============================================================================

def register_command_handlers(application):
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö command handlers
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤ main.py:
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    from app.handlers.commands import register_command_handlers
    
    # –£ —Ñ—É–Ω–∫—Ü—ñ—ó setup_handlers():
    register_command_handlers(app)
    """
    from telegram.ext import CommandHandler
    
    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(CommandHandler("menu", menu_handler))
    application.add_handler(CommandHandler("cart", cart_handler))
    application.add_handler(CommandHandler("order", order_handler))
    application.add_handler(CommandHandler("help", help_handler))
    application.add_handler(CommandHandler("cancel", cancel_handler))
    
    logger.info("‚úÖ Command handlers registered")
