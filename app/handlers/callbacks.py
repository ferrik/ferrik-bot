"""
üîò –û–±—Ä–æ–±–Ω–∏–∫ callback queries - –û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø
–ù–æ–≤—ñ —Ñ—ñ—á–∏: Surprise Me, Profile, Achievements, Challenges
"""
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

from app.utils.validators import format_order_summary, calculate_total_price
from app.utils.session import (
    get_user_cart,
    clear_user_cart,
    get_user_session,
    update_user_session,
    get_user_stats,
    get_user_badge,
    add_to_cart,
    get_referral_link,
    get_weekly_challenge,
    get_user_challenge_progress,
    register_order,
    ACHIEVEMENTS,
)

logger = logging.getLogger(__name__)

# ============================================================================
# SURPRISE ME - –ü–û–î–ê–†–û–ö –í–Ü–î –§–ï–†–ò–ö–ê
# ============================================================================

async def surprise_me_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """AI –≥–µ–Ω–µ—Ä—É—î –∫–æ–º–±–æ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—é –∑–Ω–∏–∂–∫–æ—é"""
    query = update.callback_query
    user = query.from_user
    sheets_service = context.bot_data.get('sheets_service')
    
    if not sheets_service:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é
        menu = sheets_service.get_menu()
        if not menu or len(menu) < 3:
            await query.edit_message_text("üòî –ú–µ–Ω—é –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–µ –¥–ª—è —Å—é—Ä–ø—Ä–∏–∑—É!")
            return
        
        # –°–µ–ª–µ—Ü—ñ–æ–Ω—É—î–º–æ 2-3 —Ç–æ–≤–∞—Ä–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ
        surprise_items = random.sample(menu, min(3, len(menu)))
        
        # –î–∞—î–º–æ –∑–Ω–∏–∂–∫—É 15-20%
        discount = random.randint(15, 20)
        
        # –§–æ—Ä–º—É—î–º–æ —Å—é—Ä–ø—Ä–∏–∑
        message = f"""üéÅ **–°–Æ–†–ü–†–ò–ó –í–Ü–î –§–ï–†–ò–ö–ê!** üéÅ

{random.choice([
    "–Ø –¥–ª—è —Ç–µ–±–µ —â–æ—Å—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –≤–∏–±—Ä–∞–≤! üòã",
    "–í—ñ—Ä—é, —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è! üî•",
    "–¶–µ - –º—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –≤–∏–±—ñ—Ä! ‚≠ê",
    "–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±–µ! üíù",
])}

**–ö–û–ú–ë–û –°–Æ–†–ü–†–ò–ó:**"""
        
        items_for_cart = []
        for item in surprise_items:
            message += f"\nüîπ {item['name']} ‚Äî {item['price']} –≥—Ä–Ω"
            items_for_cart.append({
                'id': item['id'],
                'name': item['name'],
                'price': item['price'],
                'quantity': 1
            })
        
        total = calculate_total_price(items_for_cart)
        discounted = total * (1 - discount / 100)
        saved = total - discounted
        
        message += f"\n\nüí∞ **–ó–≤–∏—á–∞–π–Ω–æ:** {total} –≥—Ä–Ω"
        message += f"\nüéØ **–ó—ñ –∑–Ω–∏–∂–∫–æ—é {discount}%:** {discounted:.0f} –≥—Ä–Ω"
        message += f"\nüíö **–í–∏ –∑–∞–æ—â–∞–¥–∏–ª–∏:** {saved:.0f} –≥—Ä–Ω"
        message += f"\n\n‚ú® –¶–µ –∂ —Ñ–∞–Ω–∞ÃÅ—Å—Ç–∏—á–Ω–æ! üöÄ"
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ë–µ—Ä—É —Å—é—Ä–ø—Ä–∏–∑!", callback_data="accept_surprise")],
            [InlineKeyboardButton("‚ùå –ù–µ —Ç–æ–π —Å—é—Ä–ø—Ä–∏–∑", callback_data="show_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—é—Ä–ø—Ä–∏–∑ –≤ —Å–µ—Å—ñ—é
        update_user_session(user.id, {
            'surprise_items': items_for_cart,
            'surprise_discount': discount
        })
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"‚ùå Error in surprise_me: {e}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞! –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ")


async def accept_surprise_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–π–Ω—è—Ç–∏ —Å—é—Ä–ø—Ä–∏–∑ —ñ –¥–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫"""
    query = update.callback_query
    user = query.from_user
    
    session = get_user_session(user.id)
    surprise_items = session.get('surprise_items', [])
    surprise_discount = session.get('surprise_discount', 0)
    
    # –î–æ–¥–∞—î–º–æ –≤ –∫–æ—à–∏–∫
    for item in surprise_items:
        add_to_cart(user.id, item)
    
    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–Ω–∏–∂–∫—É
    cart = get_user_cart(user.id)
    total = calculate_total_price(cart)
    
    message = f"""üéâ **–°–Æ–†–ü–†–ò–ó –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!** üéâ

‚úÖ –í—Å—ñ {len(surprise_items)} —Ç–æ–≤–∞—Ä–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ –∫–æ—à–∏–∫–∞!
üíö –ó–Ω–∏–∂–∫–∞ {surprise_discount}% –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞!

üí∞ **–°—É–º–∞:** {total} –≥—Ä–Ω
üéØ **–ó—ñ –∑–Ω–∏–∂–∫–æ—é:** {total * (1 - surprise_discount/100):.0f} –≥—Ä–Ω

–ì–æ—Ç–æ–≤–∏–π –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? üöÄ"""
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏!", callback_data="checkout")],
        [InlineKeyboardButton("üìã –©–µ —â–æ—Å—å –¥–æ–¥–∞—Ç–∏", callback_data="show_menu")],
        [InlineKeyboardButton("üõí –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—à–∏–∫–∞", callback_data="show_cart")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# ACHIEVEMENTS - –ü–û–ö–ê–ó–ê–¢–ò –î–û–°–Ø–ì–ù–ï–ù–ù–Ø
# ============================================================================

async def show_achievements_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    query = update.callback_query
    user = query.from_user
    
    stats = get_user_stats(user.id)
    achievements = stats['achievements_count']
    
    message = "üèÜ **–¢–í–û–á –î–û–°–Ø–ì–ù–ï–ù–ù–Ø**\n\n"
    
    if achievements == 0:
        message += "–ü–æ–∫–∏ –Ω–µ–º–∞—î –¥–æ—Å—è–≥–Ω–µ–Ω—å! üòî\n\n"
        message += "–ê–ª–µ —Ç–∏ –º–æ–∂–µ—à —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑! üí™\n"
        message += "‚Ä¢ –ó—Ä–æ–±–∏ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        message += "‚Ä¢ –ó–∞–ª–∏—à–∏ –≤—ñ–¥–≥—É–∫\n"
        message += "‚Ä¢ –ü—Ä–∏–≤—ñ–¥–∏ –¥—Ä—É–≥–∞\n"
    else:
        session = get_user_session(user.id)
        achieved = session.get('achievements', [])
        
        for achievement_key in achieved:
            if achievement_key in ACHIEVEMENTS:
                ach = ACHIEVEMENTS[achievement_key]
                message += f"{ach['emoji']} **{ach['title']}**\n"
                message += f"   –ë–æ–Ω—É—Å: +{ach['bonus']} ‚≠ê\n\n"
    
    message += "\nüìå **–ù–ê–°–¢–£–ü–ù–ÜÈÅî–°–Ø–ì–ù–ï–ù–ù–Ø:**\n"
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–∂–ª–∏–≤—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    upcoming = {
        'first_order': 'üéØ –ü–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
        'order_5': 'üë®‚Äçüç≥ –ü\'—è—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å',
        'order_10': 'üèÜ –î–µ—Å—è—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å',
        'refer_friend': 'üë• –ü—Ä–∏–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∞',
    }
    
    for key, desc in upcoming.items():
        message += f"‚Ä¢ {desc}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é", callback_data="show_profile")],
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# REFERRALS - –†–ï–§–ï–†–ê–õ–¨–ù–ê –°–ò–°–¢–ï–ú–ê
# ============================================================================

async def show_referrals_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º—É"""
    query = update.callback_query
    user = query.from_user
    
    session = get_user_session(user.id)
    referred_users = session.get('referred_users', [])
    referral_link = get_referral_link(user.id)
    
    message = f"""üë• **–†–ï–§–ï–†–ê–õ–¨–ù–ê –°–ò–°–¢–ï–ú–ê**

üîó **–¢–Ü –ü–û–°–ò–õ–ê–ù–ù–Ø:**
`{referral_link}`

_(–ù–∞—Ç–∏—Å–Ω–∏ —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏)_

üíö **–ü–†–ï–ú–Ü–ê:**
‚Ä¢ –¢–∏ –æ—Ç—Ä–∏–º—É—î—à **100 –±–æ–Ω—É—Å—ñ–≤** –∑–∞ –∫–æ–∂–Ω–æ–≥–æ –¥—Ä—É–≥–∞
‚Ä¢ –¢–≤—ñ–π –¥—Ä—É–≥ –æ—Ç—Ä–∏–º—É—î **100 –±–æ–Ω—É—Å—ñ–≤** –Ω–∞ –ø–µ—Ä—à–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
‚Ä¢ –û–±–∏–¥–≤–∞ –≤–∏–≥—Ä—É–≤–∞–ª–∏! üéâ

üë• **–ü–†–ò–í–ï–î–ï–ù–û –î–†–£–ó–Ü–í:** {len(referred_users)}

üí∞ **–ó–ê–ì–ê–õ–¨–ù–ò–ô –ë–û–ù–£–°:** {len(referred_users) * 100} ‚≠ê

üìä **–¢–û–ü –†–ï–§–ï–†–ï–ê–õ–ò:**
1. –ó—Ä–æ–±–∏—Ç–∏ —Å–≤–æ—ó–º –¥—Ä—É–∑—è–º –ø–æ–¥–∞—Ä—É–Ω–æ–∫! üéÅ
2. –ì–æ—Ç–æ–≤–æ! –ß–µ–∫–∞–π –Ω–∞ —ó—Ö–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! ‚è∞

‚ú® **–û–î–ò–ù –£–ú–û–í:**
–î—Ä—É–≥ –ø–æ–≤–∏–Ω–µ–Ω –∑–∞–º–æ–≤–∏—Ç–∏ —â–æ–± –æ–±–∏–¥–≤–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å! üéØ"""
    
    keyboard = [
        [InlineKeyboardButton("üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –≤ Telegram", callback_data="share_referral")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_profile")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# BACK NAVIGATION
# ============================================================================

async def back_to_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    query = update.callback_query
    
    keyboard = [
        [
            InlineKeyboardButton("üéÅ –°—é—Ä–ø—Ä–∏–∑!", callback_data="surprise_me"),
            InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu"),
        ],
        [
            InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart"),
            InlineKeyboardButton("‚≠ê –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
        ],
        [
            InlineKeyboardButton("üéØ –ß–µ–ª–ª–µ–Ω–¥–∂", callback_data="show_challenge"),
            InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="show_help"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üè† **–ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ**\n\n"
        "–í–∏–±–µ—Ä–∏, —â–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏! üòä",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# –ó–ê–ì–ê–õ–¨–ù–ò–ô –ú–ê–†–®–†–£–¢–ò–ó–ê–¢–û–†
# ============================================================================

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ callback queries"""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"‚ùå Error answering query: {e}")
        return
    
    user = query.from_user
    callback_data = query.data
    
    logger.info(f"üë§ User {user.id} callback: {callback_data}")
    
    # ===== –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è callbacks =====
    
    # –ú–µ–Ω—é —Ç–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
    if callback_data == "show_menu":
        await show_menu_callback(update, context)
    
    elif callback_data == "show_cart":
        await show_cart_callback(update, context)
    
    elif callback_data == "show_help":
        await show_help_callback(update, context)
    
    elif callback_data == "show_profile":
        await show_profile_callback(update, context)
    
    elif callback_data == "show_challenge":
        await show_challenge_callback(update, context)
    
    # –°—é—Ä–ø—Ä–∏–∑
    elif callback_data == "surprise_me":
        await surprise_me_callback(update, context)
    
    elif callback_data == "accept_surprise":
        await accept_surprise_callback(update, context)
    
    # –ö–æ—à–∏–∫
    elif callback_data == "clear_cart":
        await clear_cart_callback(update, context)
    
    elif callback_data == "checkout":
        await checkout_callback(update, context)
    
    elif callback_data == "confirm_order":
        await confirm_order_callback(update, context)
    
    elif callback_data == "cancel_order":
        await cancel_order_callback(update, context)
    
    # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ
    elif callback_data == "show_achievements":
        await show_achievements_callback(update, context)
    
    elif callback_data == "show_referrals":
        await show_referrals_callback(update, context)
    
    # –ù–∞–∑–∞–¥
    elif callback_data == "back_to_menu":
        await back_to_menu_callback(update, context)
    
    else:
        await query.edit_message_text(f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {callback_data}")


# ============================================================================
# –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á (–°–¢–ê–†–Ü)
# ============================================================================

async def show_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    query = update.callback_query
    sheets_service = context.bot_data.get('sheets_service')
    
    if not sheets_service:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    try:
        menu_items = sheets_service.get_menu()
        
        if not menu_items:
            await query.edit_message_text("üòî –ú–µ–Ω—é –Ω–∞—Ä–∞–∑—ñ –ø–æ—Ä–æ–∂–Ω—î")
            return
        
        message_parts = ["üìã **–ú–ï–ù–Æ**\n"]
        categories = {}
        
        for item in menu_items:
            cat = item.get('category', '–Ü–Ω—à–µ')
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(item)
        
        for category, items in list(categories.items())[:3]:  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è preview
            message_parts.append(f"\n**{category}**")
            for item in items[:3]:
                name = item.get('name', '')
                price = item.get('price', 0)
                rating = item.get('rating', 0)
                stars = "‚≠ê" * int(rating)
                message_parts.append(f"üîπ {name} ‚Äî {price} –≥—Ä–Ω {stars}")
        
        message_parts.append("\nüí¨ –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏ —â–æ–± –¥–æ–¥–∞—Ç–∏!")
        
        keyboard = [
            [InlineKeyboardButton("üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data="show_cart")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "\n".join(message_parts),
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"‚ùå Error in show_menu: {e}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞")


async def show_cart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫"""
    query = update.callback_query
    user = query.from_user
    
    cart = get_user_cart(user.id)
    
    if not cart or len(cart) == 0:
        keyboard = [[InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!\n\n"
            "–î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —Å–º–∞—á–Ω–µ! üçï",
            reply_markup=reply_markup
        )
        return
    
    order_data = {'items': cart}
    summary = format_order_summary(order_data)
    
    keyboard = [
        [
            InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode"),
            InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏", callback_data="checkout")