"""
Google Sheets Service
–†–æ–±–æ—Ç–∞ –∑ Google Sheets API –¥–ª—è –º–µ–Ω—é —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
"""

import os
import logging
import json
from datetime import datetime
from typing import List, Dict, Any, Optional
from decimal import Decimal

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

import config
from config import normalize_menu_list, create_legacy_compatible_item

logger = logging.getLogger(__name__)

# Google Sheets API setup
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

# –ö–µ—à –¥–ª—è service
_sheets_service = None


def get_sheets_service():
    """
    –û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î Google Sheets service
    
    Returns:
        Google Sheets API service
    """
    global _sheets_service
    
    if _sheets_service is not None:
        return _sheets_service
    
    try:
        # –ü–∞—Ä—Å–∏–º–æ credentials –∑ JSON
        # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ò—Å–ø–æ–ª—å–∑—É–≤–∞—Ç–∏ GOOGLE_CREDENTIALS –∑–∞–º—ñ—Å—Ç—å GOOGLE_CREDENTIALS_JSON
        creds_json = config.GOOGLE_CREDENTIALS or os.getenv('GOOGLE_CREDENTIALS', '')
        
        if not creds_json:
            raise ValueError("‚ùå GOOGLE_CREDENTIALS not configured in environment")
        
        # –ü–∞—Ä—Å–∏–º–æ JSON
        creds_dict = json.loads(creds_json)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ credentials
        credentials = service_account.Credentials.from_service_account_info(
            creds_dict,
            scopes=SCOPES
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ service
        _sheets_service = build('sheets', 'v4', credentials=credentials)
        
        logger.info("‚úÖ Google Sheets service initialized successfully")
        return _sheets_service
        
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå Failed to parse GOOGLE_CREDENTIALS JSON: {e}")
        raise
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize Google Sheets service: {e}")
        raise


def get_menu_from_sheet() -> List[Dict[str, Any]]:
    """
    –û—Ç—Ä–∏–º—É—î –º–µ–Ω—é –∑ Google Sheets
    
    –ß–∏—Ç–∞—î –∑ –ª–∏—Å—Ç–∞ "–ú–µ–Ω—é" —ñ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î –ø–æ–ª—è
    
    Returns:
        List of menu items –∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
    """
    try:
        service = get_sheets_service()
        sheet = service.spreadsheets()
        
        # –ß–∏—Ç–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫) - –ª–∏—Å—Ç–∞ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è "–ú–µ–Ω—é"
        headers_result = sheet.values().get(
            spreadsheetId=config.GOOGLE_SHEET_ID,
            range='–ú–µ–Ω—é!A1:L1'  # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –£–∫—Ä–∞—ó–Ω—Å—å–∫–µ —ñ–º'—è –ª–∏—Å—Ç–∞
        ).execute()
        
        headers = headers_result.get('values', [[]])[0]
        
        if not headers:
            logger.error("‚ùå No headers found in '–ú–µ–Ω—é' sheet")
            return []
        
        logger.info(f"üìã Headers found: {headers}")
        
        # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ (–∑ –¥—Ä—É–≥–æ–≥–æ —Ä—è–¥–∫–∞)
        result = sheet.values().get(
            spreadsheetId=config.GOOGLE_SHEET_ID,
            range='–ú–µ–Ω—é!A2:L1000'
        ).execute()
        
        values = result.get('values', [])
        
        if not values:
            logger.warning("‚ö†Ô∏è  No data found in '–ú–µ–Ω—é' sheet")
            return []
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ list of dicts
        raw_menu = []
        for row in values:
            # –î–æ–ø–æ–≤–Ω—é—î–º–æ –ø—É—Å—Ç—ñ –∫–æ–º—ñ—Ä–∫–∏
            if len(row) < len(headers):
                row = row + [''] * (len(headers) - len(row))
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ dict
            item = dict(zip(headers, row))
            
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
            if not any(item.values()):
                continue
            
            raw_menu.append(item)
        
        logger.info(f"üìä Loaded {len(raw_menu)} raw items from sheet")
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø–æ–ª—è —á–µ—Ä–µ–∑ config.normalize_menu_list
        # –ó–∞–º—ñ—Å—Ç—å normalize_menu_list(raw_menu):
normalized_menu = []
for item in raw_menu:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π
    if item.get('–ê–∫—Ç–∏–≤–Ω–∏–π', '').lower() in ['—Ç–∞–∫', 'yes', 'true', '1']:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ü—ñ–Ω—É
        try:
            item['–¶—ñ–Ω–∞'] = float(item.get('–¶—ñ–Ω–∞', 0))
        except:
            item['–¶—ñ–Ω–∞'] = 0
        
        normalized_menu.append(item)

logger.info(f"‚úÖ Menu normalized: {len(normalized_menu)} items")
return normalized_menu
        
        logger.info(f"‚úÖ Menu normalized: {len(normalized_menu)} items")
        return normalized_menu
        
    except HttpError as e:
        logger.error(f"‚ùå HTTP error loading menu: {e}")
        return []
    except Exception as e:
        logger.error(f"‚ùå Failed to load menu from sheets: {e}", exc_info=True)
        return []


def save_order_to_sheets(order_id: str, user_id: int, cart: Dict, contact_info: Dict) -> bool:
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Google Sheets
    
    Args:
        order_id: ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        user_id: Telegram user ID
        cart: –°–ª–æ–≤–Ω–∏–∫ {item_name: quantity}
        contact_info: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è {phone, address, name}
    
    Returns:
        True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
    """
    try:
        service = get_sheets_service()
        sheet = service.spreadsheets()
        
        # Timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ cart –≤ JSON
        cart_json = json.dumps(cart)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º—É
        total_amount = sum(
            float(item.get('price', 0)) * int(qty)
            for item, qty in cart.items()
        )
        
        # –ì–æ—Ç—É—î–º–æ row –¥–ª—è –∑–∞–ø–∏—Å—É
        row = [
            str(order_id),                                  # A: ID_–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            str(user_id),                                   # B: Telegram User ID
            timestamp,                                      # C: –ß–∞—Å_–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            cart_json,                                      # D: –¢–æ–≤–∞—Ä–∏ (JSON)
            round(total_amount, 2),                        # E: –ó–∞–≥–∞–ª—å–Ω–∞_—Å—É–º–∞
            contact_info.get('address', 'N/A'),           # F: –ê–¥—Ä–µ—Å–∞
            contact_info.get('phone', 'N/A'),             # G: –¢–µ–ª–µ—Ñ–æ–Ω
            'card',                                         # H: –°–ø–æ—Å—ñ–±_–æ–ø–ª–∞—Ç–∏
            'pending',                                      # I: –°—Ç–∞—Ç—É—Å
        ]
        
        body = {'values': [row]}
        
        result = sheet.values().append(
            spreadsheetId=config.GOOGLE_SHEET_ID,
            range='–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è!A:I',
            valueInputOption='RAW',
            insertDataOption='INSERT_ROWS',
            body=body
        ).execute()
        
        updated_cells = result.get('updates', {}).get('updatedCells', 0)
        logger.info(f"‚úÖ Order {order_id} saved to sheets: {updated_cells} cells updated")
        
        return True
        
    except HttpError as e:
        logger.error(f"‚ùå HTTP error saving order {order_id}: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Failed to save order {order_id} to sheets: {e}", exc_info=True)
        return False


def get_orders_from_sheet(limit: int = 100) -> List[Dict[str, Any]]:
    """
    –û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ Sheets
    
    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å
    
    Returns:
        List of orders
    """
    try:
        service = get_sheets_service()
        sheet = service.spreadsheets()
        
        # –ß–∏—Ç–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers_result = sheet.values().get(
            spreadsheetId=config.GOOGLE_SHEET_ID,
            range='–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è!A1:I1'
        ).execute()
        
        headers = headers_result.get('values', [[]])[0]
        
        if not headers:
            logger.warning("‚ö†Ô∏è  No headers in '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è' sheet")
            return []
        
        # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ
        result = sheet.values().get(
            spreadsheetId=config.GOOGLE_SHEET_ID,
            range=f'–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è!A2:I{limit + 1}'
        ).execute()
        
        values = result.get('values', [])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ list of dicts
        orders = []
        for row in values:
            if len(row) < len(headers):
                row = row + [''] * (len(headers) - len(row))
            
            order = dict(zip(headers, row))
            orders.append(order)
        
        logger.info(f"üìä Loaded {len(orders)} orders from sheet")
        return orders
        
    except Exception as e:
        logger.error(f"‚ùå Failed to load orders: {e}")
        return []


def test_sheets_connection() -> bool:
    """
    –¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Google Sheets
    
    Returns:
        True —è–∫—â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è OK
    """
    try:
        service = get_sheets_service()
        sheet = service.spreadsheets()
        
        # –ü—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ
        result = sheet.get(spreadsheetId=config.GOOGLE_SHEET_ID).execute()
        title = result.get('properties', {}).get('title', 'Unknown')
        
        logger.info(f"‚úÖ Sheets connection OK. Connected to: '{title}'")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Sheets connection failed: {e}")
        return False


def get_sheet_info() -> Dict[str, Any]:
    """
    –û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—é
    
    Returns:
        Dict –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏ —Ç–∞–±–ª–∏—Ü—ñ
    """
    try:
        service = get_sheets_service()
        sheet = service.spreadsheets()
        
        result = sheet.get(spreadsheetId=config.GOOGLE_SHEET_ID).execute()
        
        sheets_list = [s['properties']['title'] for s in result.get('sheets', [])]
        
        info = {
            'title': result.get('properties', {}).get('title'),
            'sheets': sheets_list,
            'url': f"https://docs.google.com/spreadsheets/d/{config.GOOGLE_SHEET_ID}"
        }
        
        logger.info(f"üìã Sheet info: {info}")
        
        return info
        
    except Exception as e:
        logger.error(f"‚ùå Failed to get sheet info: {e}")
        return {}


# ============================================================================
# EXPORT
# ============================================================================

__all__ = [
    'get_sheets_service',
    'get_menu_from_sheet',
    'save_order_to_sheets',
    'get_orders_from_sheet',
    'test_sheets_connection',
    'get_sheet_info',
]
