import os
import logging
import json
from flask import Flask, request, jsonify
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime

# –Ü–º–ø–æ—Ä—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
from handlers.cart import show_cart, add_item_to_cart, handle_cart_quantity_change, remove_item_from_cart, clear_cart
from handlers.order import start_checkout_process, handle_delivery_type, handle_payment_method, handle_delivery_time, confirm_order, cancel_order
from handlers.budget import handle_budget_input, show_price_ranges, handle_budget_range
from handlers.message_processor import process_text_message

# –Ü–º–ø–æ—Ä—Ç–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤
from services.sheets import init_gspread_client, get_menu_from_sheet, get_categories, get_items_by_category
from services.telegram import tg_send_message, tg_answer_callback, tg_edit_message
from services.gemini import analyze_user_request_with_gemini

# –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥–µ–ª–µ–π
from models.user import init_db, get_state, set_state, get_or_create_user, add_chat_history

try:
    from zoneinfo import ZoneInfo
except ImportError:
    logging.warning("zoneinfo not found. Using naive datetime.")
    ZoneInfo = None

app = Flask(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('ferrik_bot.log')
    ]
)
logger = logging.getLogger("ferrik")

# Thread pool –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏
EXECUTOR = ThreadPoolExecutor(max_workers=5)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "Ferrik123").strip()
GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()
OPERATOR_CHAT_ID = os.environ.get("OPERATOR_CHAT_ID", "").strip()
TIMEZONE_NAME = os.environ.get("TIMEZONE", "Europe/Kyiv").strip()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
logger.info(f"TELEGRAM_TOKEN: {'‚úì' if TELEGRAM_TOKEN else '‚úó'}")
logger.info(f"GOOGLE_SHEET_ID: {'‚úì' if GOOGLE_SHEET_ID else '‚úó'}")
logger.info(f"OPERATOR_CHAT_ID: {'‚úì' if OPERATOR_CHAT_ID else '‚úó'}")

def main_keyboard():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    return {
        "keyboard": [
            [{"text": "üçï –ü—ñ—Ü–∞"}, {"text": "üç£ –°—É—à—ñ"}],
            [{"text": "ü•ó –°–∞–ª–∞—Ç–∏"}, {"text": "ü•§ –ù–∞–ø–æ—ó"}],
            [{"text": "üç∞ –î–µ—Å–µ—Ä—Ç–∏"}, {"text": "üí∞ –ë—é–¥–∂–µ—Ç"}],
            [{"text": "üõí –ú—ñ–π –∫–æ—à–∏–∫"}, {"text": "üìû –û–ø–µ—Ä–∞—Ç–æ—Ä"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def show_menu(chat_id):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"""
    try:
        categories = get_categories()
        if not categories:
            tg_send_message(chat_id, "–ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ üòî")
            return
            
        keyboard = {
            "inline_keyboard": [
                [{"text": f"üçΩÔ∏è {cat}", "callback_data": f"category_{cat}"}] 
                for cat in categories
            ]
        }
        keyboard["inline_keyboard"].append([
            {"text": "üí∞ –ü–æ—à—É–∫ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º", "callback_data": "budget_search"}
        ])
        
        tg_send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing menu: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é")

def show_category_items(chat_id, category):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç—Ä–∞–≤–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        items = get_items_by_category(category)
        
        if not items:
            tg_send_message(chat_id, f"–£ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' –Ω–µ–º–∞—î —Å—Ç—Ä–∞–≤")
            return
            
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å—Ç—Ä–∞–≤
        header = f"üçΩÔ∏è <b>{category}</b> ({len(items)} –ø–æ–∑–∏—Ü—ñ–π):"
        tg_send_message(chat_id, header)
            
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–∂–Ω—É —Å—Ç—Ä–∞–≤—É
        for item in items:
            text = f"<b>{item['name']}</b>\n"
            text += f"üí∞ <b>–¶—ñ–Ω–∞:</b> {item['price']:.2f} –≥—Ä–Ω"
            
            if item.get("description"):
                desc = item['description'][:100] + "..." if len(item['description']) > 100 else item['description']
                text += f"\nüìù {desc}"
            
            if item.get("rating"):
                stars = '‚≠ê' * int(float(item['rating']))
                text += f"\n{stars} {item['rating']}/5"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": f"‚ûï –î–æ–¥–∞—Ç–∏ ({item['price']:.0f} –≥—Ä–Ω)", 
                      "callback_data": f"add_item_{item['ID']}"}]
                ]
            }
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ —Ñ–æ—Ç–æ —è–∫—â–æ —î
            photo_url = item.get("photo", "").strip()
            if photo_url:
                from services.telegram import tg_send_photo
                tg_send_photo(chat_id, photo_url, text, reply_markup=keyboard)
            else:
                tg_send_message(chat_id, text, reply_markup=keyboard)
                
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –Ω–∞–∑–∞–¥
        back_keyboard = {
            "inline_keyboard": [
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", "callback_data": "show_menu"}]
            ]
        }
        tg_send_message(chat_id, "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"Error showing category {category}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")

def generate_personalized_greeting(user_name="–î—Ä—É–∂–µ"):
    """–ì–µ–Ω–µ—Ä—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è"""
    user_name = (user_name or '').strip() or '–î—Ä—É–∂–µ'
    current = datetime.now()
    if ZoneInfo:
        current = datetime.now(ZoneInfo(TIMEZONE_NAME))
    
    hour = current.hour
    time_greeting = (
        '—Ä–∞–Ω–∫—É' if 6 <= hour < 12 else
        '–¥–Ω—è' if 12 <= hour < 18 else '–≤–µ—á–æ—Ä–∞'
    )
    
    greeting = f"–î–æ–±—Ä–æ–≥–æ {time_greeting}, {user_name}! üòä"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    is_open = 9 <= hour < 22
    status = (
        "–†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π! üçΩÔ∏è –ì–æ—Ç–æ–≤—ñ –ø—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è." if is_open else
        "–†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä–∏—Ç–∏–π üòî –ü—Ä–∞—Ü—é—î–º–æ –∑ 9:00 –¥–æ 22:00."
    )
    
    return f"{greeting}\n\n{status}\n\n–Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ FerrikFootBot! –î–æ–ø–æ–º–æ–∂—É –∑ –≤–∏–±–æ—Ä–æ–º —ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º —ó–∂—ñ üçîüçï"

# Webhook –æ–±—Ä–æ–±–Ω–∏–∫
@app.route('/webhook', methods=['POST'])
def webhook():
    """–ì–æ–ª–æ–≤–Ω–∏–π webhook –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å Telegram"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω—É
        header_secret = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
        if WEBHOOK_SECRET and header_secret != WEBHOOK_SECRET:
            logger.warning(f"Invalid webhook secret: {header_secret}")
            return jsonify({"ok": False, "error": "invalid secret"}), 403

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
        data = request.get_json(silent=True)
        if not data:
            logger.warning("Empty webhook data received")
            return jsonify({"status": "empty"}), 200

        logger.info(f"Webhook update: {json.dumps(data, ensure_ascii=False)[:200]}...")

        # –û–±—Ä–æ–±–ª—è—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        EXECUTOR.submit(process_update, data)
        
        return jsonify({"status": "ok"}), 200
        
    except Exception as e:
        logger.exception(f"Webhook error: {e}")
        return jsonify({"status": "error"}), 500

def process_update(data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if "message" in data:
            msg = data["message"]
            chat_id = msg["chat"]["id"]
            user_info = msg.get("from", {})
            text = msg.get("text", "").strip()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            get_or_create_user(
                chat_id,
                user_info.get("username"),
                user_info.get("first_name"),
                user_info.get("last_name")
            )
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç
            if text:
                process_text_message(chat_id, text, user_info)
        
        # –û–±—Ä–æ–±–∫–∞ callback queries
        elif "callback_query" in data:
            cq = data["callback_query"]
            process_callback_query(cq)
            
    except Exception as e:
        logger.exception(f"Error processing update: {e}")

def process_callback_query(cq):
    """–û–±—Ä–æ–±–ª—è—î callback queries"""
    try:
        callback_id = cq.get("id")
        data = cq.get("data", "")
        message = cq.get("message", {})
        chat_id = message.get("chat", {}).get("id")
        user_info = cq.get("from", {})
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        get_or_create_user(
            chat_id,
            user_info.get("username"),
            user_info.get("first_name"),
            user_info.get("last_name")
        )
        
        logger.info(f"Callback query: {data} from {chat_id}")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ callback-—ñ–≤
        if data == "show_menu":
            show_menu(chat_id)
            tg_answer_callback(callback_id)
            
        elif data == "show_cart":
            show_cart(chat_id)
            tg_answer_callback(callback_id)
            
        elif data.startswith("category_"):
            category = data.replace("category_", "")
            show_category_items(chat_id, category)
            tg_answer_callback(callback_id)
            
        elif data.startswith("add_item_"):
            item_id = data.replace("add_item_", "")
            add_item_to_cart(chat_id, item_id)
            tg_answer_callback(callback_id, "–î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞! üõí")
            
        elif data == "budget_search":
            show_price_ranges(chat_id)
            tg_answer_callback(callback_id)
            
        elif data.startswith("budget_range_"):
            handle_budget_range(chat_id, data, callback_id)
            
        elif data == "custom_budget":
            tg_answer_callback(callback_id)
            tg_send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –±—é–¥–∂–µ—Ç (–≤ –≥—Ä–∏–≤–Ω—è—Ö):")
            set_state(chat_id, "awaiting_budget")
            
        elif data == "checkout":
            start_checkout_process(chat_id)
            tg_answer_callback(callback_id)
            
        elif data == "contact_operator":
            tg_send_message(chat_id, "–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:")
            set_state(chat_id, "awaiting_operator_message")
            tg_answer_callback(callback_id)
            
        elif data == "leave_feedback":
            tg_send_message(chat_id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:")
            set_state(chat_id, "awaiting_feedback")
            tg_answer_callback(callback_id)
            
        # –û–±—Ä–æ–±–∫–∞ –∫–æ—à–∏–∫–∞
        elif data.startswith("qty_"):
            handle_cart_callbacks(chat_id, data, callback_id)
            
        elif data.startswith("remove_item_"):
            idx = int(data.replace("remove_item_", ""))
            remove_item_from_cart(chat_id, idx, callback_id)
            
        elif data == "clear_cart":
            clear_cart(chat_id, callback_id)
            
        # –û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        elif data.startswith("delivery_type_"):
            delivery_type = data.replace("delivery_type_", "")
            handle_delivery_type(chat_id, delivery_type, callback_id)
            
        elif data.startswith("payment_"):
            payment_method = data.replace("payment_", "")
            handle_payment_method(chat_id, payment_method, callback_id)
            
        elif data.startswith("delivery_time_"):
            delivery_time = data.replace("delivery_time_", "")
            handle_delivery_time(chat_id, delivery_time, callback_id)
            
        elif data == "confirm_order":
            confirm_order(chat_id, callback_id)
            
        elif data == "cancel_order":
            cancel_order(chat_id, callback_id)
            
        else:
            logger.warning(f"Unhandled callback: {data}")
            tg_answer_callback(callback_id, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.exception(f"Error processing callback query: {e}")
        tg_answer_callback(cq.get("id", ""), "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏")

def handle_cart_callbacks(chat_id, data, callback_id):
    """–û–±—Ä–æ–±–ª—è—î callback-–∏ –¥–ª—è –∫–æ—à–∏–∫–∞"""
    try:
        if data.startswith("qty_plus_"):
            idx = int(data.replace("qty_plus_", ""))
            handle_cart_quantity_change(chat_id, "plus", idx, callback_id)
        elif data.startswith("qty_minus_"):
            idx = int(data.replace("qty_minus_", ""))
            handle_cart_quantity_change(chat_id, "minus", idx, callback_id)
        elif data.startswith("qty_info_"):
            # –ü—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback
            tg_answer_callback(callback_id)
            
    except Exception as e:
        logger.error(f"Error handling cart callback: {e}")
        tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞")

# Health check
@app.route("/health", methods=["GET"])
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "ok",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0.0",
        "components": {
            "database": "ok",
            "google_sheets": "ok" if init_gspread_client() else "error",
            "telegram": "ok" if TELEGRAM_TOKEN else "error"
        }
    })

# Root endpoint
@app.route("/", methods=["GET"])
def root():
    """Root endpoint –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ API"""
    return jsonify({
        "name": "FerrikFootBot API",
        "version": "2.0.0",
        "status": "running",
        "features": [
            "AI-powered recommendations",
            "Budget-based search", 
            "Multi-category menu",
            "Smart cart management",
            "Complete order flow"
        ],
        "endpoints": ["/webhook", "/health", "/set_webhook"]
    })

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook URL"""
    if not TELEGRAM_TOKEN:
        return jsonify({"ok": False, "error": "TELEGRAM_TOKEN not set"}), 400
    
    webhook_url = request.args.get('url')
    if not webhook_url:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î–º–æ URL
        base_url = os.environ.get("RENDER_EXTERNAL_URL") or f"https://{request.host}"
        webhook_url = f"{base_url}/webhook"
    
    try:
        import requests
        response = requests.get(
            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
            params={
                "url": webhook_url,
                "secret_token": WEBHOOK_SECRET
            },
            timeout=10
        )
        return jsonify(response.json())
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
with app.app_context():
    logger.info("üöÄ FerrikFootBot starting...")
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        if init_db():
            logger.info("‚úÖ Database initialized")
        else:
            logger.error("‚ùå Database initialization failed")
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
        if init_gspread_client():
            logger.info("‚úÖ Google Sheets connected")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω—é –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
            menu_items = get_menu_from_sheet(force=True)
            logger.info(f"‚úÖ Menu cached: {len(menu_items)} items")
        else:
            logger.error("‚ùå Google Sheets connection failed")
        
        logger.info("üéâ FerrikFootBot ready!")
        
    except Exception as e:
        logger.exception(f"‚ùå Startup error: {e}")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    debug_mode = os.environ.get("FLASK_DEBUG", "false").lower() == "true"
    
    logger.info(f"Starting server on port {port}, debug={debug_mode}")
    app.run(host="0.0.0.0", port=port, debug=debug_mode)