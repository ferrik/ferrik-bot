# main.py ‚Äî Ferrik minimal in-memory bot (Part 1)
from flask import Flask, request, jsonify
import os
import requests
import json
import uuid
import logging

app = Flask(__name__)

# CONFIG from environment (set on Render)
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")  # set this in Render env
TELEGRAM_SECRET_TOKEN = os.environ.get("TELEGRAM_SECRET_TOKEN", "Ferrik123!")  # set same when setWebhook
API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

# logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("ferrik_minimal")

# --- In-memory sample data (MVP) ---
RESTAURANTS = {
    "1": {
        "name": "–ü—ñ—Ü–µ—Ä—ñ—è –ù–∞–ø–æ–ª—ñ üçï",
        "menu": [
            {"id": "1_1", "name": "–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "price": 150},
            {"id": "1_2", "name": "–ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ", "price": 180}
        ]
    },
    "2": {
        "name": "–°—É—à—ñ –ú–∞–π—Å—Ç–µ—Ä üç£",
        "menu": [
            {"id": "2_1", "name": "–ö–∞–ª—ñ—Ñ–æ—Ä–Ω—ñ—è —Ä–æ–ª", "price": 220},
            {"id": "2_2", "name": "–§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è", "price": 250}
        ]
    }
}

# carts stored in memory: {telegram_id: [item_dict, ...]}
CARTS = {}

# --- Telegram helper functions ---
def send_message(chat_id, text, reply_markup=None, parse_mode=None):
    payload = {"chat_id": chat_id, "text": text}
    if reply_markup is not None:
        # Telegram expects reply_markup as JSON string
        payload["reply_markup"] = json.dumps(reply_markup)
    if parse_mode:
        payload["parse_mode"] = parse_mode
    try:
        r = requests.post(f"{API_URL}/sendMessage", json=payload, timeout=8)
        logger.info("sendMessage status %s", r.status_code)
        return r.json()
    except Exception as e:
        logger.exception("send_message error: %s", e)
        return None

def edit_message(chat_id, message_id, text, reply_markup=None, parse_mode=None):
    payload = {"chat_id": chat_id, "message_id": message_id, "text": text}
    if reply_markup is not None:
        payload["reply_markup"] = json.dumps(reply_markup)
    if parse_mode:
        payload["parse_mode"] = parse_mode
    try:
        r = requests.post(f"{API_URL}/editMessageText", json=payload, timeout=8)
        logger.info("editMessage status %s", r.status_code)
        return r.json()
    except Exception as e:
        logger.exception("edit_message error: %s", e)
        return None

def answer_callback(callback_id, text=None):
    payload = {"callback_query_id": callback_id}
    if text:
        payload["text"] = text
    try:
        r = requests.post(f"{API_URL}/answerCallbackQuery", json=payload, timeout=5)
        return r.json()
    except Exception as e:
        logger.exception("answer_callback error: %s", e)
        return None

# helper to create inline keyboard from rows of buttons
def make_inline_keyboard(rows):
    return {"inline_keyboard": rows}

# --- Webhook endpoint ---
@app.route("/telegram/webhook", methods=["POST"])
def webhook():
    # verify secret header (Telegram sets X-Telegram-Bot-Api-Secret-Token when using secret_token)
    header = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if TELEGRAM_SECRET_TOKEN and header != TELEGRAM_SECRET_TOKEN:
        logger.warning("Invalid secret header: %s", header)
        return jsonify({"ok": False, "error": "invalid secret"}), 403

    update = request.get_json(force=True)
    logger.info("Update received keys: %s", list(update.keys()))
    try:
        # handle message
        if "message" in update:
            msg = update["message"]
            chat_id = msg["chat"]["id"]
            text = msg.get("text", "").strip()
            user_name = msg.get("from", {}).get("first_name", "")
            handle_text(chat_id, text, user_name)

        # handle callback_query
        if "callback_query" in update:
            cq = update["callback_query"]
            handle_callback(cq)

        return jsonify({"ok": True})
    except Exception as e:
        logger.exception("Webhook processing failed: %s", e)
        return jsonify({"ok": False, "error": str(e)}), 500

# --- Text handler (simple commands and free text) ---
def handle_text(chat_id, text, user_name):
    text_l = (text or "").lower()
    # start / greeting
    if text_l in ["/start", "start", "–ø—Ä–∏–≤—ñ—Ç", "hi", "hello"]:
        reply = (f"–ü—Ä–∏–≤—ñ—Ç {user_name or ''}! üëã\n\n"
                 "–Ø ‚Äî Ferrik üçΩÔ∏è. –ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É.\n\n"
                 "üìå –ö–æ–º–∞–Ω–¥–∏:\n"
                 "‚Ä¢ /menu ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–∫–ª–∞–¥–∏\n"
                 "‚Ä¢ '–∫–æ—à–∏–∫' ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ –º—ñ–π –∫–æ—à–∏–∫\n"
                 "‚Ä¢ –ù–∞–ø–∏—à–∏ –ø–æ—à—É–∫: –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ‚Äî \"–ø—ñ—Ü–∞ –∑ –∫—É—Ä–∫–æ—é –¥–æ 200 –≥—Ä–Ω\"\n\n–ë–∞–∂–∞—î—à –ø–æ—á–∞—Ç–∏? üòä")
        send_message(chat_id, reply)
        return

    # show restaurants
    if text_l in ["/menu", "menu", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ üçΩÔ∏è", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏üçΩÔ∏è"]:
        rows = []
        for rid, r in RESTAURANTS.items():
            rows.append([{"text": r["name"], "callback_data": f"rest_{rid}"}])
        send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω —É –¢–µ—Ä–Ω–æ–ø–æ–ª—ñ:", reply_markup=make_inline_keyboard(rows))
        return

    # show cart
    if text_l in ["–∫–æ—à–∏–∫", "–º—ñ–π –∫–æ—à–∏–∫", "cart"]:
        show_cart(chat_id)
        return

    # naive free-text handling (we'll replace with Gemini in Part 3)
    # simple keyword: if contains '–ø—ñ—Ü–∞' show pizzas across restaurants
    if "–ø—ñ—Ü–∞" in text_l or "pizza" in text_l:
        # collect pizza dishes
        rows = []
        for rid, r in RESTAURANTS.items():
            for item in r["menu"]:
                if "–ø—ñ—Ü–∞" in item["name"].lower() or "pizza" in item["name"].lower() or "–ø—ñ—Ü–∞" in item.get("category", ""):
                    rows.append([{"text": f"{item['name']} ‚Äî {item['price']} –≥—Ä–Ω", "callback_data": f"add_{item['id']}"}])
        if rows:
            send_message(chat_id, "–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü—ñ—ó (–ø—ñ—Ü–∞):", reply_markup=make_inline_keyboard(rows))
            return

    # fallback: help
    send_message(chat_id, "–í–∏–±–∞—á, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ /menu –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ —à—É–∫–∞—î—Ç–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–ø—ñ—Ü–∞').")

# --- Callback handler (inline buttons) ---
def handle_callback(cq):
    data = cq.get("data")
    callback_id = cq.get("id")
    message = cq.get("message") or {}
    chat = message.get("chat", {})
    chat_id = chat.get("id")
    message_id = message.get("message_id")

    logger.info("Callback data: %s", data)

    if not data or not chat_id:
        answer_callback(callback_id)
        return

    # restaurant selected -> show menu
    if data.startswith("rest_"):
        rest_id = data.split("_", 1)[1]
        rest = RESTAURANTS.get(rest_id)
        if not rest:
            send_message(chat_id, "‚ùó –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            answer_callback(callback_id)
            return
        rows = []
        for item in rest["menu"]:
            rows.append([{"text": f"{item['name']} ‚Äî {item['price']} –≥—Ä–Ω", "callback_data": f"add_{item['id']}"}])
        # extra buttons
        rows.append([{"text": "üì• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "view_cart"}])
        rows.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∑–∞–∫–ª–∞–¥—ñ–≤", "callback_data": "back_to_menu"}])
        edit_message(chat_id, message_id, f"–ú–µ–Ω—é {rest['name']}:", reply_markup=make_inline_keyboard(rows))
        answer_callback(callback_id)
        return

    # add item to cart
    if data.startswith("add_"):
        item_id = data.split("_", 1)[1]  # e.g. "1_1"
        item = None
        for r in RESTAURANTS.values():
            for it in r["menu"]:
                if it["id"] == item_id:
                    item = it; break
            if item: break
        if not item:
            send_message(chat_id, "‚ùó –°—Ç—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            answer_callback(callback_id)
            return
        # add to cart
        CARTS.setdefault(str(chat_id), []).append(item)
        send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞: {item['name']} ‚Äî {item['price']} –≥—Ä–Ω")
        answer_callback(callback_id, text="–î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞ ‚úÖ")
        return

    if data == "view_cart":
        show_cart(chat_id)
        answer_callback(callback_id)
        return

    if data == "clear_cart":
        CARTS[str(chat_id)] = []
        send_message(chat_id, "üóëÔ∏è –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")
        answer_callback(callback_id)
        return

    if data == "order_confirm":
        # create a simple fake order id
        items = CARTS.get(str(chat_id), [])
        if not items:
            send_message(chat_id, "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –Ω–µ–º–∞—î —á–æ–≥–æ –∑–∞–º–æ–≤–ª—è—Ç–∏.")
            answer_callback(callback_id)
            return
        total = sum(i["price"] for i in items)
        order_id = str(uuid.uuid4())[:8]
        CARTS[str(chat_id)] = []
        send_message(chat_id, f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_id} –ø—Ä–∏–π–Ω—è—Ç–æ!\n–°—É–º–∞: {total} –≥—Ä–Ω\n–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. ‚òéÔ∏è")
        logger.info("New order %s from %s total=%s", order_id, chat_id, total)
        answer_callback(callback_id)
        return

    if data == "back_to_menu":
        # simulate /menu
        rows = []
        for rid, r in RESTAURANTS.items():
            rows.append([{"text": r["name"], "callback_data": f"rest_{rid}"}])
        edit_message(chat_id, message_id, "–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=make_inline_keyboard(rows))
        answer_callback(callback_id)
        return

    # default
    answer_callback(callback_id)

# --- show_cart helper ---
def show_cart(chat_id):
    items = CARTS.get(str(chat_id), [])
    if not items:
        send_message(chat_id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    lines = []
    total = 0
    for it in items:
        lines.append(f"‚Ä¢ {it['name']} ‚Äî {it['price']} –≥—Ä–Ω")
        total += it["price"]
    text = "üõí –í–∞—à –∫–æ—à–∏–∫:\n" + "\n".join(lines) + f"\n\n*–ó–∞–≥–∞–ª–æ–º: {total} –≥—Ä–Ω*"
    rows = [
        [{"text": "üìù –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "callback_data": "order_confirm"}],
        [{"text": "üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "clear_cart"}],
        [{"text": "‚¨ÖÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–±—ñ—Ä", "callback_data": "back_to_menu"}]
    ]
    send_message(chat_id, text, reply_markup=make_inline_keyboard(rows), parse_mode="Markdown")

# --- health ---
@app.route("/health")
def health():
    return jsonify({"status": "ok"})

# small index
@app.route("/")
def index():
    return "Ferrik minimal bot running."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info("Starting Ferrik minimal on port %s", port)
    app.run(host="0.0.0.0", port=port)
