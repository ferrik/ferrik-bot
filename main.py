import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime
import requests # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–∞–≥–ª—É—à–æ–∫, —è–∫—â–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—è
WEBHOOK_SECRET = ""
BOT_TOKEN = ""
WEBHOOK_URL = ""

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
logger.info("üöÄ Starting FerrikFootBot...")

try:
    # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –î–æ–¥–∞—î–º–æ WEBHOOK_SECRET, WEBHOOK_URL, —Ç–∞ OPERATOR_CHAT_ID –¥–æ —ñ–º–ø–æ—Ä—Ç—É
    from config import (
        BOT_TOKEN, WEBHOOK_SECRET, GEMINI_API_KEY, SPREADSHEET_ID,
        OPERATOR_CHAT_ID, WEBHOOK_URL
    )
    logger.info("‚úÖ Config imported successfully")
except Exception as e:
    logger.error(f"‚ùå Config import error: {e}")
    # –ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å, —è–∫—â–æ config.py –Ω–µ –∑–º—ñ–≥ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
    logger.warning("Using empty strings for critical configs due to import failure.")
    
try:
    from services.sheets import init_gspread_client, get_menu_from_sheet, save_order_to_sheets, is_sheets_connected
    logger.info("‚úÖ Sheets service imported")
except Exception as e:
    logger.error(f"‚ùå Sheets import error: {e}")
    
try:
    from services.gemini import init_gemini_client, get_ai_response, is_gemini_connected
    logger.info("‚úÖ Gemini service imported")
except Exception as e:
    logger.error(f"‚ùå Gemini import error: {e}")

try:
    from models.user import init_user_db, get_user, create_user
    logger.info("‚úÖ User model imported")
except Exception as e:
    logger.error(f"‚ùå User model import error: {e}")


# ========== Telegram API Helpers (–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å BOT_TOKEN) ==========

def send_message(chat_id, text, reply_markup=None):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API."""
    try:
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN not found in send_message")
            return None
        
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        if reply_markup:
            import json
            payload["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå Send message error: {e}")
        return None

def answer_callback(callback_id, text):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ callback query."""
    try:
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN not found in answer_callback")
            return
            
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
        
        payload = {
            "callback_query_id": callback_id,
            "text": text
        }
        
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        logger.error(f"‚ùå Answer callback error: {e}")


# ========== Webhook —Ç–∞ –†–æ—É—Ç–∏ Flask ==========

@app.route("/health", methods=["GET"])
def health_check():
    """Health check endpoint for Render/uptime monitoring."""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π, –æ—Å–∫—ñ–ª—å–∫–∏ —ñ–º–ø–æ—Ä—Ç –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–≤–¥–∞–ª–∏–º
    status = {
        "status": "ok",
        "timestamp": datetime.now().isoformat(),
        "sheets_connected": is_sheets_connected() if 'is_sheets_connected' in locals() else False,
        "gemini_connected": is_gemini_connected() if 'is_gemini_connected' in locals() else False,
    }
    return jsonify(status)

@app.route("/keep-alive", methods=["GET"])
def keep_alive():
    """Endpoint –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞ (Render free plan)"""
    return jsonify({"status": "i'm alive", "time": datetime.now().isoformat()})

# –û—Å–Ω–æ–≤–Ω–∏–π Webhook –¥–ª—è Telegram
@app.route("/webhook", methods=["POST"])
def webhook():
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram"""
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω—É (–ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤)
    # –í–ò–ü–†–ê–í–õ–ï–ù–û: WEBHOOK_SECRET —Ç–µ–ø–µ—Ä —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è —ñ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—É—Ç.
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != WEBHOOK_SECRET:
        logger.warning("‚ùå Webhook call with invalid secret token")
        return jsonify({"status": "Invalid secret token"}), 403

    # 2. –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    try:
        data = request.get_json(force=True)
        if not data:
            raise ValueError("Empty or invalid JSON data")
        
        # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó-–æ–±—Ä–æ–±–Ω–∏–∫–∞
        process_update(data)
        
        return jsonify({"status": "ok"}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook processing error: {e}")
        return jsonify({"status": "Internal Error"}), 500

def process_update(update):
    """–ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω—å Telegram (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞. –¢—É—Ç –º–∞—î –±—É—Ç–∏ –≤–∏–∫–ª–∏–∫ —Ä–µ–∞–ª—å–Ω–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤.
    if 'message' in update:
        message = update['message']
        chat_id = message['chat']['id']
        text = message.get('text')
        user_name = message.get('from', {}).get('first_name', '–î—Ä—É–∂–µ')
        
        logger.info(f"‚û°Ô∏è Message from {chat_id} ({user_name}): {text}")

        # ... (–õ–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î send_message)
        send_message(chat_id, f"–û—Ç—Ä–∏–º–∞–Ω–æ: **{text}**")
            
    elif 'callback_query' in update:
        callback_query = update['callback_query']
        callback_id = callback_query['id']
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']
        
        logger.info(f"‚û°Ô∏è Callback from {chat_id}: {data}")
        
        answer_callback(callback_id, f"–í–∏–±—Ä–∞–Ω–æ: {data}")
        send_message(chat_id, f"–í–∏–±—Ä–∞–Ω–æ: **{data}**")

# ========== –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Flask ==========

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {error}")
    return jsonify({"error": "Internal server error"}), 500


# ========== –ó–∞–ø—É—Å–∫ —ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ==========

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏"""
    logger.info("Running service initialization...")
    # –¢—É—Ç –º–∞—é—Ç—å –±—É—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –≤–∏–∫–ª–∏–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î, Sheets, Gemini
    logger.info("Services initialization finished.")


with app.app_context():
    try:
        init_services() 
        logger.info("‚úÖ Services initialization completed.")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≤ production
        if WEBHOOK_URL and BOT_TOKEN and WEBHOOK_SECRET:
            response = requests.get(
                f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                params={
                    "url": WEBHOOK_URL,
                    "secret_token": WEBHOOK_SECRET
                },
                timeout=10
            )
            logger.info(f"Webhook set response: {response.json()}")
        
    except Exception as e:
        logger.exception(f"‚ùå Critical startup error: {e}")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    debug_mode = os.environ.get("FLASK_DEBUG", "false").lower() == "true"
    
    if debug_mode:
        app.run(host="0.0.0.0", port=port, debug=True)
