import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime
import json
from werkzeug.exceptions import BadRequest

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# ====================================================================
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ –°–µ—Ä–≤—ñ—Å—ñ–≤
# ====================================================================

logger.info("üöÄ Starting FerrikFootBot...")

# 1. –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
try:
    from config import BOT_TOKEN, WEBHOOK_SECRET, RENDER_URL
    from config import PORT, DEBUG # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ DEBUG —Ç–∞ PORT –¥–ª—è –∑–∞–ø—É—Å–∫—É
    logger.info("‚úÖ Config imported successfully")
except Exception as e:
    logger.error(f"‚ùå Config import error: {e}. Using fallback values. Check config.py for details.")
    # Fallback placeholders to prevent startup crash if config fails to import
    BOT_TOKEN = os.environ.get('BOT_TOKEN', 'fallback_token')
    WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET', 'fallback_secret')
    RENDER_URL = os.environ.get('WEBHOOK_URL', 'https://fallback-url.com').replace('/webhook', '')
    PORT = int(os.environ.get('PORT', 5000))
    DEBUG = os.environ.get('FLASK_DEBUG', 'false').lower() == 'true'

# 2. –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É Telegram —Å–µ—Ä–≤—ñ—Å—É
try:
    from services.telegram import tg_send_message, tg_answer_callback, tg_set_webhook
    logger.info("‚úÖ Telegram service imported")
except Exception as e:
    logger.error(f"‚ùå Telegram service import error: {e}")
    # Fallback for core communication if import fails
    def tg_send_message(*args, **kwargs): logger.error("Telegram send fallback called."); return None
    def tg_answer_callback(*args, **kwargs): logger.error("Telegram answer fallback called.")
    def tg_set_webhook(*args, **kwargs): logger.error("Telegram set webhook fallback called."); return {"ok": False, "error": "Telegram service import failed"}


# ====================================================================
# Health Check and Keep-Alive Endpoints
# ====================================================================

@app.route("/health", methods=["GET"])
def health_check():
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π health check endpoint. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î 200 OK."""
    return jsonify({"status": "ok", "timestamp": datetime.now().isoformat()}), 200

@app.route("/keep-alive", methods=["GET"])
def keep_alive():
    """–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π endpoint –¥–ª—è Render/GitHub Actions –¥–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î 200 OK."""
    status = {
        "status": "alive",
        "timestamp": datetime.now().isoformat(),
        "config_loaded": BOT_TOKEN != 'fallback_token' # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    }
    return jsonify(status), 200

# ====================================================================
# Webhook Handling
# ====================================================================

@app.route(f"/{WEBHOOK_SECRET}", methods=["POST"])
def webhook():
    """–ì–æ–ª–æ–≤–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram."""
    
    # 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        logger.warning("‚ùå Webhook call with invalid secret token")
        return jsonify({"ok": False, "error": "Invalid secret token"}), 403

    try:
        update = request.get_json(force=True)
        if not update:
            raise BadRequest("Invalid or empty request body")
        
        logger.info(f"Received update from chat: {update.get('message', {}).get('chat', {}).get('id', 'N/A')}")
        
        # --- Simplified Logic for demonstration/testing ---
        
        if "message" in update and "text" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            user_text = update["message"]["text"]
            # –ó–∞–≥–ª—É—à–∫–∞: —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç—É—Ç
            tg_send_message(chat_id, f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: <b>{user_text}</b>. Webhook –ø—Ä–∞—Ü—é—î!")
            
        elif "callback_query" in update:
            callback_query = update["callback_query"]
            data = callback_query["data"]
            # –ó–∞–≥–ª—É—à–∫–∞: —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback-—ñ–≤ —Ç—É—Ç
            tg_answer_callback(callback_query["id"], f"–û–±—Ä–∞–Ω–æ: {data}")

        # --- End Simplified Logic ---

    except BadRequest as e:
        logger.error(f"‚ùå Bad request error: {e}")
        return jsonify({"ok": False, "error": "Bad Request"}), 400
    except Exception as e:
        logger.exception(f"‚ùå Unhandled error during webhook processing: {e}")
        return jsonify({"ok": False, "error": "Internal Server Error"}), 500

    return jsonify({"ok": True}), 200

# ====================================================================
# Webhook Setup Endpoint (for manual setup or testing)
# ====================================================================

@app.route("/set-webhook", methods=["GET"])
def set_webhook_route():
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∑ —Å–µ—Ä–≤—ñ—Å—É."""
    if not RENDER_URL:
        return jsonify({"ok": False, "error": "RENDER_URL is not set in config"}), 500
        
    logger.info(f"Attempting to set webhook to: {RENDER_URL}/{WEBHOOK_SECRET}")
    response_data = tg_set_webhook(RENDER_URL)
    return jsonify(response_data)


# ====================================================================
# Initialization and Startup Logic
# ====================================================================

def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ (DB, Sheets, Gemini)"""
    logger.info("Running service initialization...")
    
    # –¢—É—Ç –º–∞—î –±—É—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—è –ª–æ–≥—ñ–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:
    # 1. –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: init_user_db()
    # 2. Google Sheets: init_gspread_client()
    # 3. Gemini AI: init_gemini_client()
    
    logger.info("Services initialization finished.")
    return True


with app.app_context():
    try:
        from config import log_config
        log_config()
    except Exception:
        # –£ –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ –Ω–∞–≤—ñ—Ç—å fallback config –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
        logger.error("‚ùå Failed to run log_config function.")

    logger.info("Starting up FerrikFootBot...")
    
    # –í–∏–∫–æ–Ω—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    if init_services():
        logger.info("üéâ FerrikFootBot ready to handle webhooks!")
    else:
        logger.error("‚ùå FerrikFootBot startup failed!")

if __name__ == "__main__":
    
    if DEBUG:
        app.run(host="0.0.0.0", port=PORT, debug=True)
    else:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≤ production
        logger.info("Running in production mode. Relying on external webhook setup.")
