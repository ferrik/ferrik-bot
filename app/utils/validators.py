"""
üõ°Ô∏è –í–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏ —Ç–∞ –ø–∞—Ä—Å–µ—Ä–∏ –¥–∞–Ω–∏—Ö
–û–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º
"""
import re
import logging
from typing import Any, Optional, Dict, List
from datetime import datetime

logger = logging.getLogger(__name__)


# ============================================================================
# –ü–∞—Ä—Å–∏–Ω–≥ —Ü—ñ–Ω —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
# ============================================================================

def safe_parse_price(value: Any) -> float:
    """
    –ë–µ–∑–ø–µ—á–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Ü—ñ–Ω—É –∑ –±—É–¥—å-—è–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    
    –ü—Ä–∏–∫–ª–∞–¥–∏:
        "30 –≥—Ä–Ω" -> 30.0
        "45,5" -> 45.5
        "120.50 –≥—Ä–Ω" -> 120.5
        None -> 0.0
        "" -> 0.0
        "invalid" -> 0.0
    """
    if value is None or value == '':
        return 0.0
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ä—è–¥–æ–∫ —Ç–∞ –æ—á–∏—â—É—î–º–æ
        clean = str(value).strip()
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ–∫—Å—Ç (–≥—Ä–Ω, uah, —Ç–æ—â–æ)
        clean = re.sub(r'[^\d.,\-]', '', clean)
        
        # –ó–∞–º—ñ–Ω–∞ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫—É
        clean = clean.replace(',', '.')
        
        # –Ø–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
        if not clean or clean == '.':
            return 0.0
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ float
        result = float(clean)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å (–∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫)
        if result < 0:
            logger.warning(f"‚ö†Ô∏è Negative price detected: {value} -> {result}")
            return 0.0
        
        if result > 1000000:  # 1 –º–ª–Ω - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
            logger.warning(f"‚ö†Ô∏è Unrealistic price: {value} -> {result}")
            return 0.0
            
        return result
        
    except (ValueError, TypeError) as e:
        logger.warning(f"‚ùå Invalid price format: {value} -> {e}")
        return 0.0


def safe_parse_quantity(value: Any) -> int:
    """–ë–µ–∑–ø–µ—á–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å"""
    if value is None or value == '':
        return 0
    
    try:
        qty = int(float(str(value)))
        return max(0, min(qty, 999))  # 0-999
    except (ValueError, TypeError):
        logger.warning(f"‚ùå Invalid quantity: {value}")
        return 0


def calculate_total_price(items: List[Dict[str, Any]]) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    total = 0.0
    for item in items:
        price = safe_parse_price(item.get('price', 0))
        quantity = safe_parse_quantity(item.get('quantity', 1))
        total += price * quantity
    return round(total, 2)


# ============================================================================
# –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
# ============================================================================

def validate_phone(phone: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    
    –§–æ—Ä–º–∞—Ç–∏:
        +380501234567
        0501234567
        380501234567
    """
    if not phone:
        return False
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏
    clean = re.sub(r'\D', '', phone)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
    if len(clean) == 10 and clean.startswith('0'):
        return True  # 0501234567
    
    if len(clean) == 12 and clean.startswith('380'):
        return True  # 380501234567
    
    if len(clean) == 9:  # –±–µ–∑ 0 –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        return True  # 501234567
    
    return False


def normalize_phone(phone: str) -> Optional[str]:
    """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–æ —Ñ–æ—Ä–º–∞—Ç—É +380XXXXXXXXX"""
    if not phone:
        return None
    
    clean = re.sub(r'\D', '', phone)
    
    if len(clean) == 10 and clean.startswith('0'):
        return f"+38{clean}"
    
    if len(clean) == 12 and clean.startswith('380'):
        return f"+{clean}"
    
    if len(clean) == 9:  # –±–µ–∑ 0 –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        return f"+380{clean}"
    
    return None


def format_phone_display(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è: +380 (50) 123-45-67"""
    normalized = normalize_phone(phone)
    if not normalized:
        return phone
    
    # +380501234567 -> +380 (50) 123-45-67
    if len(normalized) == 13:
        return f"{normalized[:4]} ({normalized[4:6]}) {normalized[6:9]}-{normalized[9:11]}-{normalized[11:]}"
    
    return normalized


# ============================================================================
# –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏
# ============================================================================

def validate_address(address: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if not address or len(address.strip()) < 10:
        return False
    
    # –ú–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É (–Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É)
    if not re.search(r'\d', address):
        return False
    
    return True


def parse_address(address: str) -> Dict[str, str]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
    
    –ü—Ä–∏–∫–ª–∞–¥: "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 5" ->
    {
        'street': '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫',
        'building': '1',
        'apartment': '5',
        'full': '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 5'
    }
    """
    result = {
        'street': '',
        'building': '',
        'apartment': '',
        'full': address.strip()
    }
    
    if not address:
        return result
    
    # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É
    apt_match = re.search(r'–∫–≤\.?\s*(\d+)', address, re.IGNORECASE)
    if apt_match:
        result['apartment'] = apt_match.group(1)
    
    # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É
    building_match = re.search(r',\s*(\d+[–∞-—è–ê-–Ø]?)\s*[,.]?', address)
    if building_match:
        result['building'] = building_match.group(1)
    
    # –í—É–ª–∏—Ü—è - –≤—Å–µ –¥–æ –ø–µ—Ä—à–æ—ó –∫–æ–º–∏ –∞–±–æ —Ü–∏—Ñ—Ä–∏
    street_match = re.match(r'^([^,]+?)(?=\s*,|\s*\d)', address)
    if street_match:
        result['street'] = street_match.group(1).strip()
    
    return result


# ============================================================================
# –û—á–∏—â–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è
# ============================================================================

def sanitize_input(text: str, max_length: int = 500) -> str:
    """–û—á–∏—â–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
    if not text:
        return ""
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
    text = text[:max_length]
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è HTML —Ç–µ–≥—ñ–≤ (–±–∞–∑–æ–≤–∏–π –∑–∞—Ö–∏—Å—Ç)
    text = re.sub(r'<[^>]+>', '', text)
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–µ—Ä—É—é—á–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    text = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', text)
    
    return text.strip()


def validate_text_length(text: str, min_len: int = 1, max_len: int = 500) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É"""
    if not text:
        return min_len == 0
    
    length = len(text.strip())
    return min_len <= length <= max_len


# ============================================================================
# –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—É
# ============================================================================

def validate_item_data(item: dict) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—É –∑ Google Sheets
    
    Required fields: id, name, price
    """
    required_fields = ['id', 'name', 'price']
    
    for field in required_fields:
        if field not in item or not item[field]:
            logger.error(f"‚ùå Missing required field '{field}' in item: {item}")
            return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω–∏
    price = safe_parse_price(item['price'])
    if price <= 0:
        logger.error(f"‚ùå Invalid price for item: {item}")
        return False
    
    return True


def validate_order_data(order: dict) -> tuple[bool, Optional[str]]:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    
    Returns:
        (is_valid, error_message)
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    if not order.get('items') or len(order['items']) == 0:
        return False, "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤"
    
    if not order.get('phone'):
        return False, "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
    
    if not validate_phone(order['phone']):
        return False, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É"
    
    if not order.get('address'):
        return False, "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏"
    
    if not validate_address(order['address']):
        return False, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–∞—î –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ –º—ñ—Å—Ç–∏—Ç–∏ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É)"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤
    for item in order['items']:
        if not validate_item_data(item):
            return False, f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É: {item.get('name', 'Unknown')}"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    total = calculate_total_price(order['items'])
    if total <= 0:
        return False, "‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0"
    
    return True, None


# ============================================================================
# –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
# ============================================================================

def validate_email(email: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è email"""
    if not email:
        return False
    
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))


# ============================================================================
# –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É
# ============================================================================

def validate_delivery_time(time_str: str) -> bool:
    """
    –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
    
    –§–æ—Ä–º–∞—Ç–∏: "14:30", "09:00"
    """
    if not time_str:
        return False
    
    pattern = r'^([01]\d|2[0-3]):([0-5]\d)$'
    return bool(re.match(pattern, time_str))


def parse_delivery_time(time_str: str) -> Optional[tuple[int, int]]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
    
    Returns: (hour, minute) or None
    """
    if not validate_delivery_time(time_str):
        return None
    
    hour, minute = map(int, time_str.split(':'))
    return (hour, minute)


# ============================================================================
# Helpers –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
# ============================================================================

def format_price(price: float, currency: str = "–≥—Ä–Ω") -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    return f"{price:.2f} {currency}"


def format_order_summary(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    lines = ["üì¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"]
    
    for idx, item in enumerate(order.get('items', []), 1):
        name = item.get('name', 'Unknown')
        price = safe_parse_price(item.get('price', 0))
        quantity = safe_parse_quantity(item.get('quantity', 1))
        total = price * quantity
        
        lines.append(f"{idx}. {name}")
        lines.append(f"   {quantity} √ó {format_price(price)} = {format_price(total)}\n")
    
    total = calculate_total_price(order['items'])
    lines.append(f"\nüí∞ –í—Å—å–æ–≥–æ: {format_price(total)}")
    
    if order.get('phone'):
        lines.append(f"\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {format_phone_display(order['phone'])}")
    
    if order.get('address'):
        lines.append(f"üìç –ê–¥—Ä–µ—Å–∞: {order['address']}")
    
    if order.get('comment'):
        lines.append(f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {order['comment']}")
    
    return "\n".join(lines)


# ============================================================================
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TESTING VALIDATORS")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏ —Ü—ñ–Ω
    test_prices = [
        ("30 –≥—Ä–Ω", 30.0),
        ("45,5", 45.5),
        ("120.50 –≥—Ä–Ω", 120.5),
        (None, 0.0),
        ("", 0.0),
        ("invalid", 0.0),
        ("-50", 0.0),
        ("1000000000", 0.0)
    ]
    
    print("\nüí∞ Testing prices:")
    for input_val, expected in test_prices:
        result = safe_parse_price(input_val)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {input_val} -> {result} (expected {expected})")
    
    # –¢–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
    test_phones = [
        ("+380501234567", True),
        ("0501234567", True),
        ("380501234567", True),
        ("501234567", True),
        ("123", False),
        ("", False)
    ]
    
    print("\nüì± Testing phones:")
    for phone, expected in test_phones:
        result = validate_phone(phone)
        normalized = normalize_phone(phone)
        formatted = format_phone_display(phone) if normalized else "N/A"
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {phone}")
        print(f"   Valid: {result}, Normalized: {normalized}, Formatted: {formatted}")
    
    # –¢–µ—Å—Ç –∞–¥—Ä–µ—Å–∏
    test_addresses = [
        "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 5",
        "–î–∞—Ä–≤—ñ–Ω–∞ 10–∞",
        "–ø—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä—É 150"
    ]
    
    print("\nüìç Testing addresses:")
    for addr in test_addresses:
        is_valid = validate_address(addr)
        parsed = parse_address(addr)
        print(f"{'‚úÖ' if is_valid else '‚ùå'} {addr}")
        print(f"   Parsed: {parsed}")
    
    # –¢–µ—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    test_order = {
        'items': [
            {'id': '1', 'name': '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 'price': '120 –≥—Ä–Ω', 'quantity': 2},
            {'id': '2', 'name': 'Coca-Cola', 'price': '30', 'quantity': 1}
        ],
        'phone': '0501234567',
        'address': '–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 5',
        'comment': '–î–æ–¥–∑–≤–æ–Ω—ñ—Ç—å—Å—è –∑–∞ 10 —Ö–≤'
    }
    
    print("\nüì¶ Testing order:")
    is_valid, error = validate_order_data(test_order)
    print(f"{'‚úÖ' if is_valid else '‚ùå'} Order validation: {error if error else 'OK'}")
    print(f"\nOrder summary:\n{format_order_summary(test_order)}")
    
    print("\n" + "=" * 60)
