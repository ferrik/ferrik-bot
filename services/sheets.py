"""
üìä Google Sheets Service
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Google Sheets –¥–ª—è –º–µ–Ω—é —Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
"""
import os
import json
import logging
from typing import List, Dict, Optional
from datetime import datetime

import gspread
from oauth2client.service_account import ServiceAccountCredentials

logger = logging.getLogger(__name__)

class SheetsService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets"""
    
    def __init__(self):
        self.client = None
        self.spreadsheet = None
        self._initialize_client()
    
    def _initialize_client(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets –∫–ª—ñ—î–Ω—Ç–∞"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ credentials –∑ environment
            creds_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
            sheets_id = os.getenv('GOOGLE_SHEETS_ID')
            
            if not creds_json or not sheets_id:
                logger.warning("‚ö†Ô∏è Google Sheets credentials not configured")
                return
            
            # –ü–∞—Ä—Å–∏–º–æ JSON credentials
            if isinstance(creds_json, str):
                creds_dict = json.loads(creds_json)
            else:
                creds_dict = creds_json
            
            # Scope –¥–ª—è –¥–æ—Å—Ç—É–ø—É
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ credentials
            credentials = ServiceAccountCredentials.from_json_keyfile_dict(
                creds_dict, 
                scope
            )
            
            # –ê–≤—Ç–æ—Ä–∏–∑—É—î–º–æ—Å—å
            self.client = gspread.authorize(credentials)
            
            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            self.spreadsheet = self.client.open_by_key(sheets_id)
            
            logger.info("‚úÖ Google Sheets connected successfully")
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Invalid JSON in GOOGLE_CREDENTIALS_JSON: {e}")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Google Sheets: {e}")
    
    def get_menu_items(self) -> List[Dict]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω—é –∑ Google Sheets
        
        –û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ "–ú–µ–Ω—é":
        ID | –ö–∞—Ç–µ–≥–æ—Ä—ñ—è | –°—Ç—Ä–∞–≤–∏ | –û–ø–∏—Å | –¶—ñ–Ω–∞ | –†–µ—Å—Ç–æ—Ä–∞–Ω | –ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ | –§–æ—Ç–æ URL | –ê–∫—Ç–∏–≤–Ω–∏–π
        """
        try:
            if not self.spreadsheet:
                logger.warning("‚ö†Ô∏è Google Sheets not initialized, returning demo menu")
                return self._get_demo_menu()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ª–∏—Å—Ç "–ú–µ–Ω—é"
            worksheet = self.spreadsheet.worksheet('–ú–µ–Ω—é')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
            data = worksheet.get_all_records()
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–æ–≤–∞—Ä–∏
            active_items = [
                item for item in data 
                if str(item.get('–ê–∫—Ç–∏–≤–Ω–∏–π', '')).lower() in ['yes', '—Ç–∞–∫', 'true', '1', '–∞–∫—Ç–∏–≤–Ω–∏–π']
            ]
            
            logger.info(f"üìã Loaded {len(active_items)} menu items from Google Sheets")
            return active_items if active_items else self._get_demo_menu()
            
        except gspread.exceptions.WorksheetNotFound:
            logger.error("‚ùå Worksheet '–ú–µ–Ω—é' not found")
            return self._get_demo_menu()
        except Exception as e:
            logger.error(f"‚ùå Error loading menu: {e}")
            return self._get_demo_menu()
    
    def add_order(self, order_data: Dict) -> bool:
        """
        –î–æ–¥–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Google Sheets
        
        –û—á—ñ–∫—É–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        ID –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è | Telegram User ID | –ß–∞—Å –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è | –¢–æ–≤–∞—Ä–∏ (JSON) | 
        –ó–∞–≥–∞–ª—å–Ω–∞ –°—É–º–∞ | –ê–¥—Ä–µ—Å–∞ | –¢–µ–ª–µ—Ñ–æ–Ω | –°—Ç–∞—Ç—É—Å
        """
        try:
            if not self.spreadsheet:
                logger.warning("‚ö†Ô∏è Google Sheets not initialized, order not saved")
                return False
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ª–∏—Å—Ç "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"
            worksheet = self.spreadsheet.worksheet('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è')
            
            # –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö
            row = [
                order_data.get('order_id', ''),
                order_data.get('user_id', ''),
                order_data.get('timestamp', datetime.now().isoformat()),
                order_data.get('items', ''),
                order_data.get('total', 0),
                order_data.get('address', ''),
                order_data.get('phone', ''),
                order_data.get('status', 'pending')
            ]
            
            # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫
            worksheet.append_row(row)
            
            logger.info(f"‚úÖ Order {order_data.get('order_id')} saved to Google Sheets")
            return True
            
        except gspread.exceptions.WorksheetNotFound:
            logger.error("‚ùå Worksheet '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è' not found")
            return False
        except Exception as e:
            logger.error(f"‚ùå Error saving order: {e}")
            return False
    
    def get_promocodes(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∏"""
        try:
            if not self.spreadsheet:
                return []
            
            worksheet = self.spreadsheet.worksheet('–ü—Ä–æ–º–æ–∫–æ–¥–∏')
            data = worksheet.get_all_records()
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏
            active_promos = [
                promo for promo in data
                if str(promo.get('–°—Ç–∞—Ç—É—Å', '')).lower() == '–∞–∫—Ç–∏–≤–Ω–∏–π'
            ]
            
            return active_promos
            
        except Exception as e:
            logger.error(f"‚ùå Error loading promocodes: {e}")
            return []
    
    def get_partners(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤"""
        try:
            if not self.spreadsheet:
                return []
            
            worksheet = self.spreadsheet.worksheet('–ü–∞—Ä—Ç–Ω–µ—Ä–∏')
            data = worksheet.get_all_records()
            
            return data
            
        except Exception as e:
            logger.error(f"‚ùå Error loading partners: {e}")
            return []
    
    def add_review(self, review_data: Dict) -> bool:
        """–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫"""
        try:
            if not self.spreadsheet:
                return False
            
            worksheet = self.spreadsheet.worksheet('–í—ñ–¥–≥—É–∫–∏')
            
            row = [
                review_data.get('review_id', ''),
                review_data.get('partner_id', ''),
                review_data.get('user_id', ''),
                review_data.get('rating', 0),
                review_data.get('comment', ''),
                review_data.get('order_id', ''),
                datetime.now().isoformat()
            ]
            
            worksheet.append_row(row)
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error saving review: {e}")
            return False
    
    def get_config(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
        try:
            if not self.spreadsheet:
                return self._get_default_config()
            
            worksheet = self.spreadsheet.worksheet('–ö–æ–Ω—Ñ—ñ–≥')
            data = worksheet.get_all_records()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ dict
            config = {row['–ö–ª—é—á']: row['–ó–Ω–∞—á–µ–Ω–Ω—è'] for row in data}
            
            return config
            
        except Exception as e:
            logger.error(f"‚ùå Error loading config: {e}")
            return self._get_default_config()
    
    def _get_demo_menu(self) -> List[Dict]:
        """–î–µ–º–æ-–º–µ–Ω—é —è–∫—â–æ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"""
        return [
            {
                'ID': '1',
                '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': '–ü—ñ—Ü–∞',
                '–°—Ç—Ä–∞–≤–∏': '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
                '–û–ø–∏—Å': '–ö–ª–∞—Å–∏—á–Ω–∞ —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∞ –ø—ñ—Ü–∞ –∑ –º–æ—Ü–∞—Ä–µ–ª–æ—é —Ç–∞ –±–∞–∑–∏–ª—ñ–∫–æ–º',
                '–¶—ñ–Ω–∞': 180,
                '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'Ferrik Pizza',
                '–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)': 30,
                '–§–æ—Ç–æ URL': 'https://via.placeholder.com/300x200/FF6B6B/FFFFFF?text=Pizza',
                '–ê–∫—Ç–∏–≤–Ω–∏–π': '–¢–∞–∫',
                '–†–µ–π—Ç–∏–Ω–≥': 4.8
            },
            {
                'ID': '2',
                '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': '–ë—É—Ä–≥–µ—Ä–∏',
                '–°—Ç—Ä–∞–≤–∏': '–ë—É—Ä–≥–µ—Ä –ö–ª–∞—Å–∏–∫',
                '–û–ø–∏—Å': '–°–æ–∫–æ–≤–∏—Ç–∏–π –±—É—Ä–≥–µ—Ä –∑ —è–ª–æ–≤–∏—á–∏–Ω–æ—é —Ç–∞ —Å–≤—ñ–∂–∏–º–∏ –æ–≤–æ—á–∞–º–∏',
                '–¶—ñ–Ω–∞': 150,
                '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'Ferrik Burgers',
                '–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)': 25,
                '–§–æ—Ç–æ URL': 'https://via.placeholder.com/300x200/4ECDC4/FFFFFF?text=Burger',
                '–ê–∫—Ç–∏–≤–Ω–∏–π': '–¢–∞–∫',
                '–†–µ–π—Ç–∏–Ω–≥': 4.6
            },
            {
                'ID': '3',
                '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': '–°—É—à—ñ',
                '–°—Ç—Ä–∞–≤–∏': '–§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è',
                '–û–ø–∏—Å': '–†–æ–ª –∑ –ª–æ—Å–æ—Å–µ–º, –≤–µ—Ä—à–∫–æ–≤–∏–º —Å–∏—Ä–æ–º —Ç–∞ –æ–≥—ñ—Ä–∫–æ–º',
                '–¶—ñ–Ω–∞': 220,
                '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'Ferrik Sushi',
                '–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)': 35,
                '–§–æ—Ç–æ URL': 'https://via.placeholder.com/300x200/95E1D3/FFFFFF?text=Sushi',
                '–ê–∫—Ç–∏–≤–Ω–∏–π': '–¢–∞–∫',
                '–†–µ–π—Ç–∏–Ω–≥': 4.9
            },
            {
                'ID': '4',
                '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': '–°–∞–ª–∞—Ç–∏',
                '–°—Ç—Ä–∞–≤–∏': '–¶–µ–∑–∞—Ä',
                '–û–ø–∏—Å': '–°–∞–ª–∞—Ç –∑ –∫—É—Ä–∫–æ—é, –ª–∏—Å—Ç—è–º —Å–∞–ª–∞—Ç—É —Ç–∞ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º',
                '–¶—ñ–Ω–∞': 120,
                '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'Ferrik Kitchen',
                '–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)': 20,
                '–§–æ—Ç–æ URL': 'https://via.placeholder.com/300x200/F38181/FFFFFF?text=Salad',
                '–ê–∫—Ç–∏–≤–Ω–∏–π': '–¢–∞–∫',
                '–†–µ–π—Ç–∏–Ω–≥': 4.5
            },
            {
                'ID': '5',
                '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': '–î–µ—Å–µ—Ä—Ç–∏',
                '–°—Ç—Ä–∞–≤–∏': '–¢—ñ—Ä–∞–º—ñ—Å—É',
                '–û–ø–∏—Å': '–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∏–π –¥–µ—Å–µ—Ä—Ç –∑ –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ —Ç–∞ –∫–∞–≤–æ—é',
                '–¶—ñ–Ω–∞': 95,
                '–†–µ—Å—Ç–æ—Ä–∞–Ω': 'Ferrik Desserts',
                '–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)': 25,
                '–§–æ—Ç–æ URL': 'https://via.placeholder.com/300x200/AA96DA/FFFFFF?text=Tiramisu',
                '–ê–∫—Ç–∏–≤–Ω–∏–π': '–¢–∞–∫',
                '–†–µ–π—Ç–∏–Ω–≥': 4.7
            }
        ]
    
    def _get_default_config(self) -> Dict:
        """–î–µ—Ñ–æ–ª—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è"""
        return {
            'OPEN_HOUR': '8',
            'CLOSE_HOUR': '23',
            'MIN_ORDER_AMOUNT': '100',
            'DELIVERY_COST': '50',
            'FREE_DELIVERY_FROM': '500'
        }
    
    def is_connected(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
        return self.client is not None and self.spreadsheet is not None


# ============================================================================
# SINGLETON INSTANCE
# ============================================================================
_sheets_instance = None

def get_sheets_service() -> SheetsService:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ singleton instance —Å–µ—Ä–≤—ñ—Å—É"""
    global _sheets_instance
    if _sheets_instance is None:
        _sheets_instance = SheetsService()
    return _sheets_instance
