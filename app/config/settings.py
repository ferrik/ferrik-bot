"""
‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞ (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è, —Ç–∏–ø—ñ–∑–∞—Ü—ñ—è, –±–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
"""
import os
import json
import logging
from dataclasses import dataclass, field
from typing import Optional, Dict, Any

# ============================================================================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
# ============================================================================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
    ]
)

logger = logging.getLogger(__name__)

# ============================================================================
# –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
# ============================================================================

@dataclass
class BotConfig:
    """–û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
    
    # Telegram
    telegram_token: str
    webhook_secret: str
    
    # Google Sheets
    sheet_id: str
    google_credentials: Optional[str] = None
    
    # Deployment
    environment: str = "production"
    debug: bool = False
    port: int = 5000
    webhook_url: Optional[str] = None
    render_url: Optional[str] = None
    
    # Database
    database_url: str = "sqlite:///bot.db"
    redis_url: Optional[str] = None
    
    # Features
    min_order_amount: float = 100.0
    enable_commission: bool = True
    
    # Admin
    admin_token: Optional[str] = None
    
    @classmethod
    def from_env(cls) -> 'BotConfig':
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
        
        return cls(
            # Required
            telegram_token=os.getenv('TELEGRAM_BOT_TOKEN', ''),
            webhook_secret=os.getenv('WEBHOOK_SECRET', 'default_secret'),
            sheet_id=os.getenv('GOOGLE_SHEET_ID', ''),
            
            # Optional - Google
            google_credentials=os.getenv('GOOGLE_CREDENTIALS'),
            
            # Optional - Deployment
            environment=os.getenv('ENVIRONMENT', 'production'),
            debug=os.getenv('DEBUG', 'false').lower() == 'true',
            port=int(os.getenv('PORT', 5000)),
            webhook_url=os.getenv('WEBHOOK_URL'),
            render_url=os.getenv('RENDER_EXTERNAL_URL'),
            
            # Optional - Database
            database_url=os.getenv('DATABASE_URL', 'sqlite:///bot.db'),
            redis_url=os.getenv('REDIS_URL'),
            
            # Optional - Features
            min_order_amount=float(os.getenv('MIN_ORDER_AMOUNT', 100.0)),
            enable_commission=os.getenv('ENABLE_COMMISSION', 'true').lower() == 'true',
            
            # Optional - Admin
            admin_token=os.getenv('ADMIN_TOKEN'),
        )
    
    def validate(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        errors = []
        
        if not self.telegram_token:
            errors.append("‚ùå TELEGRAM_BOT_TOKEN is required")
        
        if not self.sheet_id:
            errors.append("‚ùå GOOGLE_SHEET_ID is required")
        
        if not self.webhook_url and not self.render_url:
            errors.append("‚ö†Ô∏è Neither WEBHOOK_URL nor RENDER_EXTERNAL_URL is set")
        
        if errors:
            for error in errors:
                logger.error(error)
            return False
        
        logger.info("‚úÖ Configuration validated successfully")
        return True
    
    def get_webhook_url(self) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ URL –¥–ª—è webhook"""
        base_url = self.webhook_url or self.render_url
        if not base_url:
            raise ValueError("No webhook URL configured")
        
        # –î–æ–¥–∞—î–º–æ /webhook —è–∫—â–æ –Ω–µ–º–∞—î
        if not base_url.endswith('/webhook'):
            base_url = f"{base_url.rstrip('/')}/webhook"
        
        return base_url
    
    def display(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é (–ø—Ä–∏—Ö–æ–≤—É—é—á–∏ —Å–µ–∫—Ä–µ—Ç–∏)"""
        logger.info("=" * 60)
        logger.info("ü§ñ BOT CONFIGURATION")
        logger.info("=" * 60)
        logger.info(f"Environment: {self.environment}")
        logger.info(f"Debug: {self.debug}")
        logger.info(f"Port: {self.port}")
        logger.info(f"Webhook URL: {self.get_webhook_url()}")
        logger.info(f"Sheet ID: {self.sheet_id[:8]}...")
        logger.info(f"Database: {self.database_url.split(':')[0]}://...")
        logger.info(f"Redis: {'ENABLED' if self.redis_url else 'DISABLED'}")
        logger.info(f"Min Order: {self.min_order_amount} –≥—Ä–Ω")
        logger.info(f"Commission: {'ENABLED' if self.enable_commission else 'DISABLED'}")
        logger.info("=" * 60)


# ============================================================================
# Google Credentials Parser
# ============================================================================

def load_google_credentials() -> Optional[Dict[str, Any]]:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Google credentials –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    
    –ü—ñ–¥—Ç—Ä–∏–º—É—î:
    1. JSON-—Ä—è–¥–æ–∫ –≤ –∑–º—ñ–Ω–Ω—ñ–π —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    2. –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É credentials.json
    3. None (—è–∫—â–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
    """
    creds_str = os.getenv('GOOGLE_CREDENTIALS', '')
    
    if not creds_str:
        logger.warning("‚ö†Ô∏è GOOGLE_CREDENTIALS not set")
        return None
    
    # –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
    try:
        creds_dict = json.loads(creds_str)
        logger.info("‚úÖ Google credentials loaded from JSON string")
        return creds_dict
    except json.JSONDecodeError:
        pass
    
    # –°–ø—Ä–æ–±–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —è–∫ —Ñ–∞–π–ª
    if os.path.isfile(creds_str):
        try:
            with open(creds_str, 'r') as f:
                creds_dict = json.load(f)
            logger.info(f"‚úÖ Google credentials loaded from file: {creds_str}")
            return creds_dict
