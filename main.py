import os
import logging
import json
from flask import Flask, request, jsonify
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_cors import CORS
from datetime import datetime
try:
    from zoneinfo import ZoneInfo
except ImportError:
    logging.warning("zoneinfo not found. Using naive datetime.")
    ZoneInfo = None

# –Ü–º–ø–æ—Ä—Ç–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤
try:
    from services.sheets import init_gspread_client, get_menu_from_sheet, save_order_to_sheets, is_sheets_connected, search_menu_items
    from services.gemini import init_gemini_client, get_ai_response, is_gemini_connected
    from services.telegram import send_message, answer_callback, send_photo
    from models.user import init_user_db
except Exception as e:
    logging.error(f"‚ùå Import error: {str(e)}", exc_info=True)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler('bonapp.log')]
)
logger = logging.getLogger("bonapp")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)
CORS(app)
limiter = Limiter(app, key_func=get_remote_address, default_limits=["200 per day", "50 per hour"])

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "BonApp123!").strip()
SPREADSHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()
OPERATOR_CHAT_ID = os.environ.get("OPERATOR_CHAT_ID", "").strip()
TIMEZONE_NAME = os.environ.get("TIMEZONE", "Europe/Kyiv").strip()

# –°—Ö–æ–≤–∏—â–µ –∫–æ—à–∏–∫—ñ–≤
user_carts = {}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
def init_services():
    logger.info("üîß Initializing BonApp services...")
    try:
        init_user_db()
        logger.info("‚úÖ User database initialized")
    except Exception as e:
        logger.error(f"‚ùå User DB initialization failed: {str(e)}", exc_info=True)
    
    sheets_ok = False
    try:
        sheets_ok = init_gspread_client()
        if sheets_ok:
            logger.info("‚úÖ Google Sheets connected")
        else:
            logger.warning("‚ö†Ô∏è Google Sheets connection failed")
    except Exception as e:
        logger.error(f"‚ùå Sheets initialization error: {str(e)}", exc_info=True)
    
    gemini_ok = False
    try:
        gemini_ok = init_gemini_client()
        if gemini_ok:
            logger.info("‚úÖ Gemini AI connected")
        else:
            logger.warning("‚ö†Ô∏è Gemini AI connection failed")
    except Exception as e:
        logger.error(f"‚ùå Gemini initialization error: {str(e)}", exc_info=True)
    
    logger.info("üéâ BonApp initialization completed!")
    return sheets_ok, gemini_ok

init_services()

# ============= ROUTES =============

@app.route('/')
def home():
    try:
        menu_count = len(get_menu_from_sheet()) if is_sheets_connected() else 0
    except:
        menu_count = 0
    return jsonify({
        "status": "running",
        "bot": "BonApp",
        "version": "2.1",
        "services": {
            "google_sheets": is_sheets_connected(),
            "gemini_ai": is_gemini_connected()
        },
        "menu_items": menu_count,
        "timestamp": datetime.now().isoformat()
    })

@app.route('/health')
def health():
    sheets_status = is_sheets_connected()
    gemini_status = is_gemini_connected()
    status_code = 200 if (sheets_status or gemini_status) else 503
    return jsonify({
        "status": "healthy" if status_code == 200 else "degraded",
        "services": {
            "google_sheets": sheets_status,
            "gemini_ai": gemini_status
        }
    }), status_code

@app.route('/keep-alive')
def keep_alive():
    return jsonify({
        "status": "alive",
        "timestamp": datetime.now().isoformat(),
        "uptime": "running"
    }), 200

@app.route('/webhook', methods=['POST'])
def webhook():
    header_secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if WEBHOOK_SECRET and header_secret != WEBHOOK_SECRET:
        logger.warning("Invalid webhook secret: %s", header_secret)
        return jsonify({"ok": False, "error": "invalid secret"}), 403

    update = request.get_json(silent=True)
    if not update:
        logger.warning("‚ö†Ô∏è Empty update received")
        return jsonify({"ok": True}), 200
    
    try:
        logger.info(f"üì® Update {update.get('update_id', 'unknown')}")
        if 'message' in update:
            handle_message(update['message'])
        elif 'callback_query' in update:
            handle_callback_query(update['callback_query'])
        else:
            logger.warning(f"‚ö†Ô∏è Unknown update type: {list(update.keys())}")
        return jsonify({"ok": True}), 200
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {str(e)}", exc_info=True)
        return jsonify({"ok": False, "error": str(e)}), 500

# ============= HANDLERS =============

def handle_message(message):
    try:
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text', '').strip()
        user = message.get('from', {})
        if not chat_id:
            logger.error("No chat_id in message")
            return
        username = user.get('first_name', '–î—Ä—É–∂–µ')
        logger.info(f"üë§ {username} ({chat_id}): {text}")
        
        if text.startswith('/'):
            handle_command(chat_id, text, user)
        else:
            handle_text_message(chat_id, text, user)
    except Exception as e:
        logger.error(f"‚ùå Error in handle_message: {str(e)}", exc_info=True)
        send_message(chat_id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. üòî")

def handle_command(chat_id, command, user):
    try:
        cmd = command.split()[0].lower()
        username = user.get('first_name', '–î—Ä—É–∂–µ')
        
        if cmd == '/start':
            welcome_text = f"""
üëã <b>–í—ñ—Ç–∞—é, {username}!</b>

–Ø <b>BonApp</b> - –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ —ó–∂—ñ! üçï

<b>–©–æ —è –≤–º—ñ—é:</b>
üçî –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
üìÇ –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
üõí –î–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ —É –∫–æ—à–∏–∫
üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
ü§ñ –î–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –≤–∏–±–æ—Ä–æ–º —á–µ—Ä–µ–∑ AI

<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/menu - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é
/cart - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫
/help - –î–æ–ø–æ–º–æ–≥–∞
"""
            keyboard = {
                "keyboard": [
                    [{"text": "üçï –ú–µ–Ω—é"}, {"text": "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"}],
                    [{"text": "üõí –ö–æ—à–∏–∫"}, {"text": "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"}]
                ],
                "resize_keyboard": True
            }
            send_message(chat_id, welcome_text, keyboard)
        
        elif cmd == '/menu':
            show_menu(chat_id)
        
        elif cmd == '/cart':
            cart = user_carts.get(chat_id, [])
            if not cart:
                send_message(chat_id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            else:
                text = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n"
                total = 0
                for item in cart:
                    name =
