"""
Helper functions for personalization UI and formatting
"""
from typing import List, Dict, Any, Optional
from models.user_profile import UserProfile, UserLevel
from models.user_preferences import UserPreferences


def format_user_greeting_message(profile: UserProfile) -> str:
    """Format greeting message with user info"""
    message = f"üëã <b>–ü—Ä–∏–≤—ñ—Ç, {profile.name}!</b>\n\n"
    
    if profile.level != UserLevel.NOVICE:
        emoji = profile.get_level_emoji()
        level_name = profile.get_level_name()
        message += f"{emoji} <i>–¢–∏ –≤–∂–µ {level_name}!</i>\n"
        message += f"üéÅ <i>+20 –±–æ–Ω—É—Å-–±–∞–ª—ñ–≤</i>\n\n"
    
    if profile.total_orders > 0:
        message += f"<b>–¢–≤–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
        message += f"üìä –í—Å—å–æ–≥–æ: <code>{profile.total_orders}</code>\n"
        message += f"üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: <code>{profile.total_spent:.2f} –≥—Ä–Ω</code>\n"
        message += f"üéÅ –ë–æ–Ω—É—Å-–±–∞–ª—ñ–≤: <code>{profile.points}</code>\n\n"
    
    return message


def format_level_badge(profile: UserProfile) -> str:
    """Format level badge with emoji and name"""
    emoji = profile.get_level_emoji()
    level_name = profile.get_level_name()
    return f"{emoji} <b>{level_name}</b>"


def format_points_display(profile: UserProfile) -> str:
    """Format points display"""
    return f"üéÅ <code>{profile.points} –±–∞–ª—ñ–≤</code>"


def format_recommendations_message(recommendations: List[Dict[str, Any]]) -> str:
    """Format recommendations as message"""
    if not recommendations:
        return "üì≠ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–µ–º–∞—î"
    
    message = "<b>‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–ª—è —Ç–µ–±–µ:</b>\n\n"
    
    for i, item in enumerate(recommendations, 1):
        name = item.get('name', 'Unknown')
        price = item.get('price', 0)
        category = item.get('category', '')
        message += f"{i}. <b>{name}</b>\n"
        message += f"   üí∞ {price} –≥—Ä–Ω"
        if category:
            message += f" | üìÅ {category}"
        message += "\n\n"
    
    return message


def format_quick_reorder_button_text(profile: UserProfile) -> str:
    """Format quick reorder suggestion"""
    if not profile.favorite_dishes:
        return "üçΩÔ∏è –ó–∞–º–æ–≤–∏—Ç–∏"
    
    favorite = profile.favorite_dishes[0]
    return f"üçï {favorite}"


def format_order_history_message(order_history: List[Dict[str, Any]]) -> str:
    """Format order history display"""
    if not order_history:
        return "üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è"
    
    message = "<b>üìú –¢–≤–æ—ó –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
    
    for i, order in enumerate(order_history, 1):
        items = order.get('items', [])
        total = order.get('total_amount', 0)
        timestamp = order.get('timestamp', '')
        
        message += f"{i}. <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order.get('order_id', 'N/A')}</b>\n"
        message += f"   üí∞ {total} –≥—Ä–Ω\n"
        
        if items:
            items_text = ", ".join([item if isinstance(item, str) else item.get('name', 'Item') 
                                   for item in items[:3]])
            if len(items) > 3:
                items_text += f" +{len(items)-3}"
            message += f"   üçΩÔ∏è {items_text}\n"
        
        if timestamp:
            message += f"   üìÖ {timestamp[:10]}\n"
        
        message += "\n"
    
    return message


def format_reminder_message(profile: UserProfile) -> str:
    """Format reminder message"""
    emoji = profile.get_level_emoji()
    message = f"üîî <b>–ü—Ä–∏–≤—ñ—Ç, {profile.name}! {emoji}</b>\n\n"
    
    if profile.favorite_dishes:
        favorite = profile.favorite_dishes[0]
        message += f"–°–∫—É—á–∏–≤ –∑–∞ —Ç–æ–±–æ—é! üò¢\n"
        message += f"–ó–∞–º–æ–≤–∏—Ç–∏ <b>{favorite}</b> —è–∫ –∑–≤–∏—á–∞–π–Ω–æ?\n\n"
    else:
        message += f"–î–∞–≤–Ω–æ –Ω–µ –∑–∞–º–æ–≤–ª—è–≤...\n"
        message += f"–ß–∞—Å –ø–µ—Ä–µ–∫—É—Å–∏—Ç–∏? üòã\n\n"
    
    message += f"üí° <i>+10 –±–æ–Ω—É—Å-–±–∞–ª—ñ–≤ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ!</i>"
    
    return message


def format_level_up_message(profile: UserProfile) -> str:
    """Format level-up achievement message"""
    emoji = profile.get_level_emoji()
    level_name = profile.get_level_name()
    
    message = "üéâ <b>–†–Ü–í–ï–ù–¨ –ü–Ü–î–í–ò–©–ï–ù–û!</b>\n\n"
    message += f"{emoji} <b>–¢–∏ —Ç–µ–ø–µ—Ä {level_name}!</b>\n"
    message += f"üìä –ó–∞–º–æ–≤–ª–µ–Ω—å: <code>{profile.total_orders}</code>\n"
    message += f"üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: <code>{profile.total_spent:.2f} –≥—Ä–Ω</code>\n\n"
    message += "üéÅ <b>+50 –±–æ–Ω—É—Å-–±–∞–ª—ñ–≤!</b>"
    
    return message


def format_profile_message(profile: UserProfile, order_history: List[Dict[str, Any]]) -> str:
    """Format complete profile display"""
    emoji = profile.get_level_emoji()
    level_name = profile.get_level_name()
    
    message = f"üë§ <b>–ú–Ü–ô –ü–†–û–§–Ü–õ–¨</b>\n\n"
    message += f"<b>–Ü–º'—è:</b> {profile.name}\n"
    message += f"<b>–†—ñ–≤–µ–Ω—å:</b> {emoji} {level_name}\n"
    message += f"<b>–ë–æ–Ω—É—Å-–±–∞–ª–∏:</b> üéÅ <code>{profile.points}</code>\n\n"
    
    message += f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    message += f"‚Ä¢ <b>–ó–∞–º–æ–≤–ª–µ–Ω—å:</b> {profile.total_orders}\n"
    message += f"‚Ä¢ <b>–í–∏—Ç—Ä–∞—á–µ–Ω–æ:</b> {profile.total_spent:.2f} –≥—Ä–Ω\n"
    
    if profile.total_orders > 0:
        avg_order = profile.total_spent / profile.total_orders
        message += f"‚Ä¢ <b>–°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫:</b> {avg_order:.2f} –≥—Ä–Ω\n"
    
    if profile.last_order_date:
        from datetime import datetime
        days_ago = (datetime.now() - profile.last_order_date).days
        message += f"‚Ä¢ <b>–û—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {days_ago} –¥–Ω—ñ–≤ —Ç–æ–º—É\n"
    
    if profile.favorite_dishes:
        message += f"\n<b>‚≠ê –¢–≤–æ—ó —É–ª—é–±–ª–µ–Ω—ñ:</b>\n"
        for i, dish in enumerate(profile.favorite_dishes[:5], 1):
            message += f"{i}. {dish}\n"
    
    return message


def format_discount_offer(profile: UserProfile) -> Optional[str]:
    """Format discount offer message"""
    from datetime import datetime
    
    if profile.total_orders < 3:
        return None
    
    if not profile.last_order_date:
        return None
    
    days_since_order = (datetime.now() - profile.last_order_date).days
    
    if days_since_order >= 7:
        discount = 15
    elif days_since_order >= 5:
        discount = 10
    elif days_since_order >= 3:
        discount = 5
    else:
        return None
    
    offer = f"üéÅ <b>–°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è!</b>\n\n"
    offer += f"–¢–æ–±—ñ –ø—Ä–∏–ø–∞—Å–æ–≤–∞–Ω–∞ –∑–Ω–∏–∂–∫–∞ <b>{discount}%</b> –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
    offer += f"–ü–æ—Å–ø—ñ—à - –¥—ñ–π—Å–Ω–∞ <b>24 –≥–æ–¥–∏–Ω–∏</b>! ‚è∞"
    
    return offer


def create_recommendations_keyboard(recommendations: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Create inline keyboard for recommendations"""
    keyboard = {
        'inline_keyboard': []
    }
    
    for item in recommendations[:3]:
        item_name = item.get('name', 'Item')
        item_id = item.get('id', 'unknown')
        
        keyboard['inline_keyboard'].append([{
            'text': f"‚ûï {item_name}",
            'callback_data': f"add_to_cart_{item_id}"
        }])
    
    return keyboard


def create_quick_reorder_keyboard(profile: UserProfile) -> Dict[str, Any]:
    """Create keyboard for quick reorder"""
    keyboard = {
        'inline_keyboard': []
    }
    
    if profile.favorite_dishes:
        favorite = profile.favorite_dishes[0]
        keyboard['inline_keyboard'].append([{
            'text': f"üçï –ó–∞–º–æ–≤–∏—Ç–∏ {favorite}",
            'callback_data': f"quick_reorder_{favorite}"
        }])
    
    keyboard['inline_keyboard'].append([{
        'text': "üìã –ü–æ–≤–Ω–µ –º–µ–Ω—é",
        'callback_data': "show_menu"
    }])
    
    return keyboard


def create_profile_keyboard() -> Dict[str, Any]:
    """Create keyboard for profile menu"""
    return {
        'inline_keyboard': [
            [
                {'text': 'üìú –Ü—Å—Ç–æ—Ä—ñ—è', 'callback_data': 'view_history'},
                {'text': 'üéÅ –ë–æ–Ω—É—Å–∏', 'callback_data': 'view_bonuses'}
            ],
            [
                {'text': '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', 'callback_data': 'settings'},
                {'text': 'üçΩÔ∏è –£–ª—é–±–ª–µ–Ω—ñ', 'callback_data': 'view_favorites'}
            ],
            [
                {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'back_to_menu'}
            ]
        ]
    }


def get_emoji_for_category(category: str) -> str:
    """Get emoji for food category"""
    emoji_map = {
        'pizza': 'üçï',
        '–ø—ñ—Ü–∞': 'üçï',
        'burger': 'üçî',
        '–±—É—Ä–≥–µ—Ä': 'üçî',
        'salad': 'ü•ó',
        '—Å–∞–ª–∞—Ç': 'ü•ó',
        'soup': 'üç≤',
        '—Å—É–ø': 'üç≤',
        'sushi': 'üç£',
        '—Å—É—à—ñ': 'üç£',
        'dessert': 'üç∞',
        '–¥–µ—Å–µ—Ä—Ç': 'üç∞',
        'drink': 'ü•§',
        '–Ω–∞–ø—ñ–π': 'ü•§',
        'coffee': '‚òï',
        '–∫–∞–≤–∞': '‚òï'
    }
    
    for key, emoji in emoji_map.items():
        if key.lower() in category.lower():
            return emoji
    
    return 'üçΩÔ∏è'