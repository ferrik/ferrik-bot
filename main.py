"""
ü§ñ FerrikFoot Bot v2.1 - –õ–Æ–î–Ø–ù–ê –í–ï–†–°–Ü–Ø
Telegram –±–æ—Ç –∑ AI, –±–µ–π–¥–∂–∞–º–∏, —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏ —Ç–∞ —Ç–µ–ø–ª–∏–º–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º–∏
"""
import os
import logging
from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

from app.config import load_config
from app.services.sheets_service import SheetsService
from app.services.gemini_service import GeminiService

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ñ handlers
from app.handlers.commands import (
    start_handler,
    menu_handler,
    cart_handler,
    order_handler,
    help_handler,
    cancel_handler,
    show_profile_callback,
    show_challenge_callback,
)
from app.handlers.messages import message_handler
from app.handlers.callbacks import callback_query_handler

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
try:
    telegram_config, gemini_config, sheets_config, app_config = load_config()
except Exception as e:
    logger.error(f"‚ùå Configuration failed: {e}")
    raise

# Flask app
app = Flask(__name__)

# Telegram bot application
bot_application = None

# –°–µ—Ä–≤—ñ—Å–∏
sheets_service = None
gemini_service = None


def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    global sheets_service, gemini_service
    
    try:
        # Google Sheets
        sheets_service = SheetsService(sheets_config)
        logger.info("‚úÖ Google Sheets service initialized")
        
        # Gemini AI
        gemini_service = GeminiService(gemini_config)
        if gemini_service.test_connection():
            logger.info("‚úÖ Gemini AI service initialized and tested")
        else:
            logger.warning("‚ö†Ô∏è Gemini AI test failed, but service initialized")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize services: {e}")
        return False


def setup_handlers(application: Application):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(CommandHandler("menu", menu_handler))
    application.add_handler(CommandHandler("cart", cart_handler))
    application.add_handler(CommandHandler("order", order_handler))
    application.add_handler(CommandHandler("help", help_handler))
    application.add_handler(CommandHandler("cancel", cancel_handler))
    
    # Callback queries (inline –∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    
    # –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (AI –æ–±—Ä–æ–±–∫–∞)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        message_handler
    ))
    
    logger.info("‚úÖ Handlers registered")


async def setup_webhook(application: Application):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –¥–ª—è Render"""
    if not telegram_config.webhook_url:
        logger.warning("‚ö†Ô∏è WEBHOOK_URL not set, skipping webhook setup")
        return False
    
    try:
        await application.bot.set_webhook(
            url=f"{telegram_config.webhook_url}/webhook",
            allowed_updates=["message", "callback_query", "edited_message"]
        )
        logger.info(f"‚úÖ Webhook set: {telegram_config.webhook_url}/webhook")
        return True
    except Exception as e:
        logger.error(f"‚ùå Failed to set webhook: {e}")
        return False


def create_bot_application():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Telegram bot application"""
    global bot_application
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ application
    bot_application = (
        Application.builder()
        .token(telegram_config.bot_token)
        .build()
    )
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    setup_handlers(bot_application)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ –≤ bot_data –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ handlers
    bot_application.bot_data['sheets_service'] = sheets_service
    bot_application.bot_data['gemini_service'] = gemini_service
    bot_application.bot_data['app_config'] = app_config
    bot_application.bot_data['telegram_config'] = telegram_config
    
    logger.info("‚úÖ Bot application created")
    
    return bot_application


# ============================================================================
# Flask routes
# ============================================================================

@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return jsonify({
        "status": "üü¢ online",
        "service": "üçï FerrikFoot Bot",
        "version": "2.1.0",
        "features": [
            "AI recommendations",
            "Badges & achievements",
            "Weekly challenges",
            "Referral system",
            "Warm greetings",
            "Multi-partner platform"
        ],
        "environment": app_config.environment
    })


@app.route('/health')
def health():
    """Health check –¥–ª—è Render"""
    try:
        return jsonify({
            "status": "healthy",
            "timestamp": __import__('datetime').datetime.now().isoformat(),
            "services": {
                "telegram": bot_application is not None,
                "sheets": sheets_service is not None,
                "gemini": gemini_service is not None
            },
            "uptime": "OK"
        })
    except Exception as e:
        logger.error(f"‚ùå Health check error: {e}")
        return jsonify({
            "status": "unhealthy",
            "error": str(e)
        }), 500


@app.route('/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏"""
    try:
        from app.utils.session import get_platform_stats
        platform_stats = get_platform_stats()
        
        return jsonify({
            "status": "ok",
            "platform": platform_stats
        })
    except Exception as e:
        logger.error(f"‚ùå Stats error: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/webhook', methods=['POST'])
async def webhook():
    """Webhook endpoint –¥–ª—è Telegram"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ update –≤—ñ–¥ Telegram
        update = Update.de_json(request.get_json(), bot_application.bot)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ update
        await bot_application.process_update(update)
        
        return jsonify({"ok": True})
    
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return jsonify({"ok": False, "error": str(e)}), 500


@app.route('/set_webhook', methods=['GET', 'POST'])
async def set_webhook_route():
    """–†—É—á–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook"""
    if not telegram_config.webhook_url:
        return jsonify({
            "ok": False,
            "error": "WEBHOOK_URL not configured"
        }), 400
    
    try:
        await setup_webhook(bot_application)
        return jsonify({
            "ok": True,
            "webhook_url": f"{telegram_config.webhook_url}/webhook",
            "message": "‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        })
    except Exception as e:
        return jsonify({
            "ok": False,
            "error": str(e)
        }), 500


@app.route('/delete_webhook', methods=['GET', 'POST'])
async def delete_webhook_route():
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è webhook"""
    try:
        await bot_application.bot.delete_webhook()
        return jsonify({
            "ok": True,
            "message": "‚úÖ Webhook —É–¥–∞–ª–µ–Ω"
        })
    except Exception as e:
        return jsonify({
            "ok": False,
            "error": str(e)
        }), 500


@app.route('/menu')
def get_menu_api():
    """API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–Ω—é (–¥–ª—è –≤–µ–±—É)"""
    try:
        if sheets_service:
            menu = sheets_service.get_menu()
            return jsonify({
                "ok": True,
                "items_count": len(menu),
                "menu": menu[:50]  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è API
            })
        return jsonify({"ok": False, "error": "Service unavailable"}), 500
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500


@app.route('/send_message/<int:user_id>/<message>', methods=['POST'])
def send_message(user_id: int, message: str):
    """–ê–¥–º—ñ–Ω API - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–¥–º—ñ–Ω–∞
        if user_id not in telegram_config.admin_ids:
            return jsonify({"ok": False, "error": "Unauthorized"}), 403
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
        # await bot_application.bot.send_message(
        #     chat_id=user_id,
        #     text=message
        # )
        
        return jsonify({"ok": True, "message": "Sent"})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500


# ============================================================================
# Startup and Error Handlers
# ============================================================================

@app.before_request
def before_request():
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º"""
    logger.debug(f"üì® {request.method} {request.path}")


@app.errorhandler(404)
def not_found(error):
    """404 –æ–±—Ä–æ–±–Ω–∏–∫"""
    return jsonify({
        "error": "Not found",
        "available_endpoints": [
            "/",
            "/health",
            "/stats",
            "/webhook",
            "/set_webhook",
            "/delete_webhook",
            "/menu"
        ]
    }), 404


@app.errorhandler(500)
def internal_error(error):
    """500 –æ–±—Ä–æ–±–Ω–∏–∫"""
    logger.error(f"‚ùå Internal error: {error}")
    return jsonify({
        "error": "Internal server error",
        "message": str(error)
    }), 500


def startup():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    logger.info("=" * 70)
    logger.info("üöÄ FERRIKFOOT BOT v2.1 - STARTING")
    logger.info("=" * 70)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
    if not init_services():
        logger.error("‚ùå Failed to start: services initialization failed")
        return False
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è bot application
    create_bot_application()
    
    logger.info("")
    logger.info("‚úÖ Bot started successfully!")
    logger.info("")
    logger.info("üìä FEATURES ENABLED:")
    logger.info("  ‚úì AI Recommendations (Gemini)")
    logger.info("  ‚úì User Badges & Achievements")
    logger.info("  ‚úì Weekly Challenges")
    logger.info("  ‚úì Referral System")
    logger.info("  ‚úì Warm Greetings")
    logger.info("  ‚úì Multi-Partner Platform")
    logger.info("  ‚úì Session Management")
    logger.info("")
    logger.info(f"üåê Running on {app_config.host}:{app_config.port}")
    logger.info(f"üåç Environment: {app_config.environment}")
    logger.info(f"üêõ Debug mode: {app_config.debug}")
    logger.info("")
    logger.info("=" * 70)
    
    return True


# ============================================================================
# Main
# ============================================================================

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫
    if startup():
        # Flask server
        app.run(
            host=app_config.host,
            port=app_config.port,
            debug=app_config.debug,
            use_reloader=False  # Important for Telegram webhook
        )