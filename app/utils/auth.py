"""
üîê AUTHENTICATION - –ë–µ–∑–ø–µ–∫–∞ –∞–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ–π
–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —á—É—Ç–ª–∏–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
"""

import os
import logging
from functools import wraps
from flask import request, jsonify

logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ .env
ADMIN_TOKEN = os.getenv("ADMIN_TOKEN", "")

if not ADMIN_TOKEN:
    logger.warning("‚ö†Ô∏è ADMIN_TOKEN not set! Admin endpoints will be disabled.")


def require_admin_token(f):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω-—Ç–æ–∫–µ–Ω–∞
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    @app.route('/admin/endpoint', methods=['POST'])
    @require_admin_token
    def admin_endpoint():
        return {"ok": True}
    
    –ó–∞–ø–∏—Ç:
    curl -H "X-Admin-Token: secret_token" http://localhost:5000/admin/endpoint
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ –∑–∞–≥–æ–ª–æ–≤–∫—É
        token = request.headers.get('X-Admin-Token')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–æ–∫–µ–Ω
        if not token:
            logger.warning(f"‚ùå Missing admin token from {request.remote_addr}")
            return jsonify({
                "error": "Missing X-Admin-Token header",
                "code": 401
            }), 401
        
        if token != ADMIN_TOKEN:
            logger.warning(f"‚ùå Invalid admin token from {request.remote_addr}")
            return jsonify({
                "error": "Invalid admin token",
                "code": 401
            }), 401
        
        # –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π
        logger.info(f"‚úÖ Admin access granted to {request.remote_addr}")
        return f(*args, **kwargs)
    
    return decorated_function


def get_admin_token() -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥–º—ñ–Ω-—Ç–æ–∫–µ–Ω (–¢–Ü–õ–¨–ö–ò –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)"""
    return ADMIN_TOKEN


def set_admin_token(token: str):
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω-—Ç–æ–∫–µ–Ω (–ü–û–¢–†–Ü–ë–ù–û –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–ò)"""
    global ADMIN_TOKEN
    ADMIN_TOKEN = token
    logger.info("üîê Admin token updated")
