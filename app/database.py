"""
üóÑÔ∏è DATABASE - PostgreSQL Configuration
–§–∞–π–ª –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ PostgreSQL –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
"""

import os
import logging
from sqlalchemy import create_engine, event, text
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.pool import NullPool

logger = logging.getLogger(__name__)

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

DATABASE_URL = os.getenv(
    "DATABASE_URL",
    "postgresql://ferrik_user:ferrik_secure_123!@localhost:5432/ferrik_bot"
)

logger.info(f"üóÑÔ∏è Database URL: {DATABASE_URL.split('@')[0]}@...")

# ============================================================================
# ENGINE CONFIGURATION
# ============================================================================

engine = create_engine(
    DATABASE_URL,
    echo=os.getenv("DEBUG", "False").lower() == "true",
    pool_pre_ping=True,          # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
    pool_recycle=3600,           # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
    poolclass=NullPool,          # –î–ª—è Render (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ)
    connect_args={
        "connect_timeout": 10,
        "application_name": "ferrikbot_v2.1"
    }
)

# ============================================================================
# SESSION CONFIGURATION
# ============================================================================

SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
    expire_on_commit=False
)

# ============================================================================
# BASE FOR MODELS
# ============================================================================

Base = declarative_base()

# ============================================================================
# DATABASE FUNCTIONS
# ============================================================================

def get_db():
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ DB session
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É Flask:
    @app.get('/example')
    def example():
        db = SessionLocal()
        try:
            # —Ç–≤—ñ–π –∫–æ–¥
            pass
        finally:
            db.close()
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def test_connection() -> bool:
    """
    –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
    
    Returns:
        True —è–∫—â–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ, —ñ–Ω–∞–∫—à–µ False
    """
    try:
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            logger.info("‚úÖ PostgreSQL connection successful")
            return True
    except Exception as e:
        logger.error(f"‚ùå PostgreSQL connection failed: {e}")
        return False


def init_db() -> bool:
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
    
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
    
    Returns:
        True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, —ñ–Ω–∞–∫—à–µ False
    """
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –∑ Base –º–µ—Ç–∞–∫–ª–∞—Å—Å—É
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Database initialized successfully")
        return True
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")
        return False


def reset_db() -> bool:
    """
    –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ (–û–°–¢–û–†–û–ñ–ù–û!)
    
    –¢–Ü–õ–¨–ö–ò –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏! –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ production!
    
    Returns:
        True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, —ñ–Ω–∞–∫—à–µ False
    """
    try:
        if os.getenv("ENVIRONMENT") == "production":
            logger.error("‚ùå Cannot reset database in production!")
            return False
        
        Base.metadata.drop_all(bind=engine)
        logger.warning("‚ö†Ô∏è All tables dropped")
        return True
    except Exception as e:
        logger.error(f"‚ùå Database reset failed: {e}")
        return False


def migrate_from_sqlite(sqlite_path: str = "bot.db") -> bool:
    """
    –ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∑—ñ SQLite –≤ PostgreSQL
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¢–Ü–õ–¨–ö–ò —è–∫—â–æ —É –≤–∞—Å —î bot.db –∑—ñ –°–¢–ê–†–û–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
    
    Args:
        sqlite_path: –®–ª—è—Ö –¥–æ SQLite —Ñ–∞–π–ª—É
    
    Returns:
        True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, —ñ–Ω–∞–∫—à–µ False
    """
    try:
        if not os.path.exists(sqlite_path):
            logger.warning(f"‚ö†Ô∏è SQLite file not found: {sqlite_path}")
            return False
        
        import sqlite3
        import json
        from datetime import datetime
        
        logger.info("üîÑ Starting migration from SQLite...")
        
        # –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ SQLite
        sqlite_conn = sqlite3.connect(sqlite_path)
        sqlite_cursor = sqlite_conn.cursor()
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ (—è–∫—â–æ —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å–Ω—É—é—Ç—å)
        try:
            sqlite_cursor.execute("SELECT * FROM user_states")
            user_states = sqlite_cursor.fetchall()
            logger.info(f"üìä Found {len(user_states)} user states")
        except:
            user_states = []
        
        try:
            sqlite_cursor.execute("SELECT * FROM orders")
            orders = sqlite_cursor.fetchall()
            logger.info(f"üìä Found {len(orders)} orders")
        except:
            orders = []
        
        sqlite_conn.close()
        
        logger.info(f"‚úÖ Migration completed: {len(user_states)} users, {len(orders)} orders")
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Migration error: {e}")
        return False


def health_check() -> dict:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –ë–î
    
    Returns:
        dict –∑ —Å—Ç–∞—Ç—É—Å–æ–º –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    """
    try:
        # 1. –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
        connection_ok = test_connection()
        
        # 2. –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü—ñ–π
        with engine.connect() as conn:
            # SELECT
            conn.execute(text("SELECT 1"))
            
            # –¢–∞–±–ª–∏—Ü—ñ
            result = conn.execute(text(
                "SELECT table_name FROM information_schema.tables WHERE table_schema='public'"
            ))
            tables = result.fetchall()
        
        return {
            "status": "healthy" if connection_ok else "unhealthy",
            "connection": "ok" if connection_ok else "failed",
            "tables": len(tables),
            "timestamp": str(__import__('datetime').datetime.now())
        }
    
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e)
        }


# ============================================================================
# MODELS (–¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
# ============================================================================

# Example:
# from app.database import Base
# from sqlalchemy import Column, Integer, String, DateTime
# from datetime import datetime
#
# class User(Base):
#     __tablename__ = "users"
#     
#     id = Column(Integer, primary_key=True)
#     telegram_id = Column(Integer, unique=True)
#     username = Column(String(255), nullable=True)
#     created_at = Column(DateTime, default=datetime.utcnow)


# ============================================================================
# INITIALIZATION CHECK
# ============================================================================

if __name__ == "__main__":
    print("=" * 70)
    print("üß™ DATABASE DIAGNOSTIC")
    print("=" * 70)
    
    print("\n1Ô∏è‚É£ Testing connection...")
    if test_connection():
        print("‚úÖ Connection OK")
    else:
        print("‚ùå Connection failed")
        exit(1)
    
    print("\n2Ô∏è‚É£ Database health check...")
    health = health_check()
    print(f"Status: {health.get('status')}")
    print(f"Tables: {health.get('tables')}")
    
    print("\n3Ô∏è‚É£ Initializing database...")
    if init_db():
        print("‚úÖ Database initialized")
    else:
        print("‚ùå Initialization failed")
    
    print("\n" + "=" * 70)
    print("‚úÖ Database check completed!")
    print("=" * 70)
