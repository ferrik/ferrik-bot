import os
import logging
import json
import re
from flask import Flask, request, jsonify
import requests
from handlers.cart import show_cart, add_item_to_cart, handle_cart_quantity_change, remove_item_from_cart, clear_cart
from handlers.order import start_checkout_process, handle_delivery_type, handle_address_input, handle_payment_method, handle_delivery_time, show_order_confirmation, confirm_order, cancel_order
from handlers.geo import check_delivery_availability
from services.sheets import init_gspread_client, get_menu_from_sheet, get_item_by_id, get_categories, get_items_by_category
from services.telegram import tg_send_message, tg_send_photo, tg_answer_callback, tg_edit_message, notify_operator
from services.gemini import get_gemini_recommendation
from models.user import init_db, get_state, set_state, get_cart, set_cart, get_or_create_user, add_chat_history
from datetime import datetime

try:
    from zoneinfo import ZoneInfo
except ImportError:
    logging.warning("zoneinfo not found. Using naive datetime.")
    ZoneInfo = None

app = Flask(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler('bot.log')]
)
logger = logging.getLogger("ferrik")

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "Ferrik123").strip()
API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()
OPERATOR_CHAT_ID = os.environ.get("OPERATOR_CHAT_ID", "").strip()
DEFAULT_CITY = os.environ.get("DEFAULT_CITY", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å").strip()
TIMEZONE_NAME = os.environ.get("TIMEZONE", "Europe/Kyiv").strip()

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
STATE_NORMAL = "normal"
STATE_AWAITING_PHONE = "awaiting_phone"
STATE_AWAITING_PHONE_CONFIRM = "awaiting_phone_confirm"
STATE_AWAITING_ADDRESS = "awaiting_address"
STATE_AWAITING_PAYMENT_METHOD = "awaiting_payment_method"
STATE_AWAITING_DELIVERY_TYPE = "awaiting_delivery_type"
STATE_AWAITING_DELIVERY_TIME = "awaiting_delivery_time"
STATE_AWAITING_CONFIRMATION = "awaiting_confirmation"
STATE_AWAITING_FEEDBACK = "awaiting_feedback"
STATE_AWAITING_OPERATOR_MESSAGE = "awaiting_operator_message"

def main_keyboard():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    return {
        "inline_keyboard": [
            [{"text": "üçΩÔ∏è –ú–µ–Ω—é", "callback_data": "show_menu"}],
            [{"text": "üõí –ö–æ—à–∏–∫", "callback_data": "show_cart"}],
            [{"text": "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "callback_data": "contact_operator"}],
            [{"text": "üìù –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", "callback_data": "leave_feedback"}]
        ]
    }

def show_menu(chat_id):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"""
    try:
        categories = get_categories()
        if not categories:
            tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, –º–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. üòî")
            return
            
        keyboard = {
            "inline_keyboard": [
                [{"text": f"üçΩÔ∏è {cat}", "callback_data": f"category_{cat}"}] 
                for cat in categories
            ]
        }
        tg_send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –º–µ–Ω—é: üçΩÔ∏è", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing menu: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é. üòî")

def show_category_items(chat_id, category):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç—Ä–∞–≤–∏ –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        items = get_items_by_category(category)
        
        if not items:
            tg_send_message(chat_id, f"–£ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞–≤. üòî")
            return
            
        for item in items:
            text = f"<b>{item['name']}</b>\n"
            text += f"üí∞ –¶—ñ–Ω–∞: {item['price']:.2f} –≥—Ä–Ω\n"
            if item.get("description"):
                text += f"üìù {item['description']}\n"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", "callback_data": f"add_item_{item['ID']}"}]
                ]
            }
            
            if item.get("photo"):
                tg_send_photo(chat_id, item["photo"], text, reply_markup=keyboard)
            else:
                tg_send_message(chat_id, text, reply_markup=keyboard)
                
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"
        back_keyboard = {
            "inline_keyboard": [
                [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", "callback_data": "show_menu"}]
            ]
        }
        tg_send_message(chat_id, "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", reply_markup=back_keyboard)
        
    except Exception as e:
        logger.error(f"Error showing category {category}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. üòî")

def handle_phone_input(chat_id, text):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    phone_number = re.sub(r'[^\d+]', '', text)
    if re.match(r'^\+?3?8?0\d{9}$', phone_number):
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚úÖ –í—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä", "callback_data": f"confirm_phone_{phone_number}"}],
                [{"text": "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π", "callback_data": "change_phone"}]
            ]
        }
        tg_send_message(chat_id, f"–í–∏ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä: {phone_number}. –ß–∏ –≤—ñ—Ä–Ω–∏–π –≤—ñ–Ω? üòä", reply_markup=keyboard)
        set_state(chat_id, STATE_AWAITING_PHONE_CONFIRM)
    else:
        tg_send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX. üì±")

def handle_feedback(chat_id, text):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if OPERATOR_CHAT_ID:
        user_info = {"first_name": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"}  # –ú–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –±–∞–∑–∏
        notify_operator(f"üìù –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫:\n\n{text}", chat_id, user_info)
    
    tg_send_message(chat_id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! üòä –ú–∏ —Ü—ñ–Ω—É—î–º–æ –≤–∞—à—É –¥—É–º–∫—É.")
    set_state(chat_id, STATE_NORMAL)

def handle_operator_message(chat_id, text):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    if OPERATOR_CHAT_ID:
        user_info = {"first_name": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"}
        notify_operator(f"üìû –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n{text}", chat_id, user_info)
        tg_send_message(chat_id, "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É! –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. üìû")
    else:
        tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. üòî")
    
    set_state(chat_id, STATE_NORMAL)

def generate_personalized_greeting(user_name="–î—Ä—É–∂–µ"):
    """–ì–µ–Ω–µ—Ä—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è"""
    user_name = (user_name or '').strip() or '–î—Ä—É–∂–µ'
    current = datetime.now() if not ZoneInfo else datetime.now(ZoneInfo(TIMEZONE_NAME))
    hour = current.hour

    greeting = f"–î–æ–±—Ä–æ–≥–æ {'—Ä–∞–Ω–∫—É' if 6 <= hour < 12 else '–¥–Ω—è' if 12 <= hour < 18 else '–≤–µ—á–æ—Ä–∞'}, {user_name}! üòä"
    status = "–†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π! üçΩÔ∏è –ì–æ—Ç–æ–≤—ñ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è." if is_restaurant_open() else "–†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä–∏—Ç–∏–π. üòî –ü—Ä–∞—Ü—é—î–º–æ –∑ 9:00 –¥–æ 22:00."
    return f"{greeting}\n\n{status}\n\n–Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ! üçîüçï"

def is_restaurant_open():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"""
    current_hour = datetime.now().hour if not ZoneInfo else datetime.now(ZoneInfo(TIMEZONE_NAME)).hour
    return 9 <= current_hour < 22

# Webhook endpoint
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–ª—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Telegram"""
    header_secret = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
    if WEBHOOK_SECRET and header_secret != WEBHOOK_SECRET:
        logger.warning("Invalid webhook secret header: %s", header_secret)
        return jsonify({"ok": False, "error": "invalid secret"}), 403

    update = request.get_json(silent=True)
    if not update:
        logger.warning("Webhook received empty data.")
        return jsonify({"status": "empty"}), 200

    logger.info(f"Update received: {update}")

    # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if "message" in update:
        msg = update["message"]
        chat_id = msg["chat"]["id"]
        user_info = msg.get("from", {})
        text = msg.get("text", "").strip()
        user_state = get_state(chat_id)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        get_or_create_user(
            chat_id, 
            user_info.get("username"),
            user_info.get("first_name"),
            user_info.get("last_name")
        )

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É
        if text:
            add_chat_history(chat_id, text, is_user=True)

        if text == "/start":
            greeting = generate_personalized_greeting(user_info.get("first_name", "–î—Ä—É–∂–µ"))
            tg_send_message(chat_id, greeting, reply_markup=main_keyboard())
            set_state(chat_id, STATE_NORMAL)
        elif text == "/cart":
            show_cart(chat_id)
        elif text.startswith("/add_"):
            item_id = text.replace("/add_", "")
            add_item_to_cart(chat_id, item_id)
        elif user_state == STATE_AWAITING_PHONE:
            handle_phone_input(chat_id, text)
        elif user_state == STATE_AWAITING_ADDRESS:
            handle_address_input(chat_id, text)
        elif user_state == STATE_AWAITING_FEEDBACK:
            handle_feedback(chat_id, text)
        elif user_state == STATE_AWAITING_OPERATOR_MESSAGE:
            handle_operator_message(chat_id, text)
        elif user_state == STATE_AWAITING_DELIVERY_TIME:
            handle_delivery_time(chat_id, text)
        else:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AI –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–±–æ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            try:
                if text and len(text) > 5:  # –Ø–∫—â–æ —Ü–µ —Å–ø—Ä–∞–≤–¥—ñ –∑–∞–ø–∏—Ç
                    ai_response = get_gemini_recommendation(text)
                    tg_send_message(chat_id, ai_response)
                    add_chat_history(chat_id, ai_response, is_user=False)
                else:
                    tg_send_message(chat_id, "–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—Å. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é: üëá", 
                                  reply_markup=main_keyboard())
            except Exception as e:
                logger.error(f"AI response error: {e}")
                tg_send_message(chat_id, "–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—Å. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é: üëá", 
                              reply_markup=main_keyboard())

    # –û–±—Ä–æ–±–∫–∞ callback queries
    if "callback_query" in update:
        cq = update["callback_query"]
        data = cq.get("data", "")
        callback_id = cq.get("id")
        message = cq.get("message", {})
        chat_id = message.get("chat", {}).get("id")
        message_id = message.get("message_id")
        user_info = cq.get("from", {})

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        get_or_create_user(
            chat_id, 
            user_info.get("username"),
            user_info.get("first_name"), 
            user_info.get("last_name")
        )

        if data == "show_menu":
            show_menu(chat_id)
            tg_answer_callback(callback_id)
        elif data == "show_cart":
            show_cart(chat_id)
            tg_answer_callback(callback_id)
        elif data.startswith("category_"):
            category = data.replace("category_", "")
            show_category_items(chat_id, category)
            tg_answer_callback(callback_id)
        elif data.startswith("add_item_"):
            item_id = data.replace("add_item_", "")
            add_item_to_cart(chat_id, item_id)
            tg_answer_callback(callback_id, "–î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫! üõí")
        elif data == "checkout":
            start_checkout_process(chat_id)
            tg_answer_callback(callback_id)
        elif data == "contact_operator":
            tg_send_message(chat_id, "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: üìû")
            set_state(chat_id, STATE_AWAITING_OPERATOR_MESSAGE)
            tg_answer_callback(callback_id)
        elif data == "leave_feedback":
            tg_send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫: üìù")
            set_state(chat_id, STATE_AWAITING_FEEDBACK)
            tg_answer_callback(callback_id)
        elif data.startswith("confirm_phone_"):
            phone_number = data.replace("confirm_phone_", "")
            cart = get_cart(chat_id)
            cart["phone"] = phone_number
            set_cart(chat_id, cart)
            tg_answer_callback(callback_id, text="–ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! ‚úÖ")
            tg_edit_message(chat_id, message_id, "‚úÖ –ù–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥–æ—Å—Ç–∞–≤–∫–∏
            from handlers.order import ask_delivery_type
            ask_delivery_type(chat_id)
        elif data == "change_phone":
            tg_answer_callback(callback_id, text="–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä. üì±")
            tg_edit_message(chat_id, message_id, "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX:")
            set_state(chat_id, STATE_AWAITING_PHONE)
        # –û–±—Ä–æ–±–∫–∞ —Ç–∏–ø—ñ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        elif data.startswith("delivery_type_"):
            delivery_type = data.replace("delivery_type_", "")
            handle_delivery_type(chat_id, delivery_type, callback_id)
        # –û–±—Ä–æ–±–∫–∞ —Å–ø–æ—Å–æ–±—ñ–≤ –æ–ø–ª–∞—Ç–∏
        elif data.startswith("payment_"):
            payment_method = data.replace("payment_", "")
            handle_payment_method(chat_id, payment_method, callback_id)
        # –û–±—Ä–æ–±–∫–∞ —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
        elif data.startswith("delivery_time_"):
            delivery_time = data.replace("delivery_time_", "")
            handle_delivery_time(chat_id, delivery_time, callback_id)
        elif data == "custom_delivery_time":
            tg_answer_callback(callback_id)
            tg_send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 14:30):")
            set_state(chat_id, STATE_AWAITING_DELIVERY_TIME)
        # –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        elif data == "confirm_order":
            confirm_order(chat_id, callback_id)
        elif data == "cancel_order":
            cancel_order(chat_id, callback_id)
        elif data == "edit_order":
            tg_answer_callback(callback_id)
            tg_send_message(chat_id, "–§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫–∏ —â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–∫–∞—Å—É–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ—á–Ω—ñ—Ç—å –∑–∞–Ω–æ–≤–æ.")
        # –û–±—Ä–æ–±–∫–∞ –∫–æ—à–∏–∫–∞
        elif data.startswith("qty_minus_"):
            idx = int(data.replace("qty_minus_", ""))
            handle_cart_quantity_change(chat_id, "minus", idx, callback_id)
        elif data.startswith("qty_plus_"):
            idx = int(data.replace("qty_plus_", ""))
            handle_cart_quantity_change(chat_id, "plus", idx, callback_id)
        elif data.startswith("remove_item_"):
            idx = int(data.replace("remove_item_", ""))
            remove_item_from_cart(chat_id, idx, callback_id)
        elif data == "clear_cart":
            clear_cart(chat_id, callback_id)
        else:
            tg_answer_callback(callback_id, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")

    return jsonify({"ok": True})

# Health check endpoint
@app.route("/health", methods=["GET"])
def health_check():
    """Health check –¥–ª—è Render"""
    return jsonify({
        "status": "ok", 
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    })

# Root endpoint
@app.route("/", methods=["GET"])
def root():
    """–ö–æ—Ä—ñ–Ω–Ω–∏–π endpoint"""
    return jsonify({
        "message": "FerrikFootBot API",
        "status": "running",
        "endpoints": ["/webhook", "/health"]
    })

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
with app.app_context():
    logger.info("Bot initialization started.")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    try:
        init_db()
        logger.info("Database initialized successfully.")
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
    
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Google Sheets
    if init_gspread_client():
        logger.info("Google Sheets connected successfully.")
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω—é –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è
        try:
            menu_items = get_menu_from_sheet(force=True)
            logger.info(f"Menu cached: {len(menu_items)} items")
        except Exception as e:
            logger.error(f"Failed to cache menu: {e}")
    else:
        logger.error("Google Sheets initialization failed.")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
