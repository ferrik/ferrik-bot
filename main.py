"""
ü§ñ Ferrik Bot 2.0 - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–º–∞–∫–æ–≤–∏–π —Å—É–ø—É—Ç–Ω–∏–∫ –∑ AI
"""
import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime

# –Ü–º–ø–æ—Ä—Ç–∏ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from app.config.settings import *
from app.services.session import SessionManager
from app.utils.validators import *
from services.telegram import TelegramAPI
from services.sheets import SheetsAPI
from services.database import Database

# –ù–æ–≤—ñ –º–æ–¥—É–ª—ñ
from welcome_messages import WelcomeMessages
from onboarding_quest import OnboardingQuest, QuestStage
from menu_formatter import MenuFormatter
from mood_recommender import MoodRecommender
from gamification import GamificationManager, Badge, BadgeType, UserLevel
from referral import ReferralSystem
from friendly_errors import FriendlyMessages, SupportSystem, ErrorType

# ============================================================================
# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
# ============================================================================
app = Flask(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
telegram = TelegramAPI(TELEGRAM_BOT_TOKEN)
sheets = SheetsAPI()
db = Database(DATABASE_PATH)
session_manager = SessionManager(db)

# ============================================================================
# –°—Ç–∞–Ω–∏ –±–æ—Ç–∞
# ============================================================================
class BotState:
    """–†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å—Ç–∞–Ω–∏ –±–æ—Ç–∞"""
    IDLE = "idle"
    BROWSING_MENU = "browsing_menu"
    VIEWING_ITEM = "viewing_item"
    AWAITING_PHONE = "awaiting_phone"
    AWAITING_ADDRESS = "awaiting_address"
    AWAITING_PAYMENT = "awaiting_payment"
    
    # –ù–æ–≤—ñ —Å—Ç–∞–Ω–∏
    ONBOARDING_QUEST = "onboarding_quest"
    MOOD_SELECTION = "mood_selection"
    SEARCHING_MENU = "searching_menu"
    LEAVING_REVIEW = "leaving_review"
    SUPPORT_CHAT = "support_chat"


# ============================================================================
# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ============================================================================

def handle_start_command(user_id: int, user_name: str = None, referral_code: str = None):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start –∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º —Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    user_data = db.get_user(user_id)
    is_new_user = user_data is None
    
    if is_new_user:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        db.create_user(user_id, user_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
        
        # –û–±—Ä–æ–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É
        if referral_code and ReferralSystem.validate_referral_code(referral_code):
            referrer_id = db.get_user_by_referral_code(referral_code)
            if referrer_id:
                # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –±–æ–Ω—É—Å–∏
                bonus_data = ReferralSystem.apply_referral_bonus(referrer_id, user_id)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                db.save_referral(referrer_id, user_id, referral_code)
                
                # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å–∏ –æ–±–æ–º
                db.add_bonus_points(referrer_id, bonus_data['referrer']['bonus_points'])
                db.add_bonus_points(user_id, bonus_data['referee']['bonus_points'])
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                telegram.send_message(
                    referrer_id,
                    ReferralSystem.format_bonus_notification(bonus_data['referrer'], 'referrer')
                )
                telegram.send_message(
                    user_id,
                    ReferralSystem.format_bonus_notification(bonus_data['referee'], 'referee')
                )
        
        # –í–∏–¥–∞—î–º–æ –±–µ–π–¥–∂ "–î–æ—Å–ª—ñ–¥–Ω–∏–∫"
        GamificationManager.award_badge(user_id, BadgeType.EXPLORER)
        
    # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    greeting = WelcomeMessages.get_greeting_text(user_name, is_new_user)
    keyboard = WelcomeMessages.get_onboarding_keyboard()
    
    telegram.send_message(user_id, greeting, reply_markup=keyboard)
    
    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∫–≤–µ—Å—Ç –Ω–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    if is_new_user:
        session_manager.set_state(user_id, BotState.ONBOARDING_QUEST)
        quest_intro = OnboardingQuest.get_quest_intro()
        quest_keyboard = OnboardingQuest.get_quest_keyboard(QuestStage.NOT_STARTED)
        telegram.send_message(user_id, quest_intro, reply_markup=quest_keyboard)


def handle_menu_command(user_id: int, category: str = None):
    """
    –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∑ –∫—Ä–∞—Å–∏–≤–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é –∑ –∫–µ—à—É –∞–±–æ Google Sheets
        menu_items = sheets.get_menu()
        
        if not menu_items:
            error_msg = FriendlyMessages.get_error_message(ErrorType.NOT_FOUND)
            telegram.send_message(user_id, error_msg)
            return
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é, —è–∫—â–æ –∑–∞–¥–∞–Ω–æ
        if category:
            menu_items = [item for item in menu_items if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '').lower() == category.lower()]
        
        # –ì—Ä—É–ø—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        categories = {}
        for item in menu_items:
            cat = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ')
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(item)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–Ω—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        session_manager.set_state(user_id, BotState.BROWSING_MENU)
        
        intro_msg = "üìã **–ù–∞—à–µ –º–µ–Ω—é**\n\n–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –ø–æ—à—É–∫–æ–º! üîç"
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        keyboard = {
            'inline_keyboard': []
        }
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ø–æ 2 –≤ —Ä—è–¥)
        cat_list = list(categories.keys())
        for i in range(0, len(cat_list), 2):
            row = []
            for j in range(i, min(i + 2, len(cat_list))):
                cat = cat_list[j]
                emoji = MenuFormatter.get_category_emoji(cat)
                row.append({
                    'text': f'{emoji} {cat}',
                    'callback_data': f'cat_{cat}'
                })
            keyboard['inline_keyboard'].append(row)
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
        keyboard['inline_keyboard'].append([
            {'text': 'üîç –ü–æ—à—É–∫', 'callback_data': 'search_menu'},
            {'text': 'üéØ –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É', 'callback_data': 'recommend'}
        ])
        keyboard['inline_keyboard'].append([
            {'text': 'üõí –ö–æ—à–∏–∫', 'callback_data': 'view_cart'},
            {'text': 'üéÅ –ê–∫—Ü—ñ—ó', 'callback_data': 'promo'}
        ])
        
        telegram.send_message(user_id, intro_msg, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in handle_menu: {e}")
        error_msg = FriendlyMessages.get_error_message(ErrorType.SERVER)
        telegram.send_message(user_id, error_msg)


def handle_recommend_command(user_id: int):
    """
    AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—Ä–æ—é
    """
    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π
    mood_text = WelcomeMessages.get_mood_selection_text()
    mood_keyboard = WelcomeMessages.get_mood_keyboard()
    
    session_manager.set_state(user_id, BotState.MOOD_SELECTION)
    telegram.send_message(user_id, mood_text, reply_markup=mood_keyboard)


def handle_mood_selection(user_id: int, mood: str):
    """
    –û–±—Ä–æ–±–∫–∞ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ—é —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    """
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    waiting_msg = FriendlyMessages.get_waiting_message()
    telegram.send_message(user_id, waiting_msg)
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é
        menu_items = sheets.get_menu()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_history = db.get_user_order_history(user_id)
        ordered_items = [str(item['item_id']) for item in user_history]
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        recommendations = MoodRecommender.recommend(
            menu_items, 
            mood, 
            limit=3,
            user_history=ordered_items
        )
        
        if recommendations:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
            rec_text = MoodRecommender.format_recommendations(recommendations, mood)
            rec_keyboard = MoodRecommender.create_recommendation_keyboard(recommendations)
            
            telegram.send_message(user_id, rec_text, reply_markup=rec_keyboard)
        else:
            error_msg = FriendlyMessages.get_error_message(ErrorType.NOT_FOUND)
            telegram.send_message(user_id, error_msg)
    
    except Exception as e:
        logger.error(f"Error in mood recommendation: {e}")
        error_msg = FriendlyMessages.get_error_message(ErrorType.SERVER)
        telegram.send_message(user_id, error_msg)


def handle_cart_command(user_id: int):
    """
    –ü–æ–∫–∞–∑—É—î –∫–æ—à–∏–∫ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º
    """
    cart_items = session_manager.get_cart(user_id)
    
    if not cart_items:
        empty_msg = FriendlyMessages.get_error_message(ErrorType.CART_EMPTY)
        telegram.send_message(user_id, empty_msg)
        return
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É
    total = sum(item['price'] * item['quantity'] for item in cart_items)
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∫–æ—à–∏–∫
    cart_text = MenuFormatter.format_cart(cart_items, total)
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    keyboard = {
        'inline_keyboard': [
            [
                {'text': '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'callback_data': 'checkout'},
                {'text': 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫', 'callback_data': 'clear_cart'}
            ],
            [
                {'text': '‚ûï –î–æ–¥–∞—Ç–∏ —â–µ', 'callback_data': 'menu'},
                {'text': 'üè† –ì–æ–ª–æ–≤–Ω–∞', 'callback_data': 'main_menu'}
            ]
        ]
    }
    
    telegram.send_message(user_id, cart_text, reply_markup=keyboard)


def handle_checkout(user_id: int):
    """
    –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    """
    cart_items = session_manager.get_cart(user_id)
    
    if not cart_items:
        empty_msg = FriendlyMessages.get_error_message(ErrorType.CART_EMPTY)
        telegram.send_message(user_id, empty_msg)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
    user_data = db.get_user(user_id)
    phone = user_data.get('phone')
    address = user_data.get('address')
    
    if not phone:
        # –ó–∞–ø–∏—Ç—É—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
        session_manager.set_state(user_id, BotState.AWAITING_PHONE)
        msg = (
            "üì± **–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è**\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
            "–§–æ—Ä–º–∞—Ç: +380501234567"
        )
        telegram.send_message(user_id, msg)
    elif not address:
        # –ó–∞–ø–∏—Ç—É—î–º–æ –∞–¥—Ä–µ—Å—É
        session_manager.set_state(user_id, BotState.AWAITING_ADDRESS)
        msg = (
            "üìç **–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏**\n\n"
            "–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            "_–≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 15, –∫–≤. 10_"
        )
        telegram.send_message(user_id, msg)
    else:
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        confirm_order(user_id, phone, address)


def confirm_order(user_id: int, phone: str, address: str):
    """
    –§—ñ–Ω–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    """
    cart_items = session_manager.get_cart(user_id)
    total = sum(item['price'] * item['quantity'] for item in cart_items)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order_number = db.generate_order_number()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
    order_id = db.save_order(
        user_id=user_id,
        order_number=order_number,
        phone=phone,
        address=address,
        items=cart_items,
        total=total
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Google Sheets
    sheets.save_order({
        'order_id': order_id,
        'order_number': order_number,
        'user_id': user_id,
        'phone': phone,
        'address': address,
        'items': cart_items,
        'total': total,
        'status': 'new'
    })
    
    # –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫
    session_manager.clear_cart(user_id)
    
    # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ (1 –±–∞–ª –∑–∞ 10 –≥—Ä–Ω)
    points_earned = int(total / 10)
    db.add_bonus_points(user_id, points_earned)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    user_stats = db.get_user_stats(user_id)
    new_badges = GamificationManager.check_badge_eligibility(user_stats)
    
    for badge in new_badges:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î —Ü–µ–π –±–µ–π–¥–∂
        if not db.user_has_badge(user_id, badge):
            badge_data = GamificationManager.award_badge(user_id, badge)
            db.save_badge(user_id, badge.value, badge_data['xp_bonus'])
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    order_data = {
        'order_number': order_number,
        'items': cart_items,
        'total': total,
        'phone': phone,
        'address': address,
        'delivery_time': '45-60 —Ö–≤'
    }
    
    confirmation_text = MenuFormatter.format_order_confirmation(order_data)
    success_text = FriendlyMessages.get_success_message('order_placed')
    
    telegram.send_message(user_id, success_text)
    telegram.send_message(user_id, confirmation_text)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –±–∞–ª–∏
    if points_earned > 0:
        points_msg = f"‚≠ê –¢–∏ –∑–∞—Ä–æ–±–∏–≤ {points_earned} –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤!"
        telegram.send_message(user_id, points_msg)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ –±–µ–π–¥–∂—ñ
    if new_badges:
        for badge in new_badges:
            badge_info = Badge.get_badge_info(badge)
            badge_msg = (
                f"üèÜ **–ù–æ–≤–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è!**\n\n"
                f"{badge_info['emoji']} {badge_info['name']}\n"
                f"_{badge_info['description']}_\n\n"
                f"+{badge_info['points']} XP"
            )
            telegram.send_message(user_id, badge_msg)
    
    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ —á–µ—Ä–µ–∑ 30 —Ö–≤ (–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫)
    # schedule_review_request(user_id, order_id, delay_minutes=30)
    
    session_manager.set_state(user_id, BotState.IDLE)


def handle_profile_command(user_id: int):
    """
    –ü–æ–∫–∞–∑—É—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏
    """
    user_data = db.get_user_with_stats(user_id)
    
    if not user_data:
        telegram.send_message(user_id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    profile_text = GamificationManager.format_profile(user_data)
    
    keyboard = {
        'inline_keyboard': [
            [
                {'text': 'üèÜ –í—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è', 'callback_data': 'view_badges'},
                {'text': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data': 'view_stats'}
            ],
            [
                {'text': 'üéØ –ß–µ–ª–µ–Ω–¥–∂—ñ', 'callback_data': 'view_challenges'},
                {'text': 'üéÅ –†–µ—Ñ–µ—Ä–∞–ª–∏', 'callback_data': 'referral'}
            ],
            [
                {'text': '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', 'callback_data': 'settings'}
            ]
        ]
    }
    
    telegram.send_message(user_id, profile_text, reply_markup=keyboard)


def handle_referral_command(user_id: int):
    """
    –ü–æ–∫–∞–∑—É—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É
    """
    user_data = db.get_user(user_id)
    referrals_count = db.get_referrals_count(user_id)
    
    ref_info = ReferralSystem.get_referral_info(user_id, referrals_count)
    ref_message = ReferralSystem.format_referral_message(
        ref_info, 
        user_data.get('name')
    )
    ref_keyboard = ReferralSystem.create_referral_keyboard(ref_info['code'])
    
    telegram.send_message(user_id, ref_message, reply_markup=ref_keyboard)


def handle_support_command(user_id: int):
    """
    –ü–æ–∫–∞–∑—É—î FAQ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫—É
    """
    faq_message = SupportSystem.get_faq_message()
    faq_keyboard = SupportSystem.get_faq_keyboard()
    
    telegram.send_message(user_id, faq_message, reply_markup=faq_keyboard)


# ============================================================================
# Webhook –æ–±—Ä–æ–±–Ω–∏–∫
# ============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """–ì–æ–ª–æ–≤–Ω–∏–π webhook –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        update = request.get_json()
        logger.info(f"Received update: {update}")
        
        # –û–±—Ä–æ–±–∫–∞ callback queries (–∫–Ω–æ–ø–∫–∏)
        if 'callback_query' in update:
            handle_callback_query(update['callback_query'])
        
        # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        elif 'message' in update:
            handle_message(update['message'])
        
        return jsonify({'ok': True})
    
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({'ok': False, 'error': str(e)}), 500


def handle_message(message: dict):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = message['from']['id']
    user_name = message['from'].get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
    text = message.get('text', '')
    
    # –ö–æ–º–∞–Ω–¥–∏
    if text.startswith('/'):
        command = text.split()[0].lower()
        
        if command == '/start':
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥
            ref_code = text.split()[1] if len(text.split()) > 1 else None
            handle_start_command(user_id, user_name, ref_code)
        
        elif command == '/menu':
            handle_menu_command(user_id)
        
        elif command == '/cart':
            handle_cart_command(user_id)
        
        elif command == '/profile':
            handle_profile_command(user_id)
        
        elif command == '/referral':
            handle_referral_command(user_id)
        
        elif command == '/support':
            handle_support_command(user_id)
        
        elif command == '/help':
            help_text = (
                "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n\n"
                "/menu - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é\n"
                "/cart - –ú—ñ–π –∫–æ—à–∏–∫\n"
                "/profile - –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
                "/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞\n"
                "/support - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞\n"
                "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞"
            )
            telegram.send_message(user_id, help_text)
        
        return
    
    # –û–±—Ä–æ–±–∫–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—Ç–∞–Ω—É
    state = session_manager.get_state(user_id)
    
    if state == BotState.AWAITING_PHONE:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if validate_phone(text):
            phone = normalize_phone(text)
            db.update_user_phone(user_id, phone)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∞–¥—Ä–µ—Å–∏
            session_manager.set_state(user_id, BotState.AWAITING_ADDRESS)
            msg = (
                "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
                "üìç –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                "_–≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 15, –∫–≤. 10_"
            )
            telegram.send_message(user_id, msg)
        else:
            error_msg = (
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É\n\n"
                "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "+380501234567"
            )
            telegram.send_message(user_id, error_msg)
    
    elif state == BotState.AWAITING_ADDRESS:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–¥—Ä–µ—Å–∏
        if validate_address(text):
            address = sanitize_input(text)
            db.update_user_address(user_id, address)
            
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            user_data = db.get_user(user_id)
            confirm_order(user_id, user_data['phone'], address)
        else:
            error_msg = (
                "‚ùå –ê–¥—Ä–µ—Å–∞ –∑–¥–∞—î—Ç—å—Å—è –Ω–µ–ø–æ–≤–Ω–æ—é\n\n"
                "–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É:\n"
                "_–≤—É–ª. –ù–∞–∑–≤–∞, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É, –∫–≤–∞—Ä—Ç–∏—Ä–∞_"
            )
            telegram.send_message(user_id, error_msg)
    
    elif state == BotState.SEARCHING_MENU:
        # –ü–æ—à—É–∫ –ø–æ –º–µ–Ω—é
        handle_search(user_id, text)
    
    else:
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ –∞–±–æ –ø—ñ–¥–∫–∞–∑–∫–∞
        if len(text) > 3:
            handle_search(user_id, text)
        else:
            telegram.send_message(
                user_id, 
                "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:\n/menu /cart /profile"
            )


def handle_callback_query(callback: dict):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = callback['from']['id']
    data = callback['data']
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback (–ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≥–æ–¥–∏–Ω–Ω–∏–∫)
    telegram.answer_callback_query(callback['id'])
    
    # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö callback'—ñ–≤
    if data == 'menu':
        handle_menu_command(user_id)
    
    elif data == 'view_cart':
        handle_cart_command(user_id)
    
    elif data == 'recommend':
        handle_recommend_command(user_id)
    
    elif data.startswith('mood_'):
        mood = data.split('_')[1]
        handle_mood_selection(user_id, mood)
    
    elif data.startswith('cat_'):
        category = data.split('_', 1)[1]
        show_category_items(user_id, category)
    
    elif data.startswith('item_'):
        item_id = data.split('_')[1]
        show_item_details(user_id, item_id)
    
    elif data.startswith('add_'):
        item_id = data.split('_')[1]
        add_to_cart(user_id, item_id)
    
    elif data == 'checkout':
        handle_checkout(user_id)
    
    elif data == 'referral':
        handle_referral_command(user_id)
    
    elif data.startswith('faq_'):
        faq_key = data.split('_')[1]
        show_faq_answer(user_id, faq_key)
    
    # ... —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏


# ============================================================================
# –ó–∞–ø—É—Å–∫
# ============================================================================

if __name__ == '__main__':
    logger.info("üöÄ Ferrik Bot 2.0 starting...")
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))
