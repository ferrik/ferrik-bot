# services/models.py
"""
üóÑÔ∏è –ú–û–î–ï–õ–Ü –ë–î - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—å
"""

from sqlalchemy import create_engine, Column, String, Integer, Float, DateTime, JSON, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

Base = declarative_base()

# ============================================================================
# –ú–ï–ù–Æ –¢–û–í–ê–†–Ü–í
# ============================================================================

class MenuItem(Base):
    """–ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä—É –≤ –º–µ–Ω—é"""
    __tablename__ = 'menu_items'
    
    id = Column(String, primary_key=True)
    category = Column(String, index=True)
    name = Column(String, nullable=False)
    description = Column(String)
    price = Column(Float, nullable=False)
    restaurant = Column(String)
    delivery_time = Column(Integer)  # —Ö–≤–∏–ª–∏–Ω–∏
    photo_url = Column(String)
    active = Column(Boolean, default=True)
    prep_time = Column(Integer)  # —á–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è
    allergens = Column(String)
    rating = Column(Float)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'category': self.category,
            'price': self.price,
            'description': self.description,
            'photo_url': self.photo_url,
            'rating': self.rating,
            'delivery_time': self.delivery_time,
        }


# ============================================================================
# –ö–û–®–ò–ö –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# ============================================================================

class UserCart(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ—à–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    __tablename__ = 'user_carts'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(String, nullable=False, index=True)
    item_id = Column(String, nullable=False)
    item_name = Column(String)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
    quantity = Column(Integer, default=1)
    price = Column(Float)  # –¶—ñ–Ω–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ
    added_at = Column(DateTime, default=datetime.utcnow)
    
    def to_dict(self):
        return {
            'id': self.id,
            'item_id': self.item_id,
            'item_name': self.item_name,
            'quantity': self.quantity,
            'price': self.price,
            'total': self.quantity * self.price,
        }


# ============================================================================
# –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
# ============================================================================

class Order(Base):
    """–ú–æ–¥–µ–ª—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    __tablename__ = 'orders'
    
    id = Column(String, primary_key=True)
    order_number = Column(String, unique=True, index=True)  # #00001, #00002
    user_id = Column(String, nullable=False, index=True)
    
    # –¢–æ–≤–∞—Ä–∏
    items = Column(JSON, nullable=False)  # [{id, name, qty, price}, ...]
    total_amount = Column(Float, nullable=False)
    
    # –î–æ—Å—Ç–∞–≤–∫–∞
    address = Column(String)
    phone = Column(String)
    delivery_time = Column(Integer)  # —Ö–≤–∏–ª–∏–Ω–∏
    
    # –û–ø–ª–∞—Ç–∞
    payment_method = Column(String)  # card, cash, online
    status = Column(String, default='pending')  # pending, confirmed, delivered, cancelled
    
    # –ö–æ–º—ñ—Å—ñ—è
    restaurant_id = Column(String)
    commission_rate = Column(Float)  # %
    commission_amount = Column(Float)  # –≥—Ä–Ω
    
    # –ü—Ä–æ–º–æ–∫–æ–¥
    promo_code = Column(String)
    discount_amount = Column(Float, default=0)
    
    # –ë–æ–Ω—É—Å–∏
    bonus_used = Column(Float, default=0)
    bonus_earned = Column(Float)  # 5% –≤—ñ–¥ —Å—É–º–∏
    
    # –ß–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏
    created_at = Column(DateTime, default=datetime.utcnow)
    confirmed_at = Column(DateTime)
    delivered_at = Column(DateTime)
    
    def to_dict(self):
        return {
            'id': self.id,
            'order_number': self.order_number,
            'user_id': self.user_id,
            'items': self.items,
            'total_amount': self.total_amount,
            'address': self.address,
            'phone': self.phone,
            'status': self.status,
            'created_at': self.created_at.isoformat() if self.created_at else None,
        }


# ============================================================================
# –ö–û–†–ò–°–¢–£–í–ê–ß & –ë–û–ù–£–°–ò
# ============================================================================

class User(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    __tablename__ = 'users'
    
    id = Column(String, primary_key=True)  # Telegram user_id
    username = Column(String)
    first_name = Column(String)
    last_name = Column(String)
    phone = Column(String)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_orders = Column(Integer, default=0)
    total_spent = Column(Float, default=0)
    
    # –ë–æ–Ω—É—Å–∏
    bonus_balance = Column(Float, default=0)
    
    # –†–µ—Ñ–µ—Ä–∞–ª–∏
    referral_code = Column(String, unique=True)
    referred_by = Column(String)  # user_id —Ç–æ–≥–æ —Ö—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–≤
    referrals_count = Column(Integer, default=0)
    
    # –°—Ç–∞—Ç—É—Å
    joined_at = Column(DateTime, default=datetime.utcnow)
    last_order_at = Column(DateTime)
    
    def to_dict(self):
        return {
            'id': self.id,
            'username': self.username,
            'phone': self.phone,
            'total_orders': self.total_orders,
            'total_spent': self.total_spent,
            'bonus_balance': self.bonus_balance,
        }


# ============================================================================
# –ü–†–û–ú–û–ö–û–î–ò
# ============================================================================

class PromoCode(Base):
    """–ú–æ–¥–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥—É"""
    __tablename__ = 'promo_codes'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    code = Column(String, unique=True, index=True)
    discount_percent = Column(Float)  # % –∑–Ω–∏–∂–∫–∏
    discount_amount = Column(Float)  # –∞–±—Å–æ–ª—é—Ç–Ω–∞ –∑–Ω–∏–∂–∫–∞
    
    limit_uses = Column(Integer)  # –ª—ñ–º—ñ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    current_uses = Column(Integer, default=0)
    
    valid_from = Column(DateTime)
    valid_until = Column(DateTime)
    
    status = Column(String, default='active')  # active, expired, disabled
    created_by = Column(String)  # partner_id
    
    def to_dict(self):
        return {
            'code': self.code,
            'discount_percent': self.discount_percent,
            'discount_amount': self.discount_amount,
            'valid_until': self.valid_until.isoformat() if self.valid_until else None,
        }


# ============================================================================
# –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–î
# ============================================================================

def init_db(database_url: str):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π –ë–î —Ç–∞ —Å—Ç–≤–æ—Ä–∏ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ"""
    try:
        engine = create_engine(database_url, echo=False)
        Base.metadata.create_all(engine)
        logger.info("‚úÖ Database tables created/verified")
        return engine
    except Exception as e:
        logger.error(f"‚ùå Database initialization error: {e}")
        raise


def get_session(engine):
    """–û—Ç—Ä–∏–º–∞–π —Å–µ—Å—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î"""
    Session = sessionmaker(bind=engine)
    return Session()