"""
ü§ñ AI Recommender - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
"""
import random
from datetime import datetime
from typing import List, Dict

class AIRecommender:
    """–†–æ–∑—É–º–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    
    def __init__(self, db, sheets):
        self.db = db
        self.sheets = sheets
    
    def get_recommendations(self, user_id: int, context: str = 'general') -> List[Dict]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        
        context: 'morning', 'lunch', 'dinner', 'late_night', 'general'
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
        orders = self.db.get_user_orders(user_id)
        menu = self.sheets.get_menu_items()
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è
        favorite_categories = self._analyze_preferences(orders)
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ —á–∞—Å—É –¥–æ–±–∏
        menu = self._filter_by_time(menu, context)
        
        # –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ
        recommended = self._score_items(menu, favorite_categories)
        
        return recommended[:5]  # –¢–æ–ø-5
    
    def _analyze_preferences(self, orders: List) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ –≤–ø–æ–¥–æ–±–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        categories = {}
        
        for order in orders:
            # –ü–∞—Ä—Å–∏–º–æ items_json
            items = order.get('items_json', [])
            if isinstance(items, str):
                import json
                items = json.loads(items)
            
            for item in items:
                cat = item.get('category', '–Ü–Ω—à–µ')
                categories[cat] = categories.get(cat, 0) + 1
        
        return categories
    
    def _filter_by_time(self, menu: List, context: str) -> List:
        """–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —á–∞—Å—É –¥–æ–±–∏"""
        hour = datetime.now().hour
        
        if context == 'morning' or 6 <= hour < 11:
            # –°–Ω—ñ–¥–∞–Ω–∫–∏
            keywords = ['—Å–Ω—ñ–¥–∞–Ω–æ–∫', '–∫–∞—à–∞', '–æ–º–ª–µ—Ç', '–ø–∞–Ω–∫–µ–π–∫']
        elif context == 'lunch' or 11 <= hour < 16:
            # –û–±—ñ–¥–∏
            keywords = ['—Å—É–ø', '—Å–∞–ª–∞—Ç', '–∫–æ–º–±–æ', '–ª–∞–Ω—á']
        elif context == 'dinner' or 16 <= hour < 22:
            # –í–µ—á–µ—Ä—ñ
            keywords = ['–ø—ñ—Ü–∞', '–±—É—Ä–≥–µ—Ä', '–ø–∞—Å—Ç–∞', '—Å—Ç–µ–π–∫']
        else:
            # –ü—ñ–∑–Ω—è –≤–µ—á–µ—Ä—è
            keywords = ['–∑–∞–∫—É—Å–∫–∞', '–¥–µ—Å–µ—Ä—Ç', '–Ω–∞–ø—ñ–π']
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ
        filtered = []
        for item in menu:
            name = item.get('–°—Ç—Ä–∞–≤–∏', '').lower()
            desc = item.get('–û–ø–∏—Å', '').lower()
            
            if any(kw in name or kw in desc for kw in keywords):
                filtered.append(item)
        
        return filtered if filtered else menu  # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ - –≤—Å–µ –º–µ–Ω—é
    
    def _score_items(self, menu: List, preferences: Dict) -> List:
        """–û—Ü—ñ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ —Å—Ç—Ä–∞–≤"""
        scored = []
        
        for item in menu:
            score = 0
            
            # –ë–æ–Ω—É—Å –∑–∞ —É–ª—é–±–ª–µ–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
            cat = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '')
            if cat in preferences:
                score += preferences[cat] * 10
            
            # –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥
            rating = item.get('–†–µ–π—Ç–∏–Ω–≥', 0)
            if rating:
                score += float(rating) * 5
            
            # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å (–≤–∏–ø–∞–¥–∫–æ–≤–æ –¥–ª—è –¥–µ–º–æ)
            score += random.randint(0, 20)
            
            scored.append((item, score))
        
        # –°–æ—Ä—Ç—É—î–º–æ
        scored.sort(key=lambda x: x[1], reverse=True)
        
        return [item for item, score in scored]
    
    def get_mood_recommendations(self, mood: str) -> List[Dict]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –Ω–∞—Å—Ç—Ä–æ—é"""
        menu = self.sheets.get_menu_items()
        
        mood_map = {
            'happy': ['–¥–µ—Å–µ—Ä—Ç', '–ø—ñ—Ü–∞', '–±—É—Ä–≥–µ—Ä'],  # –í–µ—Å–µ–ª–µ
            'hungry': ['–∫–æ–º–±–æ', '—Å—Ç–µ–π–∫', '–±—É—Ä–≥–µ—Ä'],  # –ì–æ–ª–æ–¥–Ω–∏–π
            'lazy': ['–ø—ñ—Ü–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–≥–æ—Ç–æ–≤–µ'],  # –õ—ñ–Ω–∏–≤–∏–π
            'romantic': ['–ø–∞—Å—Ç–∞', '–≤–∏–Ω–æ', '–¥–µ—Å–µ—Ä—Ç'],  # –†–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π
            'healthy': ['—Å–∞–ª–∞—Ç', '—Å—É–ø', '—Ä–∏—Å']  # –ó–¥–æ—Ä–æ–≤–µ
        }
        
        keywords = mood_map.get(mood, [])
        
        filtered = []
        for item in menu:
            name = item.get('–°—Ç—Ä–∞–≤–∏', '').lower()
            desc = item.get('–û–ø–∏—Å', '').lower()
            
            if any(kw in name or kw in desc for kw in keywords):
                filtered.append(item)
        
        return filtered[:5]
    
    def search_by_query(self, query: str) -> List[Dict]:
        """–ü–æ—à—É–∫ –ø–æ –∑–∞–ø–∏—Ç—É (NLP-–ø–æ–¥—ñ–±–Ω–∏–π)"""
        menu = self.sheets.get_menu_items()
        query = query.lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        keywords = query.split()
        
        results = []
        for item in menu:
            name = item.get('–°—Ç—Ä–∞–≤–∏', '').lower()
            desc = item.get('–û–ø–∏—Å', '').lower()
            tags = item.get('–ê–ª–ª–µ—Ä–≥–µ–Ω–∏', '').lower()
            
            # –®—É–∫–∞—î–º–æ –∑–±—ñ–≥–∏
            matches = sum(
                1 for kw in keywords 
                if kw in name or kw in desc or kw in tags
            )
            
            if matches > 0:
                results.append((item, matches))
        
        # –°–æ—Ä—Ç—É—î–º–æ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ
        results.sort(key=lambda x: x[1], reverse=True)
        
        return [item for item, score in results[:10]] 