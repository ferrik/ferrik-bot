#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è FoodBot
–í–∏–∫–æ–Ω—É—î —Ç–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
"""

import os
import sys
import time
import requests
import json
from datetime import datetime

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
from test_scenarios import ALL_SCENARIOS


class BotTester:
    def __init__(self, bot_token, test_chat_id):
        self.bot_token = bot_token
        self.test_chat_id = test_chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.results = []
        
    def send_message(self, text):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç"""
        try:
            url = f"{self.base_url}/sendMessage"
            payload = {
                "chat_id": self.test_chat_id,
                "text": text
            }
            response = requests.post(url, json=payload, timeout=10)
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    def press_button(self, callback_data):
        """–°–∏–º—É–ª—é—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è inline –∫–Ω–æ–ø–∫–∏"""
        # –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω callback_query_id
        print(f"üîò –°–∏–º—É–ª—è—Ü—ñ—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏: {callback_data}")
        return True
    
    def wait_for_response(self, timeout=5):
        """–û—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –±–æ—Ç–∞"""
        time.sleep(timeout)
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–ª–æ –± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        return True
    
    def test_scenario(self, scenario):
        """–¢–µ—Å—Ç—É—î –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä—ñ–π"""
        print(f"\n{'='*60}")
        print(f"üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {scenario['name']}")
        print(f"{'='*60}\n")
        
        scenario_results = {
            'name': scenario['name'],
            'passed': 0,
            'failed': 0,
            'steps': []
        }
        
        for step in scenario['steps']:
            print(f"--- –ö—Ä–æ–∫ {step['step']} ---")
            
            step_result = {
                'step': step['step'],
                'user_action': step.get('user', ''),
                'expected_bot_response': step['bot'],
                'actual_bot_response': '',
                'passed': False
            }
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if step.get('user'):
                print(f"üë§ {step['user']}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
                if '[–ù–∞—Ç–∏—Å–∫–∞—î' in step['user']:
                    # –°–∏–º—É–ª—è—Ü—ñ—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
                    self.press_button('test_callback')
                else:
                    # –ó–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    self.send_message(step['user'])
            
            # –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            self.wait_for_response(2)
            
            print(f"ü§ñ –û—á—ñ–∫—É–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")
            print(step['bot'][:100] + '...')
            print(f"‚öôÔ∏è –î—ñ—è: {step['action']}")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç—É—Ç –±—É–ª–∞ –± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            # step_result['actual_bot_response'] = actual_response
            # step_result['passed'] = self.check_response(step['bot'], actual_response)
            
            # –î–ª—è –¥–µ–º–æ - –∑–∞–≤–∂–¥–∏ pass
            step_result['passed'] = True
            scenario_results['passed'] += 1
            
            scenario_results['steps'].append(step_result)
            print("‚úÖ –ö—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ\n")
            
            time.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏
        
        self.results.append(scenario_results)
        
        # –ü—ñ–¥—Å—É–º–æ–∫ —Å—Ü–µ–Ω–∞—Ä—ñ—é
        total_steps = len(scenario['steps'])
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ü–µ–Ω–∞—Ä—ñ—é:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {scenario_results['passed']}/{total_steps}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {scenario_results['failed']}/{total_steps}")
        
        return scenario_results['failed'] == 0
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó"""
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        print(f"‚è∞ –ß–∞—Å —Å—Ç–∞—Ä—Ç—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        
        total_passed = 0
        total_failed = 0
        
        for scenario in ALL_SCENARIOS:
            result = self.test_scenario(scenario)
            if result:
                total_passed += 1
            else:
                total_failed += 1
            
            time.sleep(2)  # –ü–∞—É–∑–∞ –º—ñ–∂ —Å—Ü–µ–Ω–∞—Ä—ñ—è–º–∏
        
        # –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
        self.print_final_report(total_passed, total_failed)
    
    def print_final_report(self, passed, failed):
        """–î—Ä—É–∫—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç"""
        total = passed + failed
        success_rate = (passed / total * 100) if total > 0 else 0
        
        print(f"\n{'='*60}")
        print(f"üìä –§–Ü–ù–ê–õ–¨–ù–ò–ô –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
        print(f"{'='*60}")
        print(f"‚è∞ –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤: {passed}/{total}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤: {failed}/{total}")
        print(f"üìä –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%")
        print(f"\n{'='*60}\n")
        
        # –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –∫–æ–∂–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä—ñ—é
        print("üìã –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n")
        for result in self.results:
            status = "‚úÖ" if result['failed'] == 0 else "‚ùå"
            print(f"{status} {result['name']}: {result['passed']} passed, {result['failed']} failed")
    
    def export_report(self, filename='test_report.json'):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î –∑–≤—ñ—Ç –≤ JSON"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'total_scenarios': len(self.results),
            'results': self.results
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {filename}")


def manual_test_mode():
    """–†–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –ø–æ–∫–∞–∑—É—î —Å—Ü–µ–Ω–∞—Ä—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    print(f"\n{'='*60}")
    print("üîß –†–ï–ñ–ò–ú –†–£–ß–ù–û–ì–û –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print(f"{'='*60}\n")
    print("–í—ñ–¥–∫—Ä–∏–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram —ñ –≤–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:")
    print("–ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –æ—á—ñ–∫—É–≤–∞–Ω–æ—é\n")
    
    for i, scenario in enumerate(ALL_SCENARIOS, 1):
        print(f"\n{'='*60}")
        print(f"–°–¶–ï–ù–ê–†–Ü–ô {i}: {scenario['name']}")
        print(f"{'='*60}\n")
        
        for step in scenario['steps']:
            print(f"--- –ö—Ä–æ–∫ {step['step']} ---")
            
            if step.get('user'):
                print(f"üë§ –í–ò: {step['user']}")
            
            print(f"\nü§ñ –û–ß–Ü–ö–£–í–ê–ù–ê –í–Ü–î–ü–û–í–Ü–î–¨ –ë–û–¢–ê:")
            print(step['bot'])
            print(f"\n‚öôÔ∏è –©–û –ú–ê–Ñ –í–Ü–î–ë–£–¢–ò–°–Ø: {step['action']}")
            
            input("\n‚è∏Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—å–æ–≥–æ –∫—Ä–æ–∫—É...")
        
        user_result = input(f"\n‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ
