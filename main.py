"""
Hubsy Bot - Main Application
Telegram –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é Google Sheets —Ç–∞ Gemini AI
"""

import logging
import os
import time
from flask import Flask, request, jsonify
from typing import Dict, Any, List, Optional

import config
from services import sheets, gemini
from services.telegram import (
    tg_send_message as send_message,
    tg_send_photo as send_photo,
    tg_answer_callback as answer_callback_query,
    tg_edit_message as edit_message
)
from services import database

# Logging setup
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask app
app = Flask(__name__)

# Global data
menu_data: List[Dict[str, Any]] = []
user_states: Dict[int, Dict[str, Any]] = {}
user_carts: Dict[int, List[Dict[str, Any]]] = {}

# ============================================================================
# STARTUP - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
# ============================================================================

def initialize():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
    global menu_data
    
    logger.info("üöÄ Starting Hubsy Bot v3.2.0...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        if database.init_database():
            logger.info("‚úÖ Database initialized")
        else:
            logger.error("‚ùå Database initialization failed")
    except Exception as e:
        logger.error(f"‚ùå Database error: {e}")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
    try:
        if database.USE_POSTGRES:
            # PostgreSQL: —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ Sheets, –ø–æ—Ç—ñ–º —á–∏—Ç–∞—î–º–æ –∑ –ë–î
            logger.info("üêò Using PostgreSQL for menu storage")
            
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –º–µ–Ω—é –∑ Google Sheets
            if database.sync_menu_from_sheets():
                # –ß–∏—Ç–∞—î–º–æ –∑ PostgreSQL
                menu_data = database.get_menu_from_postgres()
            else:
                # Fallback: —á–∏—Ç–∞—î–º–æ –∑ Sheets —è–∫—â–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è
                logger.warning("‚ö†Ô∏è Sync failed, reading from Sheets")
                menu_data = sheets.get_menu_from_sheet()
        else:
            # SQLite: —á–∏—Ç–∞—î–º–æ –Ω–∞–ø—Ä—è–º—É –∑ Sheets
            logger.info("üìÅ Using Google Sheets for menu")
            menu_data = sheets.get_menu_from_sheet()
        
        if menu_data:
            logger.info(f"‚úÖ Menu loaded: {len(menu_data)} items")
            # Debug: –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
            if menu_data:
                logger.info(f"üìã First item: {menu_data[0].get('–°—Ç—Ä–∞–≤–∏', 'N/A')}")
        else:
            logger.warning("‚ö†Ô∏è Menu is empty")
    except Exception as e:
        logger.error(f"‚ùå Menu loading failed: {e}")
    
    # –¢–µ—Å—Ç Gemini
    try:
        gemini.test_gemini_connection()
    except Exception as e:
        logger.error(f"‚ùå Gemini test failed: {e}")

# –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
initialize()

# ============================================================================
# CART FUNCTIONS (In-Memory)
# ============================================================================

def add_to_cart(user_id: int, item: Dict[str, Any]):
    """–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—à–∏–∫"""
    if user_id not in user_carts:
        user_carts[user_id] = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ –≤ –∫–æ—à–∏–∫—É
    for cart_item in user_carts[user_id]:
        if cart_item.get('id') == item.get('id'):
            cart_item['quantity'] = cart_item.get('quantity', 1) + 1
            return
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
    item['quantity'] = 1
    user_carts[user_id].append(item)


def get_cart(user_id: int) -> List[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return user_carts.get(user_id, [])


def clear_cart(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫"""
    if user_id in user_carts:
        user_carts[user_id] = []


def remove_from_cart(user_id: int, item_id: str):
    """–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –∫–æ—à–∏–∫–∞"""
    if user_id in user_carts:
        user_carts[user_id] = [
            item for item in user_carts[user_id] 
            if item.get('id') != item_id
        ]


def get_cart_total(user_id: int) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∫–æ—à–∏–∫–∞"""
    cart = get_cart(user_id)
    total = sum(
        item.get('price', 0) * item.get('quantity', 1) 
        for item in cart
    )
    return total


# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

def get_user_state(user_id: int) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id not in user_states:
        user_states[user_id] = {
            "state": None,
            "data": {},
            "selected_restaurant": None
        }
    return user_states[user_id]


def set_user_state(user_id: int, state: str, data: Dict[str, Any] = None):
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    current = get_user_state(user_id)
    current["state"] = state
    if data:
        current.update(data)
    user_states[user_id] = current


def clear_user_state(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id in user_states:
        user_states[user_id] = {"state": None, "data": {}, "selected_restaurant": None}


# ============================================================================
# KEYBOARD LAYOUTS
# ============================================================================

def get_main_menu():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    return {
        "keyboard": [
            ["üìã –ú–µ–Ω—é", "üõí –ö–æ—à–∏–∫"],
            ["‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó", "üîç –ü–æ—à—É–∫"],
            ["üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üÜò –î–æ–ø–æ–º–æ–≥–∞"]
        ],
        "resize_keyboard": True
    }


def get_restaurants_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∑–∞–∫–ª–∞–¥–∞–º–∏"""
    if not menu_data:
        return get_main_menu()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏
    restaurants = list(set(
        item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω', '–ë–µ–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É') 
        for item in menu_data 
        if item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω')
    ))
    
    keyboard = []
    for i in range(0, len(restaurants), 2):
        row = restaurants[i:i+2]
        keyboard.append(row)
    keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True
    }


def get_category_menu_for_restaurant(restaurant: str):
    """–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"""
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å—Ç—Ä–∞–≤–∏ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
    restaurant_items = [item for item in menu_data if item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω') == restaurant]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories = list(set(
        item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ') 
        for item in restaurant_items 
        if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è')
    ))
    
    keyboard = []
    for i in range(0, len(categories), 2):
        row = categories[i:i+2]
        keyboard.append(row)
    keyboard.append(["üõí –ö–æ—à–∏–∫", "‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True
    }


def get_dish_inline_keyboard(item_id: str, in_cart: bool = False):
    """Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–≤–∏"""
    buttons = []
    
    if not in_cart:
        buttons.append([{"text": "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", "callback_data": f"add_{item_id}"}])
    else:
        buttons.append([
            {"text": "‚ûñ", "callback_data": f"remove_one_{item_id}"},
            {"text": "‚úÖ –í –∫–æ—à–∏–∫—É", "callback_data": "noop"},
            {"text": "‚ûï", "callback_data": f"add_{item_id}"}
        ])
    
    buttons.append([{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_category"}])
    
    return {"inline_keyboard": buttons}


def get_cart_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–æ—à–∏–∫–∞"""
    return {
        "inline_keyboard": [
            [
                {"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "callback_data": "checkout"}
            ],
            [
                {"text": "üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "clear_cart"}
            ],
            [
                {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", "callback_data": "back_to_menu"}
            ]
        ]
    }


# ============================================================================
# MESSAGE HANDLERS
# ============================================================================

def handle_start(chat_id: int, username: str):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    welcome_message = f"""
üëã –í—ñ—Ç–∞—î–º–æ –≤ <b>Hubsy Bot</b>!

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–º–æ–≤–∏—Ç–∏ —Å–º–∞—á–Ω—É —ó–∂—É —à–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ.

üîπ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –º–µ–Ω—é
üîπ –î–æ–¥–∞–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–≤–∏ –≤ –∫–æ—à–∏–∫
üîπ –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá
"""
    
    send_message(chat_id, welcome_message, reply_markup=get_main_menu())
    database.log_activity(chat_id, "start", {"username": username})


def handle_menu(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é - –≤–∏–±—ñ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"""
    if not menu_data:
        send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏
    restaurants = list(set(
        item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω', '–ë–µ–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É') 
        for item in menu_data 
        if item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω')
    ))
    
    if not restaurants:
        send_message(chat_id, "‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    message = "üè™ <b>–û–ë–ï–†–Ü–¢–¨ –ó–ê–ö–õ–ê–î</b>\n" + "‚îÄ" * 30 + "\n\n"
    message += "–û–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—Ä–∞–≤ –≤ –∫–æ–∂–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ
    for restaurant in restaurants:
        count = len([x for x in menu_data if x.get('–†–µ—Å—Ç–æ—Ä–∞–Ω') == restaurant])
        message += f"üçΩ <b>{restaurant}</b>\n   {count} —Å—Ç—Ä–∞–≤ —É –º–µ–Ω—é\n\n"
    
    send_message(chat_id, message, reply_markup=get_restaurants_keyboard())
    set_user_state(chat_id, "selecting_restaurant")
    database.log_activity(chat_id, "view_restaurants")


def handle_restaurant_selection(chat_id: int, restaurant: str):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    user_data = get_user_state(chat_id)
    user_data['selected_restaurant'] = restaurant
    set_user_state(chat_id, "selecting_category", user_data)
    
    # –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫ —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    current_cart = get_cart(chat_id)
    if current_cart and current_cart[0].get('restaurant') != restaurant:
        clear_cart(chat_id)
        send_message(
            chat_id, 
            "üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏ –æ–±—Ä–∞–ª–∏ —ñ–Ω—à–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω.\n\n"
            "–£—Å—ñ —Å—Ç—Ä–∞–≤–∏ –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É."
        )
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    restaurant_items = [item for item in menu_data if item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω') == restaurant]
    categories = list(set(
        item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ') 
        for item in restaurant_items 
        if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è')
    ))
    
    message = f"üè™ <b>{restaurant.upper()}</b>\n" + "‚îÄ" * 30 + "\n\n"
    message += "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"
    
    send_message(chat_id, message, reply_markup=get_category_menu_for_restaurant(restaurant))
    database.log_activity(chat_id, "select_restaurant", {"restaurant": restaurant})


def handle_category(chat_id: int, category: str):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    user_data = get_user_state(chat_id)
    restaurant = user_data.get('selected_restaurant')
    
    if not restaurant:
        send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
        handle_menu(chat_id)
        return
    
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    items = [
        item for item in menu_data 
        if item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω') == restaurant and item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category
    ]
    
    if not items:
        send_message(chat_id, f"‚ùå –ù–µ–º–∞—î —Å—Ç—Ä–∞–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}'")
        return
    
    cart = get_cart(chat_id)
    cart_ids = [item.get('id') for item in cart]
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–Ω—É —Å—Ç—Ä–∞–≤—É –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    for item in items:
        item_id = item.get('ID')
        name = item.get('–°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        price = item.get('–¶—ñ–Ω–∞', 0)
        description = item.get('–û–ø–∏—Å', '')
        photo_url = item.get('–§–æ—Ç–æ URL', '')
        rating = item.get('–†–µ–π—Ç–∏–Ω–≥', 0)
        prep_time = item.get('–ß–∞—Å_–ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è', 0)
        
        message = f"üçΩ <b>{name}</b>\n\n"
        
        if description:
            message += f"üìù {description}\n\n"
        
        message += f"üí∞ <b>{price} –≥—Ä–Ω</b>\n"
        
        if rating:
            message += f"‚≠ê {rating}/5\n"
        
        if prep_time:
            message += f"‚è± –ü—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è: {prep_time} —Ö–≤\n"
        
        in_cart = item_id in cart_ids
        
        # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ —Ñ–æ—Ç–æ
        if photo_url:
            send_photo(
                chat_id, 
                photo_url, 
                caption=message,
                reply_markup=get_dish_inline_keyboard(item_id, in_cart)
            )
        else:
            send_message(
                chat_id, 
                message,
                reply_markup=get_dish_inline_keyboard(item_id, in_cart)
            )
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –∫–æ—à–∏–∫–∞
    cart_text = f"\n\nüìä –ü–æ–∫–∞–∑–∞–Ω–æ —Å—Ç—Ä–∞–≤: {len(items)}"
    if cart:
        cart_text += f"\nüõí –í –∫–æ—à–∏–∫—É: {len(cart)} —Å—Ç—Ä–∞–≤"
    
    send_message(
        chat_id, 
        f"‚îÄ" * 30 + cart_text,
        reply_markup=get_category_menu_for_restaurant(restaurant)
    )
    
    database.log_activity(chat_id, "view_category", {"category": category, "restaurant": restaurant})


def handle_cart(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫"""
    cart = get_cart(chat_id)
    
    if not cart:
        send_message(
            chat_id,
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤–∏ –∑ –º–µ–Ω—é üëá",
            reply_markup=get_main_menu()
        )
        return
    
    total = get_cart_total(chat_id)
    restaurant = cart[0].get('restaurant', '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω')
    
    message = f"üõí <b>–í–ê–® –ö–û–®–ò–ö</b>\n"
    message += f"üè™ <b>{restaurant}</b>\n"
    message += "‚îÄ" * 30 + "\n\n"
    
    for item in cart:
        name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        price = item.get('price', 0)
        quantity = item.get('quantity', 1)
        
        message += f"üîπ <b>{name}</b>\n"
        message += f"   {quantity} x {price} –≥—Ä–Ω = {quantity * price} –≥—Ä–Ω\n\n"
    
    message += "‚îÄ" * 30 + "\n"
    message += f"üí∞ <b>–†–∞–∑–æ–º: {total} –≥—Ä–Ω</b>"
    
    send_message(chat_id, message, reply_markup=get_cart_keyboard())
    database.log_activity(chat_id, "view_cart")


def handle_recommendations(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    if not menu_data:
        send_message(chat_id, "‚ùå –ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –∑ –±–∞–∑–∏
    popular = database.get_popular_items(limit=5)
    
    if popular:
        message = "‚≠ê <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á</b>\n" + "‚îÄ" * 30 + "\n\n"
        message += "üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç—Ä–∞–≤–∏:</b>\n\n"
        
        for dish_name, count in popular:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç—Ä–∞–≤—É –≤ –º–µ–Ω—é
            dish = next((item for item in menu_data if item.get('–°—Ç—Ä–∞–≤–∏') == dish_name), None)
            if dish:
                price = dish.get('–¶—ñ–Ω–∞', 0)
                restaurant = dish.get('–†–µ—Å—Ç–æ—Ä–∞–Ω', '')
                message += f"üîπ <b>{dish_name}</b>\n"
                message += f"   üí∞ {price} –≥—Ä–Ω | üè™ {restaurant}\n"
                message += f"   üë• –ó–∞–º–æ–≤–∏–ª–∏ {count} —Ä–∞–∑\n\n"
    else:
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö - –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏
        message = "‚≠ê <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á</b>\n" + "‚îÄ" * 30 + "\n\n"
        
        for item in menu_data[:5]:
            name = item.get('–°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
            price = item.get('–¶—ñ–Ω–∞', 0)
            restaurant = item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω', '')
            description = item.get('–û–ø–∏—Å', '')
            
            message += f"üîπ <b>{name}</b>\n"
            message += f"   üí∞ {price} –≥—Ä–Ω | üè™ {restaurant}\n"
            if description:
                message += f"   üìù {description[:80]}...\n"
            message += "\n"
    
    send_message(chat_id, message, reply_markup=get_main_menu())
    database.log_activity(chat_id, "view_recommendations")


def handle_search(chat_id: int):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É"""
    message = """
üîç <b>–ü–û–®–£–ö</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

–ù–∞–ø–∏—à—ñ—Ç—å —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ:
‚Ä¢ –ù–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏
‚Ä¢ –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç
‚Ä¢ –¢–∏–ø –∫—É—Ö–Ω—ñ

–ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–ø—ñ—Ü–∞", "–∑ –∫—É—Ä–∫–æ—é", "–≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–µ"
"""
    
    send_message(chat_id, message, reply_markup={"remove_keyboard": True})
    set_user_state(chat_id, "searching")
    database.log_activity(chat_id, "start_search")


def handle_my_orders(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    orders = database.get_user_orders(chat_id, limit=5)
    
    if not orders:
        send_message(
            chat_id,
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å\n\n–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤–∏ –∑ –º–µ–Ω—é —ñ –∑—Ä–æ–±—ñ—Ç—å –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! üçΩ",
            reply_markup=get_main_menu()
        )
        return
    
    message = "üì¶ <b>–ú–û–á –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n" + "‚îÄ" * 30 + "\n\n"
    
    for order in orders:
        order_id = order.get('id', 'N/A')
        total = order.get('total', 0)
        status = order.get('status', 'unknown')
        created_at = order.get('created_at', 'N/A')
        
        status_emoji = {
            'new': 'üÜï',
            'confirmed': '‚úÖ',
            'preparing': 'üë®‚Äçüç≥',
            'ready': 'üéâ',
            'delivered': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(status, '‚ùì')
        
        message += f"{status_emoji} <b>#{order_id[:8]}</b>\n"
        message += f"   üí∞ {total} –≥—Ä–Ω | üìÖ {created_at[:16]}\n"
        message += f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    send_message(chat_id, message, reply_markup=get_main_menu())
    database.log_activity(chat_id, "view_orders")


def handle_help(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"""
    help_text = """
üÜò <b>–î–û–ü–û–ú–û–ì–ê</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

<b>–Ø–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>
1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å "üìã –ú–µ–Ω—é"
2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω
3Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
4Ô∏è‚É£ –î–æ–¥–∞–π—Ç–µ —Å—Ç—Ä–∞–≤–∏ –∫–Ω–æ–ø–∫–æ—é ‚ûï
5Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ "üõí –ö–æ—à–∏–∫"
6Ô∏è‚É£ –û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

<b>–ö–æ–º–∞–Ω–¥–∏:</b>
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/menu - –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
/cart - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

<b>–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?</b>
–ù–∞–ø–∏—à—ñ—Ç—å @support –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ:
üìû +380 XX XXX XX XX
"""
    
    send_message(chat_id, help_text, reply_markup=get_main_menu())
    database.log_activity(chat_id, "view_help")


def handle_checkout(chat_id: int, callback_query_id: str = None):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    cart = get_cart(chat_id)
    
    if not cart:
        if callback_query_id:
            answer_callback_query(callback_query_id, "üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
    
    message = """
üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:

<b>–Ü–º'—è</b>
<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>
<b>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>

–ü—Ä–∏–∫–ª–∞–¥:
–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ
+380501234567
–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 10
"""
    
    send_message(chat_id, message)
    set_user_state(chat_id, "checkout")
    database.log_activity(chat_id, "start_checkout")


# ============================================================================
# CALLBACK HANDLERS
# ============================================================================

def handle_callback(callback_data: str, chat_id: int, message_id: int, callback_query_id: str):
    """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    
    if callback_data.startswith("add_"):
        # –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—à–∏–∫
        item_id = callback_data.replace("add_", "")
        item = next((x for x in menu_data if str(x.get('ID')) == str(item_id)), None)
        
        if item:
            user_data = get_user_state(chat_id)
            restaurant = user_data.get('selected_restaurant') or item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∑ —Ç–æ–≥–æ –∂ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
            cart = get_cart(chat_id)
            if cart and cart[0].get('restaurant') != restaurant:
                answer_callback_query(
                    callback_query_id, 
                    "‚ùå –í—Å—ñ —Å—Ç—Ä–∞–≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É!", 
                    show_alert=True
                )
                return
            
            # –î–æ–¥–∞—î–º–æ –≤ –∫–æ—à–∏–∫
            add_to_cart(chat_id, {
                'id': item_id,
                'name': item.get('–°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏'),
                'price': item.get('–¶—ñ–Ω–∞', 0),
                'restaurant': restaurant,
                'quantity': 1
            })
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
            cart = get_cart(chat_id)
            quantity = sum(x['quantity'] for x in cart if x.get('id') == item_id)
            
            answer_callback_query(callback_query_id, f"‚úÖ –î–æ–¥–∞–Ω–æ! –í –∫–æ—à–∏–∫—É: {quantity} —à—Ç")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            try:
                edit_message(
                    chat_id, 
                    message_id, 
                    reply_markup=get_dish_inline_keyboard(item_id, in_cart=True)
                )
            except:
                pass
            
            database.log_activity(chat_id, "add_to_cart", {"item_id": item_id})
        else:
            answer_callback_query(callback_query_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    elif callback_data.startswith("remove_one_"):
        # –í–∏–¥–∞–ª–∏—Ç–∏ –æ–¥–Ω—É —à—Ç—É–∫—É –∑ –∫–æ—à–∏–∫–∞
        item_id = callback_data.replace("remove_one_", "")
        cart = get_cart(chat_id)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä —ñ –∑–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        for item in cart:
            if item.get('id') == item_id:
                if item['quantity'] > 1:
                    item['quantity'] -= 1
                    answer_callback_query(callback_query_id, f"‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item['quantity']}")
                else:
                    remove_from_cart(chat_id, item_id)
                    answer_callback_query(callback_query_id, "üóë –í–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞")
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏
                    try:
                        edit_message(
                            chat_id, 
                            message_id, 
                            reply_markup=get_dish_inline_keyboard(item_id, in_cart=False)
                        )
                    except:
                        pass
                break
        
        database.log_activity(chat_id, "remove_from_cart", {"item_id": item_id})
    
    elif callback_data == "checkout":
        handle_checkout(chat_id, callback_query_id)
        answer_callback_query(callback_query_id, "üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    
    elif callback_data == "clear_cart":
        clear_cart(chat_id)
        answer_callback_query(callback_query_id, "üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
        handle_cart(chat_id)
        database.log_activity(chat_id, "clear_cart")
    
    elif callback_data == "back_to_menu":
        handle_menu(chat_id)
        answer_callback_query(callback_query_id, "üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω–∏")
    
    elif callback_data == "back_to_category":
        user_data = get_user_state(chat_id)
        restaurant = user_data.get('selected_restaurant')
        if restaurant:
            handle_restaurant_selection(chat_id, restaurant)
        else:
            handle_menu(chat_id)
        answer_callback_query(callback_query_id, "‚óÄÔ∏è –ù–∞–∑–∞–¥")
    
    elif callback_data == "noop":
        # –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í –∫–æ—à–∏–∫—É")
        pass


# ============================================================================
# WEBHOOK HANDLER
# ============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–∫–∞ webhook –≤—ñ–¥ Telegram"""
    try:
        update = request.json
        logger.info(f"üì• Webhook: {update.get('update_id')}")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            username = message['from'].get('username', 'Unknown')
            
            logger
