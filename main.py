import os
import logging
import json
import uuid
from flask import Flask, request, jsonify
import requests

# ---- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ----
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN not set in environment")

WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "Ferrik123!")  # –ø–æ–≤–∏–Ω–µ–Ω —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏ –∑ —Ç–∏–º, —â–æ –≤ setWebhook
API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"

# ---- –õ–æ–≥–∏ ----
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("ferrik")

# ---- Flask app (gunicorn —à—É–∫–∞—î 'app') ----
app = Flask(__name__)

# ---- –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ (MVP) ----
RESTAURANTS = {
    1: {
        "name": "–ü—ñ—Ü–µ—Ä—ñ—è –ù–∞–ø–æ–ª—ñ üçï",
        "menu": [
            {"dish_id": 101, "name": "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "price": 150},
            {"dish_id": 102, "name": "–ü–µ–ø–µ—Ä–æ–Ω—ñ", "price": 180},
        ],
    },
    2: {
        "name": "–°—É—à—ñ –ú–∞–π—Å—Ç–µ—Ä üç£",
        "menu": [
            {"dish_id": 201, "name": "–ö–∞–ª—ñ—Ñ–æ—Ä–Ω—ñ—è —Ä–æ–ª", "price": 220},
            {"dish_id": 202, "name": "–§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è", "price": 250},
        ],
    },
}

# —É –ø–∞–º'—è—Ç—ñ –∫–æ—à–∏–∫–∏: {chat_id: [ {dish dict}, ... ] }
CARTS = {}

# ---- Telegram helper functions ----
def tg_send_message(chat_id: int, text: str, reply_markup: dict = None, parse_mode: str = "HTML"):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode,
    }
    if reply_markup is not None:
        payload["reply_markup"] = json.dumps(reply_markup)
    try:
        r = requests.post(f"{API_URL}/sendMessage", json=payload, timeout=10)
        logger.info("sendMessage status=%s json=%s", r.status_code, r.text[:200])
        return r.json()
    except Exception as e:
        logger.exception("tg_send_message error: %s", e)
        return None

def tg_edit_message(chat_id: int, message_id: int, text: str, reply_markup: dict = None):
    payload = {"chat_id": chat_id, "message_id": message_id, "text": text}
    if reply_markup is not None:
        payload["reply_markup"] = json.dumps(reply_markup)
    try:
        r = requests.post(f"{API_URL}/editMessageText", json=payload, timeout=10)
        logger.info("editMessageText status=%s", r.status_code)
        return r.json()
    except Exception as e:
        logger.exception("tg_edit_message error: %s", e)
        return None

def tg_answer_callback(callback_query_id: str, text: str = None):
    payload = {"callback_query_id": callback_query_id}
    if text:
        payload["text"] = text
    try:
        r = requests.post(f"{API_URL}/answerCallbackQuery", json=payload, timeout=5)
        return r.json()
    except Exception as e:
        logger.exception("tg_answer_callback error: %s", e)
        return None

# ---- Utility: keyboards ----
def main_keyboard():
    # Reply keyboard (persistent)
    keyboard = [
        [{"text": "üçî –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É"}, {"text": "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫"}],
        [{"text": "üí∏ –ê–∫—Ü—ñ—ó"}, {"text": "üì¶ –ú—ñ–π –∫–æ—à–∏–∫"}],
    ]
    return {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": False}

def restaurants_inline_keyboard():
    rows = []
    for rid, r in RESTAURANTS.items():
        rows.append([{"text": r["name"], "callback_data": f"rest_{rid}"}])
    return {"inline_keyboard": rows}

def menu_inline_keyboard_for_restaurant(rest_id):
    rows = []
    for item in RESTAURANTS[rest_id]["menu"]:
        rows.append([{"text": f"{item['name']} ‚Äî {item['price']} –≥—Ä–Ω", "callback_data": f"add_{item['dish_id']}"}])
    rows.append([{"text": "üì• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "view_cart"}])
    return {"inline_keyboard": rows}

def cart_keyboard():
    return {"inline_keyboard": [[{"text":"üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è","callback_data":"order_confirm"}, {"text":"üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫","callback_data":"clear_cart"}]]}

# ---- Webhook endpoint ----
@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    # optional header check (if you used secret token in setWebhook; adjust if you used secret in URL)
    header_secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
    if WEBHOOK_SECRET and header_secret and header_secret != WEBHOOK_SECRET:
        logger.warning("Invalid webhook secret header: %s", header_secret)
        return jsonify({"ok": False, "error": "invalid secret"}), 403

    update = request.get_json(force=True)
    logger.info("Update received: %s", json.dumps(update)[:1000])

    # message (text)
    if "message" in update:
        msg = update["message"]
        chat_id = msg["chat"]["id"]
        text = msg.get("text", "").strip()

        # Commands /start
        if text.lower() in ["/start", "start", "hi", "–ø—Ä–∏–≤—ñ—Ç", "hello"]:
            tg_send_message(chat_id,
                            "üëã –í—ñ—Ç–∞—é! –Ø ‚Äî FerrikBot üçΩÔ∏è\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é ‚¨áÔ∏è",
                            reply_markup=main_keyboard())
            return jsonify({"ok": True})

        # Main menu buttons
        if text == "üçî –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É":
            tg_send_message(chat_id, "–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–∫–ª–∞–¥–∏ —É –¢–µ—Ä–Ω–æ–ø–æ–ª—ñ:", reply_markup=restaurants_inline_keyboard())
            return jsonify({"ok": True})
        if text == "üì¶ –ú—ñ–π –∫–æ—à–∏–∫" or text.lower() == "–∫–æ—à–∏–∫":
            return _handle_show_cart(chat_id)
        if text == "üí∏ –ê–∫—Ü—ñ—ó":
            tg_send_message(chat_id, "üéâ –ü–æ–∫–∏ —â–æ –∞–∫—Ü—ñ–π –Ω–µ–º–∞—î. –ó–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ –±—É–¥—É—Ç—å –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó!")
            return jsonify({"ok": True})
        if text == "üìÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫":
            tg_send_message(chat_id, "üìÖ –ù–∞–ø–∏—à—ñ—Ç—å, —É —è–∫–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ —Ç–∞ –Ω–∞ —è–∫–∏–π —á–∞—Å –≤–∏ –±–∞–∂–∞—î—Ç–µ –±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫.")
            return jsonify({"ok": True})

        # Free text fallback: if user types dish name -> show popular (MVP)
        tg_send_message(chat_id, "üîé –®—É–∫–∞—é –ø–æ –∑–∞–ø–∏—Ç—É... –ü–æ–∫–∞–∑—É—é –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç—Ä–∞–≤–∏:", reply_markup=restaurants_inline_keyboard())
        return jsonify({"ok": True})

    # callback_query (inline button pressed)
    if "callback_query" in update:
        cq = update["callback_query"]
        data = cq.get("data", "")
        callback_id = cq.get("id")
        message = cq.get("message", {})
        chat_id = message.get("chat", {}).get("id")
        message_id = message.get("message_id")

        # restaurant selected
        if data.startswith("rest_"):
            rest_id = int(data.split("_", 1)[1])
            if rest_id in RESTAURANTS:
                tg_edit_message(chat_id, message_id, f"–ú–µ–Ω—é ‚Äî {RESTAURANTS[rest_id]['name']}", reply_markup=menu_inline_keyboard_for_restaurant(rest_id))
                tg_answer_callback(callback_id)
                return jsonify({"ok": True})
            else:
                tg_answer_callback(callback_id, text="–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return jsonify({"ok": True})

        # add dish
        if data.startswith("add_"):
            dish_id = int(data.split("_", 1)[1])
            # find dish
            dish = None
            for r in RESTAURANTS.values():
                for it in r["menu"]:
                    if it["dish_id"] == dish_id:
                        dish = it
                        break
                if dish:
                    break
            if not dish:
                tg_answer_callback(callback_id, text="–°—Ç—Ä–∞–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
                return jsonify({"ok": True})
            # add to cart
            CARTS.setdefault(chat_id, []).append(dish)
            tg_answer_callback(callback_id, text=f"‚úÖ –î–æ–¥–∞–Ω–æ: {dish['name']}")
            tg_send_message(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ {dish['name']} ‚Äî {dish['price']} –≥—Ä–Ω")
            return jsonify({"ok": True})

        if data == "view_cart":
            tg_answer_callback(callback_id)
            return _handle_show_cart(chat_id)

        if data == "clear_cart":
            CARTS.pop(chat_id, None)
            tg_answer_callback(callback_id, text="–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
            tg_send_message(chat_id, "üóëÔ∏è –í–∞—à –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
            return jsonify({"ok": True})

        if data == "order_confirm":
            # create a fake order id and clear cart
            cart = CARTS.get(chat_id, [])
            if not cart:
                tg_answer_callback(callback_id, text="–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
                tg_send_message(chat_id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üõí")
                return jsonify({"ok": True})
            total = sum(item["price"] for item in cart)
            order_id = str(uuid.uuid4())[:8]
            CARTS.pop(chat_id, None)
            tg_answer_callback(callback_id, text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ")
            tg_send_message(chat_id, f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ. –°—É–º–∞: {total} –≥—Ä–Ω.\n–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
            logger.info("New order %s from chat %s total=%s", order_id, chat_id, total)
            return jsonify({"ok": True})

        # default
        tg_answer_callback(callback_id)
        return jsonify({"ok": True})

    # fallback
    return jsonify({"ok": True})

# ---- helper to show cart as separate function ----
def _handle_show_cart(chat_id):
    cart = CARTS.get(chat_id, [])
    if not cart:
        tg_send_message(chat_id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return jsonify({"ok": True})
    lines = [f"‚Ä¢ {it['name']} ‚Äî {it['price']} –≥—Ä–Ω" for it in cart]
    total = sum(it["price"] for it in cart)
    text = "üõí –í–∞—à –∫–æ—à–∏–∫:\n" + "\n".join(lines) + f"\n\n<b>–ó–∞–≥–∞–ª–æ–º: {total} –≥—Ä–Ω</b>"
    tg_send_message(chat_id, text, reply_markup=cart_keyboard())
    return jsonify({"ok": True})

# ---- health check ----
@app.route("/health", methods=["GET"])
def health():
    return jsonify({"status": "ok"})

# ---- Run (not used by gunicorn in prod, but useful locally) ----
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.info("Starting local Flask server on port %s", port)
    app.run(host="0.0.0.0", port=port)
