"""
ü§ñ –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Gemini AI
"""
import json
import logging
from typing import List, Dict, Any, Optional
import google.generativeai as genai

from app.utils.validators import safe_parse_price, safe_parse_quantity

logger = logging.getLogger(__name__)


class GeminiService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Gemini AI"""
    
    def __init__(self, config):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
        
        Args:
            config: GeminiConfig –∑ API key —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        """
        self.config = config
        self.model = None
        
        self._initialize()
    
    def _initialize(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Gemini API"""
        try:
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API
            genai.configure(api_key=self.config.api_key)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–µ–ª—å
            self.model = genai.GenerativeModel(
                model_name=self.config.model_name,
                generation_config={
                    'temperature': self.config.temperature,
                    'max_output_tokens': self.config.max_tokens,
                }
            )
            
            logger.info(f"‚úÖ Gemini AI initialized: {self.config.model_name}")
        
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Gemini AI: {e}")
            raise
    
    # ========================================================================
    # –û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
    # ========================================================================
    
    def process_order_request(
        self,
        user_message: str,
        menu_items: List[Dict[str, Any]],
        user_cart: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """
        –û–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ AI
        
        Args:
            user_message: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            menu_items: –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∑ –º–µ–Ω—é
            user_cart: –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Returns:
            dict: {
                'action': 'add_to_cart' | 'show_menu' | 'checkout' | 'info',
                'items': [...],
                'message': '–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
            }
        """
        try:
            # –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç
            prompt = self._build_order_prompt(user_message, menu_items, user_cart)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ AI
            response = self.model.generate_content(prompt)
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            result = self._parse_ai_response(response.text, menu_items)
            
            logger.info(f"ü§ñ AI processed request: action={result.get('action')}")
            return result
        
        except Exception as e:
            logger.error(f"‚ùå Error processing AI request: {e}")
            return {
                'action': 'info',
                'message': '–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ /menu –∞–±–æ /help'
            }
    
    def _build_order_prompt(
        self,
        user_message: str,
        menu_items: List[Dict[str, Any]],
        user_cart: List[Dict[str, Any]]
    ) -> str:
        """–ü–æ–±—É–¥–æ–≤–∞ –ø—Ä–æ–º–ø—Ç—É –¥–ª—è AI"""
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –º–µ–Ω—é
        menu_text = "–î–û–°–¢–£–ü–ù–ï –ú–ï–ù–Æ:\n"
        for item in menu_items:
            menu_text += f"- {item['name']} ({item['category']}) - {item['price']} –≥—Ä–Ω"
            if item.get('description'):
                menu_text += f" | {item['description']}"
            menu_text += "\n"
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∫–æ—à–∏–∫
        cart_text = "–ü–û–¢–û–ß–ù–ò–ô –ö–û–®–ò–ö:\n"
        if user_cart:
            for item in user_cart:
                cart_text += f"- {item['name']} x{item.get('quantity', 1)}\n"
        else:
            cart_text += "–ü–æ—Ä–æ–∂–Ω—ñ–π\n"
        
        prompt = f"""–¢–∏ - –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ FerrikFoot.

{menu_text}

{cart_text}

–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê: "{user_message}"

–¢–í–û–Ñ –ó–ê–í–î–ê–ù–ù–Ø:
1. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
2. –í–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–º—ñ—Ä (–¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä, –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é, –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —Ç–æ—â–æ)
3. –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∑ –º–µ–Ω—é (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ —â–æ—Å—å –∑–∞–º–æ–≤–∏—Ç–∏)
4. –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü (–û–ë–û–í'–Ø–ó–ö–û–í–û JSON):
{{
    "action": "add_to_cart" –∞–±–æ "show_menu" –∞–±–æ "checkout" –∞–±–æ "info",
    "items": [
        {{"id": "ID_—Ç–æ–≤–∞—Ä—É", "name": "–ù–∞–∑–≤–∞", "price": —Ü—ñ–Ω–∞, "quantity": –∫—ñ–ª—å–∫—ñ—Å—Ç—å}}
    ],
    "message": "–î—Ä—É–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"
}}

–ü–†–ê–í–ò–õ–ê:
- action="add_to_cart" - —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞–≤–∏
- action="show_menu" - —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –ø–æ–±–∞—á–∏—Ç–∏ –º–µ–Ω—é
- action="checkout" - —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
- action="info" - –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å
- –®—É–∫–∞–π —Ç–æ–≤–∞—Ä–∏ –∑–∞ —á–∞—Å—Ç–∫–æ–≤–∏–º–∏ –∑–±—ñ–≥–∞–º–∏ –Ω–∞–∑–≤
- –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø–æ–Ω—É–π —Å—Ö–æ–∂—ñ
- –ó–∞–≤–∂–¥–∏ –±—É–¥—å –≤–≤—ñ—á–ª–∏–≤–∏–º —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞–π

–í–Ü–î–ü–û–í–Ü–î–ê–ô –¢–Ü–õ–¨–ö–ò –í –§–û–†–ú–ê–¢–Ü JSON, –ë–ï–ó –î–û–î–ê–¢–ö–û–í–û–ì–û –¢–ï–ö–°–¢–£!"""
        
        return prompt
    
    def _parse_ai_response(
        self,
        ai_text: str,
        menu_items: List[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI"""
        
        try:
            # –û—á–∏—â—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ markdown
            clean_text = ai_text.strip()
            if clean_text.startswith('```json'):
                clean_text = clean_text[7:]
            if clean_text.startswith('```'):
                clean_text = clean_text[3:]
            if clean_text.endswith('```'):
                clean_text = clean_text[:-3]
            clean_text = clean_text.strip()
            
            # –ü–∞—Ä—Å–∏–º–æ JSON
            result = json.loads(clean_text)
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
            if result.get('action') == 'add_to_cart' and result.get('items'):
                validated_items = []
                
                for item in result['items']:
                    # –®—É–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä –≤ –º–µ–Ω—é
                    menu_item = None
                    item_id = item.get('id')
                    item_name = item.get('name', '').lower()
                    
                    for menu in menu_items:
                        if (str(menu['id']) == str(item_id) or 
                            menu['name'].lower() == item_name):
                            menu_item = menu
                            break
                    
                    if menu_item:
                        validated_items.append({
                            'id': menu_item['id'],
                            'name': menu_item['name'],
                            'price': menu_item['price'],
                            'quantity': safe_parse_quantity(item.get('quantity', 1))
                        })
                
                result['items'] = validated_items
            
            return result
        
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Failed to parse AI JSON: {e}\nText: {ai_text}")
            
            # Fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            return {
                'action': 'info',
                'message': ai_text if len(ai_text) < 500 else '–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∑–∞–ø–∏—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ /menu –∞–±–æ /help'
            }
    
    # ========================================================================
    # –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏
    # ========================================================================
    
    def generate_response(self, prompt: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è AI
        
        Returns:
            str: –í—ñ–¥–ø–æ–≤—ñ–¥—å AI
        """
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            logger.error(f"‚ùå Error generating response: {e}")
            return "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
    
    def suggest_items(
        self,
        query: str,
        menu_items: List[Dict[str, Any]],
        max_suggestions: int = 5
    ) -> List[Dict[str, Any]]:
        """
        –ü—ñ–¥–∫–∞–∑–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–ø–∏—Ç—É
        
        Args:
            query: –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
            menu_items: –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏
            max_suggestions: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–∫–∞–∑–æ–∫
        
        Returns:
            list: –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏
        """
        try:
            menu_text = "\n".join([
                f"{item['name']} - {item['category']} - {item['price']} –≥—Ä–Ω"
                for item in menu_items
            ])
            
            prompt = f"""–ó –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω—é:

{menu_text}

–ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "{query}"

–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π {max_suggestions} –Ω–∞–π–±—ñ–ª—å—à –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:
{{
    "suggestions": [
        {{"id": "...", "name": "...", "reason": "..."}}
    ]
}}"""
            
            response = self.model.generate_content(prompt)
            result = json.loads(response.text.strip('```json\n').strip('```'))
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤
            suggestions = []
            for sugg in result.get('suggestions', []):
                for item in menu_items:
                    if item['id'] == sugg['id'] or item['name'] == sugg['name']:
                        suggestions.append(item)
                        break
            
            return suggestions[:max_suggestions]
        
        except Exception as e:
            logger.error(f"‚ùå Error suggesting items: {e}")
            return []
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Gemini API"""
        try:
            response = self.model.generate_content("–ü—Ä–∏–≤—ñ—Ç! –°–∫–∞–∂–∏ 'OK' —è–∫—â–æ —Ç–∏ –ø—Ä–∞—Ü—é—î—à.")
            logger.info(f"‚úÖ Gemini test successful: {response.text[:50]}")
            return True
        except Exception as e:
            logger.error(f"‚ùå Gemini test failed: {e}")
            return False


# ============================================================================
# Debugging
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TESTING GEMINI SERVICE")
    print("=" * 60)
    
    print("\nThis module requires proper configuration to test.")
    print("Use it within the application context.")
