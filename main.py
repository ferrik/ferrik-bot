"""
üç¥ Ferrik Bot - –¢–≤—ñ–π —Å–º–∞–∫–æ–≤–∏–π —Å—É–ø—É—Ç–Ω–∏–∫
–í–µ—Ä—Å—ñ—è 2.0 - –¢–µ–ø–ª—ñ—à–∏–π, —Ä–æ–∑—É–º–Ω—ñ—à–∏–π, –ø—Ä–∏–≤–∞–±–ª–∏–≤—ñ—à–∏–π!
"""
import os
import json
import logging
from datetime import datetime
from flask import Flask, request
import requests
from dotenv import load_dotenv

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
from services.database import get_database
from services.sheets import get_sheets_service
from app.utils.validators import (
    safe_parse_price, validate_phone, 
    normalize_phone, validate_address
)

# ============================================================================
# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø
# ============================================================================
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
TELEGRAM_API = f"https://api.telegram.org/bot{BOT_TOKEN}"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
db = get_database()
sheets = get_sheets_service()

# ============================================================================
# –ï–ú–û–î–ñ–Ü –¢–ê –¢–ï–ö–°–¢–ò (–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –±–æ—Ç–∞)
# ============================================================================
EMOJI = {
    'hello': 'üëã',
    'food': 'üç¥',
    'pizza': 'üçï',
    'burger': 'üçî',
    'sushi': 'üç±',
    'cart': 'üõí',
    'money': 'üí∞',
    'fire': 'üî•',
    'star': '‚≠ê',
    'gift': 'üéÅ',
    'heart': '‚ù§Ô∏è',
    'rocket': 'üöÄ',
    'sparkles': '‚ú®',
    'chef': 'üë®‚Äçüç≥',
    'location': 'üìç',
    'phone': 'üì±',
    'time': '‚è∞',
    'check': '‚úÖ',
    'loading': '‚è≥',
    'party': 'üéâ',
    'wink': 'üòâ',
    'yummy': 'üòã',
    'search': 'üîç',
    'settings': '‚öôÔ∏è',
    'history': 'üìú',
    'badge': 'üèÜ',
    'crown': 'üëë'
}

# ============================================================================
# –°–¢–ê–ù–ò –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# ============================================================================
STATE_IDLE = 'idle'
STATE_BROWSING = 'browsing'
STATE_AWAITING_PHONE = 'awaiting_phone'
STATE_AWAITING_ADDRESS = 'awaiting_address'
STATE_CONFIRMING = 'confirming'

# ============================================================================
# –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á TELEGRAM API
# ============================================================================
def send_message(chat_id, text, reply_markup=None, parse_mode='HTML'):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': parse_mode
    }
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    
    try:
        response = requests.post(f"{TELEGRAM_API}/sendMessage", json=payload, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå Send message error: {e}")
        return None


def send_photo(chat_id, photo_url, caption=None, reply_markup=None):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ"""
    payload = {
        'chat_id': chat_id,
        'photo': photo_url,
        'parse_mode': 'HTML'
    }
    if caption:
        payload['caption'] = caption
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)
    
    try:
        response = requests.post(f"{TELEGRAM_API}/sendPhoto", json=payload, timeout=10)
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå Send photo error: {e}")
        return None


def answer_callback(callback_id, text=None, show_alert=False):
    """–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback"""
    payload = {
        'callback_query_id': callback_id,
        'show_alert': show_alert
    }
    if text:
        payload['text'] = text
    
    try:
        requests.post(f"{TELEGRAM_API}/answerCallbackQuery", json=payload, timeout=5)
    except Exception as e:
        logger.error(f"‚ùå Answer callback error: {e}")


# ============================================================================
# –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# ============================================================================
def get_main_keyboard():
    """–ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –µ–º–æ–¥–∂—ñ"""
    return {
        'inline_keyboard': [
            [
                {'text': f"{EMOJI['food']} –ú–µ–Ω—é", 'callback_data': 'menu'},
                {'text': f"{EMOJI['search']} –ü–æ—à—É–∫", 'callback_data': 'search'}
            ],
            [
                {'text': f"{EMOJI['cart']} –ö–æ—à–∏–∫", 'callback_data': 'cart'},
                {'text': f"{EMOJI['gift']} –ê–∫—Ü—ñ—ó", 'callback_data': 'promos'}
            ],
            [
                {'text': f"{EMOJI['history']} –Ü—Å—Ç–æ—Ä—ñ—è", 'callback_data': 'history'},
                {'text': f"{EMOJI['badge']} –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è", 'callback_data': 'badges'}
            ]
        ]
    }


def get_menu_keyboard(items):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–µ–Ω—é –∑ –≤—ñ–∑—É–∞–ª—å–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
    keyboard = []
    
    # –ì—Ä—É–ø—É—î–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    categories = {}
    for item in items:
        cat = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ')
        if cat not in categories:
            categories[cat] = []
        categories[cat].append(item)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
    for cat, cat_items in categories.items():
        cat_emoji = get_category_emoji(cat)
        keyboard.append([{
            'text': f"{cat_emoji} {cat} ({len(cat_items)})",
            'callback_data': f"cat_{cat}"
        }])
    
    keyboard.append([{'text': f"{EMOJI['cart']} –ú—ñ–π –∫–æ—à–∏–∫", 'callback_data': 'cart'}])
    
    return {'inline_keyboard': keyboard}


def get_item_keyboard(item_id, in_cart=False):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –æ–∫—Ä–µ–º–æ—ó —Å—Ç—Ä–∞–≤–∏"""
    keyboard = []
    
    if in_cart:
        keyboard.append([
            {'text': f"{EMOJI['check']} –í–∂–µ –≤ –∫–æ—à–∏–∫—É", 'callback_data': 'noop'},
        ])
    else:
        keyboard.append([
            {'text': f"‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", 'callback_data': f"add_{item_id}"},
        ])
    
    keyboard.append([
        {'text': f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", 'callback_data': 'menu'}
    ])
    
    return {'inline_keyboard': keyboard}


def get_cart_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–æ—à–∏–∫–∞"""
    return {
        'inline_keyboard': [
            [
                {'text': f"{EMOJI['check']} –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", 'callback_data': 'checkout'}
            ],
            [
                {'text': f"üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", 'callback_data': 'clear_cart'},
                {'text': f"‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", 'callback_data': 'menu'}
            ]
        ]
    }


def get_category_emoji(category):
    """–ï–º–æ–¥–∂—ñ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    emojis = {
        '–ü—ñ—Ü–∞': 'üçï',
        '–ë—É—Ä–≥–µ—Ä–∏': 'üçî',
        '–°—É—à—ñ': 'üç±',
        '–°–∞–ª–∞—Ç–∏': 'ü•ó',
        '–î–µ—Å–µ—Ä—Ç–∏': 'üç∞',
        '–ù–∞–ø–æ—ó': 'ü•§',
        '–°—É–ø–∏': 'üç≤',
        '–ü–∞—Å—Ç–∞': 'üçù',
        '–ó–∞–∫—É—Å–∫–∏': 'üçü',
    }
    return emojis.get(category, 'üç¥')


# ============================================================================
# –ë–Ü–ó–ù–ï–°-–õ–û–ì–Ü–ö–ê
# ============================================================================
def get_user_state(user_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    state_data = db.get_user_state(user_id)
    if state_data:
        return state_data.get('state', STATE_IDLE)
    return STATE_IDLE


def set_user_state(user_id, state, data=None):
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    db.set_user_state(user_id, state, data)


def get_user_cart(user_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return db.get_cart(user_id)


def add_to_cart(user_id, item):
    """–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫"""
    db.add_to_cart(
        user_id,
        str(item.get('ID', '')),
        item.get('–°—Ç—Ä–∞–≤–∏', ''),
        safe_parse_price(item.get('–¶—ñ–Ω–∞', 0)),
        1
    )


def clear_cart(user_id):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫"""
    db.clear_cart(user_id)


def get_user_level(user_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≥–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—è)"""
    orders = db.get_user_orders(user_id)
    order_count = len(orders)
    
    if order_count == 0:
        return {'level': '–ù–æ–≤–∞—á–æ–∫', 'emoji': 'üå±', 'next': 3}
    elif order_count < 5:
        return {'level': '–õ—é–±–∏—Ç–µ–ª—å', 'emoji': 'üç¥', 'next': 5}
    elif order_count < 10:
        return {'level': '–ì—É—Ä–º–∞–Ω', 'emoji': 'üë®‚Äçüç≥', 'next': 10}
    elif order_count < 20:
        return {'level': '–ú–∞–π—Å—Ç–µ—Ä', 'emoji': '‚≠ê', 'next': 20}
    else:
        return {'level': '–õ–µ–≥–µ–Ω–¥–∞', 'emoji': 'üëë', 'next': None}


# ============================================================================
# –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================================================
def handle_start(user_id, username):
    """–û–±—Ä–æ–±–∫–∞ /start"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    state_data = db.get_user_state(user_id)
    is_new = state_data is None
    
    if is_new:
        # –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö
        text = f"""
{EMOJI['sparkles']} <b>–í—ñ—Ç–∞—é –≤ Ferrik!</b> {EMOJI['sparkles']}

–ü—Ä–∏–≤—ñ—Ç, {username or '–¥—Ä—É–∂–µ'}! –Ø ‚Äî —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–º–∞–∫–æ–≤–∏–π —Å—É–ø—É—Ç–Ω–∏–∫ {EMOJI['chef']}

<b>–©–æ —è –≤–º—ñ—é:</b>
{EMOJI['food']} –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–π—Å–º–∞—á–Ω—ñ—à–µ –º–µ–Ω—é
{EMOJI['fire']} –ü—ñ–¥–∫–∞–∑–∞—Ç–∏ –¢–û–ü —Å—Ç—Ä–∞–≤–∏ –¥–Ω—è
{EMOJI['gift']} –ó–Ω–∞–π—Ç–∏ –∞–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏
{EMOJI['heart']} –ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ —Ç–≤–æ—ó —É–ø–æ–¥–æ–±–∞–Ω–Ω—è

<i>–ü–æ—á–Ω–µ–º–æ –∑ –º–µ–Ω—é?</i> {EMOJI['wink']}
"""
    else:
        # –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        level = get_user_level(user_id)
        text = f"""
{EMOJI['party']} <b>–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {level['emoji']} {level['level']}!</b>

–†–∞–¥–∞ —Ç–µ–±–µ –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏! {EMOJI['heart']}

–©–æ –±—É–¥–µ–º–æ –∑–∞–º–æ–≤–ª—è—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ? {EMOJI['yummy']}
"""
    
    send_message(user_id, text, reply_markup=get_main_keyboard())
    set_user_state(user_id, STATE_IDLE)


def handle_menu(user_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    try:
        items = sheets.get_menu_items()
        
        if not items:
            send_message(
                user_id,
                f"{EMOJI['loading']} –ú–µ–Ω—é –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è... –°–ø—Ä–æ–±—É–π –∑–∞ —Ö–≤–∏–ª–∏–Ω–∫—É! {EMOJI['wink']}"
            )
            return
        
        # –ö—Ä–∞—Å–∏–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –º–µ–Ω—é
        text = f"""
{EMOJI['food']} <b>–ú–µ–Ω—é Ferrik</b> {EMOJI['sparkles']}

<i>–û–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —ñ —è –ø–æ–∫–∞–∂—É –Ω–∞–π—Å–º–∞—á–Ω—ñ—à–µ!</i> {EMOJI['chef']}

{EMOJI['fire']} <b>–°—å–æ–≥–æ–¥–Ω—ñ –ø–æ–ø—É–ª—è—Ä–Ω–æ:</b> –ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞, –ë—É—Ä–≥–µ—Ä –ö–ª–∞—Å–∏–∫
"""
        
        send_message(user_id, text, reply_markup=get_menu_keyboard(items))
        
    except Exception as e:
        logger.error(f"‚ùå Menu error: {e}")
        send_message(
            user_id,
            f"{EMOJI['loading']} –£–ø—Å! –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ {EMOJI['wink']}"
        )


def handle_category(user_id, category):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    try:
        items = sheets.get_menu_items()
        cat_items = [i for i in items if i.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category]
        
        if not cat_items:
            send_message(user_id, f"–í —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–∫–∏ –ø—É—Å—Ç–æ {EMOJI['wink']}")
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–∂–Ω—É —Å—Ç—Ä–∞–≤—É –∫—Ä–∞—Å–∏–≤–æ
        for item in cat_items[:5]:  # –ü–µ—Ä—à—ñ 5 —Å—Ç—Ä–∞–≤
            show_item(user_id, item)
        
        if len(cat_items) > 5:
            send_message(
                user_id,
                f"{EMOJI['sparkles']} –Ü —â–µ {len(cat_items)-5} —Å–º–∞—á–Ω–∏—Ö —Å—Ç—Ä–∞–≤!"
            )
        
    except Exception as e:
        logger.error(f"‚ùå Category error: {e}")


def show_item(user_id, item):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –æ–∫—Ä–µ–º—É —Å—Ç—Ä–∞–≤—É"""
    # –§–æ—Ä–º—É—î–º–æ –∫—Ä–∞—Å–∏–≤–∏–π –æ–ø–∏—Å
    name = item.get('–°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
    desc = item.get('–û–ø–∏—Å', '')
    price = safe_parse_price(item.get('–¶—ñ–Ω–∞', 0))
    rating = item.get('–†–µ–π—Ç–∏–Ω–≥', 0)
    time = item.get('–ß–∞—Å –î–æ—Å—Ç–∞–≤–∫–∏ (—Ö–≤)', 30)
    
    # –ó—ñ—Ä–æ—á–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—É
    try:
        stars = EMOJI['star'] * int(float(rating)) if rating else ''
    except:
        stars = ''
    
    caption = f"""
<b>{name}</b> {stars}

{desc}

üí∞ <b>{price:.0f} –≥—Ä–Ω</b>
‚è∞ {time} —Ö–≤

{EMOJI['fire']} <i>–¢–æ–ø –≤–∏–±—ñ—Ä —Å—å–æ–≥–æ–¥–Ω—ñ!</i>
"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –≤ –∫–æ—à–∏–∫—É
    cart = get_user_cart(user_id)
    item_id = str(item.get('ID', ''))
    in_cart = any(str(c.get('item_id')) == item_id for c in cart)
    
    photo_url = item.get('–§–æ—Ç–æ URL', '')
    
    if photo_url:
        send_photo(
            user_id,
            photo_url,
            caption=caption,
            reply_markup=get_item_keyboard(item_id, in_cart)
        )
    else:
        send_message(
            user_id,
            caption,
            reply_markup=get_item_keyboard(item_id, in_cart)
        )


def handle_add_to_cart(user_id, item_id, callback_id):
    """–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫"""
    try:
        items = sheets.get_menu_items()
        item = next((i for i in items if str(i.get('ID')) == item_id), None)
        
        if not item:
            answer_callback(callback_id, "–°—Ç—Ä–∞–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        add_to_cart(user_id, item)
        
        answer_callback(
            callback_id,
            f"{EMOJI['check']} –î–æ–¥–∞–Ω–æ! {item.get('–°—Ç—Ä–∞–≤–∏', '')}"
        )
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—à–∏–∫
        send_message(
            user_id,
            f"{EMOJI['party']} –ß—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä! {EMOJI['cart']} –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞?",
            reply_markup={'inline_keyboard': [[
                {'text': f"{EMOJI['cart']} –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", 'callback_data': 'cart'},
                {'text': f"‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", 'callback_data': 'menu'}
            ]]}
        )
        
    except Exception as e:
        logger.error(f"‚ùå Add to cart error: {e}")
        answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞", show_alert=True)


def handle_cart(user_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫"""
    cart = get_user_cart(user_id)
    
    if not cart:
        send_message(
            user_id,
            f"{EMOJI['cart']} <b>–¢–≤—ñ–π –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>\n\n<i>–ß–∞—Å –¥–æ–¥–∞—Ç–∏ —â–æ—Å—å —Å–º–∞—á–Ω–µ–Ω—å–∫–µ!</i> {EMOJI['yummy']}",
            reply_markup={'inline_keyboard': [[
                {'text': f"{EMOJI['food']} –î–æ –º–µ–Ω—é", 'callback_data': 'menu'}
            ]]}
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫
    text = f"{EMOJI['cart']} <b>–¢–≤—ñ–π –∫–æ—à–∏–∫:</b>\n\n"
    total = 0
    
    for item in cart:
        qty = item.get('quantity', 1)
        price = item.get('price', 0)
        subtotal = qty * price
        total += subtotal
        
        text += f"‚Ä¢ <b>{item.get('name', '')}</b>\n"
        text += f"  {qty} √ó {price:.0f} –≥—Ä–Ω = {subtotal:.0f} –≥—Ä–Ω\n\n"
    
    text += f"\n{EMOJI['money']} <b>–†–∞–∑–æ–º: {total:.0f} –≥—Ä–Ω</b>"
    text += f"\n\n{EMOJI['sparkles']} <i>–ì–æ—Ç–æ–≤–∏–π –æ—Ñ–æ—Ä–º–∏—Ç–∏?</i>"
    
    send_message(user_id, text, reply_markup=get_cart_keyboard())


def handle_checkout(user_id):
    """–ü–æ—á–∞—Ç–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"""
    cart = get_user_cart(user_id)
    
    if not cart:
        send_message(user_id, "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        return
    
    set_user_state(user_id, STATE_AWAITING_PHONE)
    
    text = f"""
{EMOJI['phone']} <b>–ö—Ä–æ–∫ 1/2: –¢–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É</b>

–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É:

<i>–§–æ—Ä–º–∞—Ç: +380XXXXXXXXX –∞–±–æ 0XXXXXXXXX</i>
"""
    
    send_message(user_id, text)


def handle_phone_input(user_id, phone):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    if not validate_phone(phone):
        send_message(
            user_id,
            f"{EMOJI['phone']} <b>–£–ø—Å!</b> –ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π.\n\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑: +380XXXXXXXXX"
        )
        return
    
    normalized = normalize_phone(phone)
    set_user_state(user_id, STATE_AWAITING_ADDRESS, {'phone': normalized})
    
    text = f"""
{EMOJI['check']} –î—è–∫—É—é!

{EMOJI['location']} <b>–ö—Ä–æ–∫ 2/2: –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>

–í–∫–∞–∂–∏ –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É (–≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):
"""
    
    send_message(user_id, text)


def handle_address_input(user_id, address):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏"""
    if not validate_address(address):
        send_message(
            user_id,
            f"{EMOJI['location']} –í–∫–∞–∂–∏ –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –∑ –Ω–æ–º–µ—Ä–æ–º –±—É–¥–∏–Ω–∫—É, –±—É–¥—å –ª–∞—Å–∫–∞"
        )
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
    state_data = db.get_user_state(user_id)
    if not state_data:
        send_message(user_id, "–ü–æ–º–∏–ª–∫–∞, –ø–æ—á–Ω–∏ —Å–ø–æ—á–∞—Ç–∫—É /start")
        return
    
    phone = state_data.get('state_data', {}).get('phone')
    if not phone:
        send_message(user_id, "–ü–æ–º–∏–ª–∫–∞, –ø–æ—á–Ω–∏ —Å–ø–æ—á–∞—Ç–∫—É /start")
        return
    
    cart = get_user_cart(user_id)
    
    # –§–æ—Ä–º—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    total = sum(item.get('quantity', 1) * item.get('price', 0) for item in cart)
    items_json = json.dumps(cart, ensure_ascii=False)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
    order_id = db.create_order(user_id, phone, address, items_json, total)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Google Sheets
    try:
        sheets.add_order({
            'order_id': order_id,
            'user_id': user_id,
            'phone': phone,
            'address': address,
            'items': items_json,
            'total': total,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"‚ùå Sheets error: {e}")
    
    # –û—á–∏—â—É—î–º–æ –∫–æ—à–∏–∫
    clear_cart(user_id)
    set_user_state(user_id, STATE_IDLE)
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    text = f"""
{EMOJI['party']} <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b> {EMOJI['party']}

üìù <b>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> #{order_id}
{EMOJI['money']} <b>–°—É–º–∞:</b> {total:.0f} –≥—Ä–Ω
{EMOJI['time']} <b>–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ~45-60 —Ö–≤

–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ —Ç–æ–±–æ—é –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!

{EMOJI['heart']} <b>–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!</b> {EMOJI['yummy']}

<i>–ü–æ–≤–µ—Ä—Ç–∞–π—Å—è —â–µ ‚Äî —É –Ω–∞—Å –∑–∞–≤–∂–¥–∏ —î —â–æ—Å—å —Å–º–∞—á–Ω–µ–Ω—å–∫–µ!</i>
"""
    
    send_message(user_id, text, reply_markup=get_main_keyboard())
    
    # –ë–æ–Ω—É—Å –¥–ª—è –ø–µ—Ä—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
    orders = db.get_user_orders(user_id)
    if len(orders) == 1:
        send_message(
            user_id,
            f"{EMOJI['gift']} <b>–í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä—à–∏–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º!</b>\n\n–û—Ç—Ä–∏–º—É–π –∑–Ω–∏–∂–∫—É 10% –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º: FERRIK10"
        )


# ============================================================================
# WEBHOOK HANDLER
# ============================================================================
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ webhook"""
    try:
        update = request.get_json()
        
        if not update:
            return {'ok': False}, 400
        
        logger.info(f"üì® Received update")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if 'message' in update:
            message = update['message']
            user_id = message['from']['id']
            username = message['from'].get('username', message['from'].get('first_name', ''))
            
            # –ö–æ–º–∞–Ω–¥–∏
            if 'text' in message:
                text = message['text']
                
                if text == '/start':
                    handle_start(user_id, username)
                elif text == '/menu':
                    handle_menu(user_id)
                elif text == '/cart':
                    handle_cart(user_id)
                else:
                    # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—É
                    state = get_user_state(user_id)
                    
                    if state == STATE_AWAITING_PHONE:
                        handle_phone_input(user_id, text)
                    elif state == STATE_AWAITING_ADDRESS:
                        handle_address_input(user_id, text)
                    else:
                        # –ü–æ—à—É–∫ –ø–æ –º–µ–Ω—é
                        send_message(
                            user_id,
                            f"{EMOJI['search']} –®—É–∫–∞—é ¬´{text}¬ª...\n\n<i>–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!</i> {EMOJI['wink']}",
                            reply_markup=get_main_keyboard()
                        )
        
        # –û–±—Ä–æ–±–∫–∞ callback
        elif 'callback_query' in update:
            callback = update['callback_query']
            user_id = callback['from']['id']
            callback_id = callback['id']
            data = callback['data']
            
            # –†–æ—É—Ç–∏–Ω–≥ callback
            if data == 'menu':
                handle_menu(user_id)
                answer_callback(callback_id)
            elif data == 'cart':
                handle_cart(user_id)
                answer_callback(callback_id)
            elif data == 'checkout':
                handle_checkout(user_id)
                answer_callback(callback_id)
            elif data == 'clear_cart':
                clear_cart(user_id)
                answer_callback(callback_id, f"{EMOJI['check']} –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
                handle_cart(user_id)
            elif data.startswith('cat_'):
                category = data[4:]
                handle_category(user_id, category)
                answer_callback(callback_id)
            elif data.startswith('add_'):
                item_id = data[4:]
                handle_add_to_cart(user_id, item_id, callback_id)
            elif data == 'promos':
                send_message(user_id, f"{EMOJI['gift']} –ê–∫—Ü—ñ—ó —Å–∫–æ—Ä–æ!")
                answer_callback(callback_id)
            elif data == 'history':
                orders = db.get_user_orders(user_id)
                send_message(
                    user_id,
                    f"{EMOJI['history']} –¢–∏ –∑—Ä–æ–±–∏–≤ {len(orders)} –∑–∞–º–æ–≤–ª–µ–Ω—å! {EMOJI['fire']}"
                )
                answer_callback(callback_id)
            elif data == 'badges':
                level = get_user_level(user_id)
                send_message(
                    user_id,
                    f"{level['emoji']} <b>–¢–≤—ñ–π —Ä—ñ–≤–µ–Ω—å: {level['level']}</b>\n\n–ü—Ä–æ–¥–æ–≤–∂—É–π –∑–∞–º–æ–≤–ª—è—Ç–∏!"
                )
                answer_callback(callback_id)
            elif data == 'search':
                send_message(
                    user_id,
                    f"{EMOJI['search']} <b>–ü–æ—à—É–∫</b>\n\n–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏ –∞–±–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç:"
                )
                answer_callback(callback_id)
            else:
                answer_callback(callback_id)
        
        return {'ok': True}
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        return {'ok': False}, 500


@app.route('/', methods=['GET'])
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Ferrik Bot</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 50px auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }}
            .container {{
                background: rgba(255,255,255,0.1);
                padding: 40px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
            }}
            h1 {{
                font-size: 3em;
                margin-bottom: 20px;
            }}
            .status {{
                font-size: 1.5em;
                margin: 20px 0;
            }}
            .emoji {{
                font-size: 2em;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1><span class="emoji">üç¥</span> Ferrik Bot</h1>
            <div class="status">
                <span class="emoji">{EMOJI['check']}</span> Status: <strong>Active</strong>
            </div>
            <p>Version: 2.0 - Enhanced Experience</p>
            <p>–¢–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–º–∞–∫–æ–≤–∏–π —Å—É–ø—É—Ç–Ω–∏–∫ {EMOJI['chef']}</p>
        </div>
    </body>
    </html>
    """


@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    try:
        return {
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'version': '2.0'
        }, 200
    except Exception as e:
        return {
            'status': 'unhealthy',
            'error': str(e)
        }, 503


# ============================================================================
# –ó–ê–ü–£–°–ö
# ============================================================================
if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    
    logger.info("üöÄ Starting Ferrik Bot...")
    logger.info(f"üìä Database: {'Connected' if db else 'Not connected'}")
    logger.info(f"üìã Google Sheets: {'Connected' if sheets and sheets.is_connected() else 'Not connected'}")
    
    app.run(host='0.0.0.0', port=port, debug=False)
