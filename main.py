import os
import logging
import json
import re
from flask import Flask, request, jsonify
import requests
from handlers.cart import show_cart, add_item_to_cart
from handlers.order import start_checkout_process
from handlers.geo import check_delivery_availability
from services.sheets import init_gspread_client, get_menu_from_sheet, get_item_by_id
from services.gemini import get_gemini_recommendation
from models.user import init_db, get_state, set_state, get_cart, set_cart
from datetime import datetime
from menu_logic import generate_menu_keyboard # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –º–µ–Ω—é

try:
    from zoneinfo import ZoneInfo
except ImportError:
    logging.warning("zoneinfo not found. Using naive datetime.")
    ZoneInfo = None

app = Flask(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler('bot.log')]
)
logger = logging.getLogger("ferrik")

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "Ferrik123").strip()
API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()
OPERATOR_CHAT_ID = os.environ.get("OPERATOR_CHAT_ID", "").strip()
DEFAULT_CITY = os.environ.get("DEFAULT_CITY", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å").strip()
GOOGLE_SEARCH_API_KEY = os.environ.get("GOOGLE_SEARCH_API_KEY")
GOOGLE_SEARCH_CX = os.environ.get("GOOGLE_SEARCH_CX")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
TIMEZONE_NAME = "Europe/Kyiv"

menu_cache = []

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
def send_telegram_message(chat_id, text, reply_markup=None):
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown',
        'reply_markup': reply_markup,
    }
    try:
        requests.post(f"{API_URL}/sendMessage", json=payload)
    except Exception as e:
        logger.error(f"Failed to send message: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥—ñ—ó –≤ Telegram
def send_chat_action(chat_id, action):
    payload = {'chat_id': chat_id, 'action': action}
    try:
        requests.post(f"{API_URL}/sendChatAction", json=payload)
    except Exception as e:
        logger.error(f"Failed to send chat action: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback-–∑–∞–ø–∏—Ç
def tg_answer_callback(callback_id, text=None):
    payload = {'callback_query_id': callback_id, 'text': text}
    try:
        requests.post(f"{API_URL}/answerCallbackQuery", json=payload)
    except Exception as e:
        logger.error(f"Failed to answer callback query: {e}")

def generate_personalized_greeting(user_name="–î—Ä—É–∂–µ"):
    user_name = (user_name or '').strip() or '–î—Ä—É–∂–µ'
    current = datetime.now() if not ZoneInfo else datetime.now(ZoneInfo(TIMEZONE_NAME))
    hour = current.hour

    greeting = f"–î–æ–±—Ä–æ–≥–æ {'—Ä–∞–Ω–∫—É' if 6 <= hour < 12 else '–¥–Ω—è' if 12 <= hour < 18 else '–≤–µ—á–æ—Ä–∞'}, {user_name}! üòä"
    status = "–†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π! üçΩÔ∏è –ì–æ—Ç–æ–≤—ñ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è." if is_restaurant_open() else "–†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä–∏—Ç–∏–π. üòî –ü—Ä–∞—Ü—é—î–º–æ –∑ 9:00 –¥–æ 22:00."
    return f"{greeting}\n\n{status}\n\n–Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ! üçîüçï"

def is_restaurant_open():
    current_hour = datetime.now().hour if not ZoneInfo else datetime.now(ZoneInfo(TIMEZONE_NAME)).hour
    return 9 <= current_hour < 22

# Health check endpoint
@app.route("/health", methods=["GET"])
def health_check():
    return jsonify({"status": "ok", "timestamp": datetime.now().isoformat()})

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
with app.app_context():
    logger.info("Bot initialization started.")
    try:
        init_db()
        logger.info("Database initialized.")
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")
    try:
        global menu_cache
        menu_cache = get_menu_from_sheet(GOOGLE_SHEET_ID)
        if not menu_cache:
            raise ValueError("Menu is empty!")
        logger.info(f"Menu loaded: {len([item for item in menu_cache if item.get('–ê–∫—Ç–∏–≤–Ω–∏–π') == '–¢–∞–∫'])} active items from {len(menu_cache)} total")
    except Exception as e:
        logger.error(f"Failed to load menu from Google Sheet: {e}")
        menu_cache = []

# Webhook endpoint for Telegram updates
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != WEBHOOK_SECRET:
        return jsonify({'status': 'invalid token'}), 403

    update = request.get_json()
    if not update:
        return jsonify({'status': 'no update data'}), 200

    logger.info(f"Received update: {update}")

    message = update.get('message')
    callback_query = update.get('callback_query')

    if callback_query:
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        # –û–±—Ä–æ–±–∫–∞ callback data
        if data.startswith('add_'):
            item_id = data.split('_')[1]
            add_item_to_cart(chat_id, item_id, menu_cache)
        elif data.startswith('remove_'):
            item_id = data.split('_')[1]
            # Assumes a remove_item_from_cart function exists
            pass
        elif data == 'show_cart':
            show_cart(chat_id, menu_cache)
        elif data == 'start_checkout':
            start_checkout_process(chat_id)
        
        tg_answer_callback(callback_query['id'])
        return '', 200

    if message:
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        user_name = message['from'].get('first_name', "–î—Ä—É–∂–µ")
        text = message.get('text')

        if not text:
            return '', 200

        state = get_state(user_id) or 'start'
        
        if text == '/start':
            send_telegram_message(chat_id, generate_personalized_greeting(user_name))
            set_state(user_id, 'start')
            return '', 200
        
        elif text == 'üçî –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É':
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –º–µ–Ω—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
            reply_markup = generate_menu_keyboard(menu_cache)
            send_telegram_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å, —â–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:", reply_markup)
            return '', 200

    return '', 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
