import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
logger.info("üöÄ Starting FerrikFootBot...")

try:
    from config import BOT_TOKEN, GEMINI_API_KEY, SPREADSHEET_ID, WEBHOOK_SECRET, WEBHOOK_URL
    logger.info("‚úÖ Config imported successfully")
except Exception as e:
    logger.error(f"‚ùå Config import error: {e}")

try:
    from services.sheets import init_gspread_client, get_menu_from_sheet, save_order_to_sheets, is_sheets_connected
    logger.info("‚úÖ Sheets service imported")
except Exception as e:
    logger.error(f"‚ùå Sheets import error: {e}")

try:
    from services.gemini import init_gemini_client, get_ai_response, is_gemini_connected
    logger.info("‚úÖ Gemini service imported")
except Exception as e:
    logger.error(f"‚ùå Gemini import error: {e}")

try:
    from models.user import init_user_db
    logger.info("‚úÖ User model imported")
except Exception as e:
    logger.error(f"‚ùå User model import error: {e}")


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏: Sheets, Gemini, DB"""
    try:
        if is_sheets_connected() or init_gspread_client():
            menu_items = get_menu_from_sheet(force=True)
            logger.info(f"‚úÖ Menu cached: {len(menu_items)} items")
            
        if is_gemini_connected() or init_gemini_client():
            logger.info("‚úÖ Gemini client initialized")
            
        init_user_db()
        
    except Exception as e:
        logger.error(f"‚ùå Critical initialization error in init_services: {e}")


def send_message(chat_id, text, reply_markup=None):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API"""
    import requests
    
    try:
        bot_token = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN not found for send_message")
            return None
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        if reply_markup:
            import json
            payload["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå Send message error: {e}")
        return None


def answer_callback(callback_id, text):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ callback query"""
    import requests
    
    try:
        bot_token = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
        url = f"https://api.telegram.org/bot{bot_token}/answerCallbackQuery"
        
        payload = {
            "callback_query_id": callback_id,
            "text": text
        }
        
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        logger.error(f"‚ùå Answer callback error: {e}")


def process_telegram_update(update):
    """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥ Telegram"""
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ–¥—É, —â–æ –≤–∏–∫–ª–∏–∫–∞–≤ SyntaxError
    # –†—è–¥–æ–∫ 211, –¥–µ –±—É–ª–æ:
    # name =
    # –ü–æ—á–∞—Ç–æ–∫ –±–ª–æ–∫—É, –¥–µ, –π–º–æ–≤—ñ—Ä–Ω–æ, –º–∞–≤ –±—É—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π update
    
    if 'message' in update:
        message = update['message']
        chat_id = message['chat']['id']
        user_name = message['from'].get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
        text = message.get('text', '')

        if text == '/start':
            greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user_name}! –Ø FoodBot, –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
            send_message(chat_id, greeting)
        
        elif text == '/menu':
            send_message(chat_id, "üìñ –ù–∞—Ä–∞–∑—ñ –º–µ–Ω—é –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—î—é.")
            
        elif text == '/recommendation':
            # –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Gemini. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
            response_text = get_ai_response("–ó—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –¥–ª—è –æ–±—ñ–¥—É –≤ –æ–±—ñ–¥–Ω—ñ–π —á–∞—Å.")
            send_message(chat_id, f"‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è –≤—ñ–¥ AI:\n{response_text}")

        else:
            # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É —á–µ—Ä–µ–∑ AI
            response_text = get_ai_response(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} –Ω–∞–ø–∏—Å–∞–≤: '{text}'. –î–∞–π –¥—Ä—É–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫ –ø–æ–º—ñ—á–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É.")
            send_message(chat_id, response_text)

    elif 'callback_query' in update:
        callback_query = update['callback_query']
        callback_id = callback_query['id']
        data = callback_query['data']
        chat_id = callback_query['message']['chat']['id']

        answer_callback(callback_id, f"–û–±—Ä–æ–±–ª–µ–Ω–æ: {data}")
        send_message(chat_id, f"–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É –∑ –¥–∞–Ω–∏–º–∏: `{data}`")


# ==========================================================
# FLASK ENDPOINTS
# ==========================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Telegram"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != WEBHOOK_SECRET:
        logger.warning("‚ùå Webhook: Invalid Secret Token")
        return jsonify({'status': 'error', 'message': 'Invalid secret token'}), 403
    
    try:
        update = request.get_json()
        if update:
            process_telegram_update(update)
            return jsonify({'status': 'ok'}), 200
        else:
            return jsonify({'status': 'ok', 'message': 'No update'}), 200
    except Exception as e:
        logger.error(f"‚ùå Webhook processing error: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500


@app.route('/set_webhook', methods=['POST'])
def set_webhook_route():
    """–ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞"""
    import requests
    
    try:
        response = requests.get(
            f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
            params={
                "url": WEBHOOK_URL,
                "secret_token": WEBHOOK_SECRET
            },
            timeout=10
        )
        return jsonify(response.json())
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check –¥–ª—è Render"""
    return jsonify({"status": "ok", "timestamp": datetime.now().isoformat()}), 200


# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404


@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {error}")
    return jsonify({"error": "Internal server error"}), 500


# ==========================================================
# –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –î–û–î–ê–¢–ö–£
# ==========================================================
with app.app_context():
    logger.info("üöÄ FerrikFootBot starting...")
    
    try:
        init_services()
        logger.info("üéâ FerrikFootBot initialization completed!")
        
    except Exception as e:
        logger.exception(f"‚ùå Critical startup error: {e}")


if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (—è–∫—â–æ FLASK_DEBUG=true)
    port = int(os.environ.get("PORT", 5000))
    debug_mode = os.environ.get("FLASK_DEBUG", "false").lower() == "true"
    
    if debug_mode:
        app.run(host="0.0.0.0", port=port, debug=True)
    else:
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≤ production
        if WEBHOOK_URL:
            import requests
            try:
                response = requests.get(
                    f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                    params={
                        "url": WEBHOOK_URL,
                        "secret_token": WEBHOOK_SECRET
                    },
                    timeout=10
                )
                logger.info(f"Webhook set response: {response.json()}")
            except Exception as e:
                logger.error(f"Failed to set webhook: {e}")
