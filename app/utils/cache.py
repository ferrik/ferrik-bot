"""
üíæ CACHE - In-Memory –∫–µ—à—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
–°–∫–æ—Ä–æ—á—É—î –ø–æ–≤—Ç–æ—Ä–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ API
"""

import time
import logging
from typing import Any, Optional, Dict

logger = logging.getLogger(__name__)


class SimpleCache:
    """
    –ü—Ä–æ—Å—Ç–∏–π in-memory –∫–µ—à –∑ TTL (Time To Live)
    
    –ö–µ—à—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    """
    
    def __init__(self, ttl: int = 300):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–µ—à—É
        
        Args:
            ttl: Time To Live –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 5 —Ö–≤–∏–ª–∏–Ω)
        """
        self.cache: Dict[str, Tuple[Any, float]] = {}
        self.ttl = ttl
        self.hits = 0
        self.misses = 0
        
        logger.info(f"üì¶ Cache initialized with TTL={ttl}s")
    
    def get(self, key: str) -> Optional[Any]:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–µ—à—É
        
        Args:
            key: –ö–ª—é—á –∫–µ—à—É
        
        Returns:
            –ó–Ω–∞—á–µ–Ω–Ω—è —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ, —ñ–Ω–∞–∫—à–µ None
        """
        if key in self.cache:
            value, timestamp = self.cache[key]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–≤
            if time.time() - timestamp < self.ttl:
                self.hits += 1
                logger.debug(f"üíæ Cache HIT: {key}")
                return value
            else:
                # –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—É –∑–∞–ø–∏—Å
                del self.cache[key]
                logger.debug(f"‚è∞ Cache EXPIRED: {key}")
        
        self.misses += 1
        logger.debug(f"‚ùå Cache MISS: {key}")
        return None
    
    def set(self, key: str, value: Any):
        """
        –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–µ—à
        
        Args:
            key: –ö–ª—é—á –∫–µ—à—É
            value: –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
        """
        self.cache[key] = (value, time.time())
        logger.debug(f"‚úÖ Cache SET: {key}")
    
    def delete(self, key: str):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–µ—à—É"""
        if key in self.cache:
            del self.cache[key]
            logger.debug(f"üóëÔ∏è Cache DELETE: {key}")
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å –∫–µ—à"""
        self.cache.clear()
        logger.info("üßπ Cache cleared")
    
    def get_stats(self) -> dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É"""
        total = self.hits + self.misses
        hit_rate = (self.hits / total * 100) if total > 0 else 0
        
        return {
            'hits': self.hits,
            'misses': self.misses,
            'total': total,
            'hit_rate': f"{hit_rate:.1f}%",
            'cached_items': len(self.cache),
            'ttl': self.ttl
        }


# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–Ü INSTANCES
# ============================================================================

# –ö–µ—à –¥–ª—è AI –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (5 —Ö–≤–∏–ª–∏–Ω)
ai_cache = SimpleCache(ttl=300)

# –ö–µ—à –¥–ª—è –º–µ–Ω—é (30 —Ö–≤–∏–ª–∏–Ω)
menu_cache = SimpleCache(ttl=1800)

# –ö–µ—à –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –¥–∞–Ω—ñ (10 —Ö–≤–∏–ª–∏–Ω)
user_cache = SimpleCache(ttl=600
