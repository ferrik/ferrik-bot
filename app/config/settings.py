"""
‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞ (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è, —Ç–∏–ø—ñ–∑–∞—Ü—ñ—è, –±–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
"""
import os
import json
import logging
from dataclasses import dataclass, field
from typing import Optional, Dict, Any

# ============================================================================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
# ============================================================================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
    ]
)

logger = logging.getLogger(__name__)

# ============================================================================
# –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
# ============================================================================

@dataclass
class BotConfig:
    """–û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
    
    # Telegram
    telegram_token: str
    webhook_secret: str
    
    # Google Sheets
    sheet_id: str
    google_credentials: Optional[str] = None
    
    # Deployment
    environment: str = "production"
    debug: bool = False
    port: int = 5000
    webhook_url: Optional[str] = None
    render_url: Optional[str] = None
    
    # Database
    database_url: str = "sqlite:///bot.db"
    redis_url: Optional[str] = None
    
    # Features
    min_order_amount: float = 100.0
    enable_commission: bool = True
    
    # Admin
    admin_token: Optional[str] = None
    
    @classmethod
    def from_env(cls) -> 'BotConfig':
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
        
        return cls(
            # Required
            telegram_token=os.getenv('TELEGRAM_BOT_TOKEN', ''),
            webhook_secret=os.getenv('WEBHOOK_SECRET', 'default_secret'),
            sheet_id=os.getenv('GOOGLE_SHEET_ID', ''),
            
            # Optional - Google
            google_credentials=os.getenv('GOOGLE_CREDENTIALS'),
            
            # Optional - Deployment
            environment=os.getenv('ENVIRONMENT', 'production'),
            debug=os.getenv('DEBUG', 'false').lower() == 'true',
            port=int(os.getenv('PORT', 5000)),
            webhook_url=os.getenv('WEBHOOK_URL'),
            render_url=os.getenv('RENDER_EXTERNAL_URL'),
            
            # Optional - Database
            database_url=os.getenv('DATABASE_URL', 'sqlite:///bot.db'),
            redis_url=os.getenv('REDIS_URL'),
            
            # Optional - Features
            min_order_amount=float(os.getenv('MIN_ORDER_AMOUNT', 100.0)),
            enable_commission=os.getenv('ENABLE_COMMISSION', 'true').lower() == 'true',
            
            # Optional - Admin
            admin_token=os.getenv('ADMIN_TOKEN'),
        )
    
    def validate(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        errors = []
        
        if not self.telegram_token:
            errors.append("‚ùå TELEGRAM_BOT_TOKEN is required")
        
        if not self.sheet_id:
            errors.append("‚ùå GOOGLE_SHEET_ID is required")
        
        if not self.webhook_url and not self.render_url:
            errors.append("‚ö†Ô∏è Neither WEBHOOK_URL nor RENDER_EXTERNAL_URL is set")
        
        if errors:
            for error in errors:
                logger.error(error)
            return False
        
        logger.info("‚úÖ Configuration validated successfully")
        return True
    
    def get_webhook_url(self) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ URL –¥–ª—è webhook"""
        base_url = self.webhook_url or self.render_url
        if not base_url:
            raise ValueError("No webhook URL configured")
        
        # –î–æ–¥–∞—î–º–æ /webhook —è–∫—â–æ –Ω–µ–º–∞—î
        if not base_url.endswith('/webhook'):
            base_url = f"{base_url.rstrip('/')}/webhook"
        
        return base_url
    
    def display(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é (–ø—Ä–∏—Ö–æ–≤—É—é—á–∏ —Å–µ–∫—Ä–µ—Ç–∏)"""
        logger.info("=" * 60)
        logger.info("ü§ñ BOT CONFIGURATION")
        logger.info("=" * 60)
        logger.info(f"Environment: {self.environment}")
        logger.info(f"Debug: {self.debug}")
        logger.info(f"Port: {self.port}")
        logger.info(f"Webhook URL: {self.get_webhook_url()}")
        logger.info(f"Sheet ID: {self.sheet_id[:8]}...")
        logger.info(f"Database: {self.database_url.split(':')[0]}://...")
        logger.info(f"Redis: {'ENABLED' if self.redis_url else 'DISABLED'}")
        logger.info(f"Min Order: {self.min_order_amount} –≥—Ä–Ω")
        logger.info(f"Commission: {'ENABLED' if self.enable_commission else 'DISABLED'}")
        logger.info("=" * 60)


# ============================================================================
# Google Credentials Parser
# ============================================================================

def load_google_credentials() -> Optional[Dict[str, Any]]:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Google credentials –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    
    –ü—ñ–¥—Ç—Ä–∏–º—É—î:
    1. JSON-—Ä—è–¥–æ–∫ –≤ –∑–º—ñ–Ω–Ω—ñ–π —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    2. –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É credentials.json
    3. None (—è–∫—â–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
    """
    creds_str = os.getenv('GOOGLE_CREDENTIALS', '')
    
    if not creds_str:
        logger.warning("‚ö†Ô∏è GOOGLE_CREDENTIALS not set")
        return None
    
    # –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏—Ç–∏ —è–∫ JSON
    try:
        creds_dict = json.loads(creds_str)
        logger.info("‚úÖ Google credentials loaded from JSON string")
        return creds_dict
    except json.JSONDecodeError:
        pass
    
    # –°–ø—Ä–æ–±–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —è–∫ —Ñ–∞–π–ª
    if os.path.isfile(creds_str):
        try:
            with open(creds_str, 'r') as f:
                creds_dict = json.load(f)
            logger.info(f"‚úÖ Google credentials loaded from file: {creds_str}")
            return creds_dict
        except Exception as e:
            logger.error(f"‚ùå Error reading credentials file: {e}")
            return None
    
    logger.warning("‚ö†Ô∏è GOOGLE_CREDENTIALS format not recognized")
    return None


# ============================================================================
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ —Å–ª–æ–≤–Ω–∏–∫–∏
# ============================================================================

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class UserState:
    IDLE = 'STATE_IDLE'
    AWAITING_PHONE = 'STATE_AWAITING_PHONE'
    AWAITING_ADDRESS = 'STATE_AWAITING_ADDRESS'
    AWAITING_FEEDBACK = 'STATE_AWAITING_FEEDBACK'

# –°—Ç–∞—Ç—É—Å–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å
class OrderStatus:
    PENDING = 'pending'
    CONFIRMED = 'confirmed'
    IN_PROGRESS = 'in_progress'
    DELIVERED = 'delivered'
    CANCELLED = 'cancelled'

ORDER_STATUS_NAMES = {
    OrderStatus.PENDING: '‚è≥ –û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
    OrderStatus.CONFIRMED: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
    OrderStatus.IN_PROGRESS: 'üöö –í –¥–æ—Ä–æ–∑—ñ',
    OrderStatus.DELIVERED: 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
    OrderStatus.CANCELLED: '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ'
}

# –†—ñ–≤–Ω—ñ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
PREMIUM_LEVELS = {
    'bronze': {'name': 'ü•â –ë—Ä–æ–Ω–∑–∞', 'discount': 5},
    'silver': {'name': 'ü•à –°—Ä—ñ–±–ª–æ', 'discount': 10},
    'gold': {'name': 'ü•á –ó–æ–ª–æ—Ç–æ', 'discount': 15},
    'platinum': {'name': 'üíé –ü–ª–∞—Ç–∏–Ω–∞', 'discount': 20}
}

# –°—Ç–∞—Ç—É—Å–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
PARTNER_STATUSES = {
    'active': '‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π',
    'pending': '‚è≥ –ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ',
    'suspended': '‚ö†Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ',
    'blocked': 'üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ'
}

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–æ–º—ñ—Å—ñ–π
COMMISSION_CONFIG = {
    'default_rate': 0.10,  # 10%
    'min_rate': 0.05,      # 5%
    'max_rate': 0.25,      # 25%
    'enable': True
}

# –ú–∞–ø–ø—ñ–Ω–≥ –ø–æ–ª—ñ–≤ Google Sheets
SHEET_FIELDS = {
    'menu': {
        'id': 'ID',
        'name': '–ù–∞–∑–≤–∞',
        'price': '–¶—ñ–Ω–∞',
        'category': '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è',
        'description': '–û–ø–∏—Å',
        'image_url': '–§–æ—Ç–æ',
        'available': '–î–æ—Å—Ç—É–ø–Ω–æ'
    },
    'orders': {
        'id': 'ID',
        'user_id': 'User ID',
        'username': 'Username',
        'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
        'address': '–ê–¥—Ä–µ—Å–∞',
        'items': '–¢–æ–≤–∞—Ä–∏',
        'total': '–°—É–º–∞',
        'status': '–°—Ç–∞—Ç—É—Å',
        'created_at': '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'
    },
    'partners': {
        'id': 'ID',
        'name': "–Ü–º'—è",
        'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
        'level': '–†—ñ–≤–µ–Ω—å',
        'commission_rate': '–ö–æ–º—ñ—Å—ñ—è',
        'status': '–°—Ç–∞—Ç—É—Å',
        'total_revenue': '–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥',
        'rating': '–†–µ–π—Ç–∏–Ω–≥'
    },
    'reviews': {
        'id': 'ID',
        'user_id': 'User ID',
        'username': 'Username',
        'rating': '–û—Ü—ñ–Ω–∫–∞',
        'comment': '–ö–æ–º–µ–Ω—Ç–∞—Ä',
        'created_at': '–î–∞—Ç–∞'
    }
}


# ============================================================================
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
# ============================================================================

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ—ñ–≥—É
config = BotConfig.from_env()

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ Google Credentials
GOOGLE_CREDENTIALS_DICT = load_google_credentials()

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è backward compatibility –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º
TELEGRAM_BOT_TOKEN = config.telegram_token
WEBHOOK_SECRET = config.webhook_secret
GOOGLE_SHEET_ID = config.sheet_id
GOOGLE_CREDENTIALS = config.google_credentials
ENVIRONMENT = config.environment
DEBUG = config.debug
PORT = config.port
WEBHOOK_URL = config.webhook_url
RENDER_URL = config.render_url
DATABASE_URL = config.database_url
REDIS_URL = config.redis_url
MIN_ORDER_AMOUNT = config.min_order_amount
ADMIN_TOKEN = config.admin_token


# ============================================================================
# –£—Ç–∏–ª—ñ—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# ============================================================================

def get_webhook_url() -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–∏–π URL webhook"""
    return config.get_webhook_url()

def is_production() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∞—Ü—é—î–º–æ –≤ production"""
    return config.environment.lower() == 'production'

def is_debug() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É debug"""
    return config.debug


# ============================================================================
# –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
# ============================================================================

if __name__ != "__main__":
    # –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ (–∞–ª–µ –Ω–µ –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ)
    if not config.telegram_token or not config.sheet_id:
        if is_debug():
            logger.warning("‚ö†Ô∏è Configuration incomplete - some features may not work")


# ============================================================================
# –Ø–∫—â–æ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —è–∫ —Å–∫—Ä–∏–ø—Ç - –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
# ============================================================================

if __name__ == "__main__":
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    is_valid = config.validate()
    
    # –ü–æ–∫–∞–∑ –∫–æ–Ω—Ñ—ñ–≥—É
    config.display()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Google Credentials
    if GOOGLE_CREDENTIALS_DICT:
        logger.info(f"‚úÖ Google Credentials: {len(GOOGLE_CREDENTIALS_DICT)} keys loaded")
        logger.info(f"   Type: {GOOGLE_CREDENTIALS_DICT.get('type', 'unknown')}")
        logger.info(f"   Project: {GOOGLE_CREDENTIALS_DICT.get('project_id', 'unknown')[:20]}...")
    else:
        logger.warning("‚ö†Ô∏è Google Credentials not loaded")
    
    # –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    if is_valid:
        logger.info("üéâ Configuration is valid and ready to use!")
    else:
        logger.error("üí• Configuration validation failed!")
        exit(1)
