import os
import json
import psycopg2
import pandas as pd
from google.oauth2 import service_account
from googleapiclient.discovery import build

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ---
DATABASE_URL = os.getenv("DATABASE_URL")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets API ---
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
creds = service_account.Credentials.from_service_account_info(
    creds_dict,
    scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
)
service = build('sheets', 'v4', credentials=creds)
sheet_api = service.spreadsheets().values()

# --- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL ---
conn = psycopg2.connect(DATABASE_URL)
cursor = conn.cursor()

# --- –õ–∏—Å—Ç–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó ---
SHEETS = {
    "–ú–µ–Ω—é": "menu",
    "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è": "orders",
    "–ü—Ä–æ–º–æ–∫–æ–¥–∏": "promo_codes",
    "–í—ñ–¥–≥—É–∫–∏": "reviews",
    "–ö–æ–Ω—Ñ—ñ–≥": "config",
    "–ü–∞—Ä—Ç–Ω–µ—Ä–∏": "partners"
}

def sanitize_column(col):
    """–ü—ñ–¥—á–∏—â–∞—î –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ –ø—ñ–¥ —Ñ–æ—Ä–º–∞—Ç SQL."""
    return col.strip().replace(" ", "_").replace("(", "").replace(")", "").replace("%", "perc").replace("-", "_")

def create_table_if_not_exists(table_name, df):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î —Ç–∞–±–ª–∏—Ü—é –≤ PostgreSQL, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î."""
    cols = []
    for col in df.columns:
        col_name = sanitize_column(col)
        cols.append(f'"{col_name}" TEXT')
    create_sql = f'CREATE TABLE IF NOT EXISTS {table_name} ({", ".join(cols)});'
    cursor.execute(create_sql)
    conn.commit()

def sync_sheet(sheet_name, table_name):
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞."""
    print(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ª–∏—Å—Ç–∞: {sheet_name} ‚Üí —Ç–∞–±–ª–∏—Ü—è: {table_name}")
    try:
        result = sheet_api.get(spreadsheetId=GOOGLE_SHEET_ID, range=sheet_name).execute()
        values = result.get("values", [])
        if not values:
            print(f"‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π –ª–∏—Å—Ç: {sheet_name}")
            return
        df = pd.DataFrame(values[1:], columns=values[0])
        create_table_if_not_exists(table_name, df)

        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
        cursor.execute(f"DELETE FROM {table_name};")

        # –í—Å—Ç–∞–≤–∫–∞ —Ä—è–¥–∫—ñ–≤
        for _, row in df.iterrows():
            cols = [sanitize_column(c) for c in df.columns]
            placeholders = ", ".join(["%s"] * len(cols))
            insert_sql = f'INSERT INTO {table_name} ({", ".join(cols)}) VALUES ({placeholders})'
            cursor.execute(insert_sql, tuple(row))
        conn.commit()
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ: {sheet_name}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó {sheet_name}: {e}")

def main():
    for sheet_name, table_name in SHEETS.items():
        sync_sheet(sheet_name, table_name)
    cursor.close()
    conn.close()
    print("üéØ –£—Å—ñ –ª–∏—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ!")

if __name__ == "__main__":
    main()
