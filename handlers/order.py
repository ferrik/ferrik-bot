import logging
from datetime import datetime, timedelta
from models.user import get_cart, set_cart, set_state, clear_cart
from services.telegram import tg_send_message, format_order_confirmation, notify_operator
from services.sheets import save_order_to_sheets, get_min_delivery_amount

logger = logging.getLogger("ferrik.order")

def start_checkout_process(chat_id):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        cart = get_cart(chat_id)
        items = cart.get("items", [])
        
        if not items:
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üçΩÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", "callback_data": "show_menu"}]
                ]
            }
            tg_send_message(chat_id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —ñ–∑ –º–µ–Ω—é! üçΩÔ∏è", reply_markup=keyboard)
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        total = sum(float(item.get("price", 0)) * int(item.get("qty", 0)) for item in items)
        min_amount = get_min_delivery_amount()
        
        if total < min_amount:
            needed = min_amount - total
            message = f"‚ö†Ô∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî {min_amount:.2f} –≥—Ä–Ω.\n"
            message += f"–î–æ–¥–∞–π—Ç–µ —â–µ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ {needed:.2f} –≥—Ä–Ω! üòä"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üçΩÔ∏è –î–æ–¥–∞—Ç–∏ —â–µ —Ç–æ–≤–∞—Ä—ñ–≤", "callback_data": "show_menu"}],
                    [{"text": "üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "show_cart"}]
                ]
            }
            tg_send_message(chat_id, message, reply_markup=keyboard)
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
        phone = cart.get("phone")
        if phone:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥–æ—Å—Ç–∞–≤–∫–∏
            ask_delivery_type(chat_id)
        else:
            # –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
            message = "üì± –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            message += "<code>+380XXXXXXXXX</code> –∞–±–æ <code>0XXXXXXXXX</code>"
            
            tg_send_message(chat_id, message)
            set_state(chat_id, "awaiting_phone")
        
        return True
        
    except Exception as e:
        logger.error(f"Error starting checkout for {chat_id}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. üòî")
        return False

def ask_delivery_type(chat_id):
    """–ó–∞–ø–∏—Ç—É—î —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        message = "üöö –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üöö –î–æ—Å—Ç–∞–≤–∫–∞", "callback_data": "delivery_type_delivery"}],
                [{"text": "üèÉ‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤–∏–≤—ñ–∑", "callback_data": "delivery_type_pickup"}]
            ]
        }
        
        tg_send_message(chat_id, message, reply_markup=keyboard)
        set_state(chat_id, "awaiting_delivery_type")
        
    except Exception as e:
        logger.error(f"Error asking delivery type for {chat_id}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –¥–æ—Å—Ç–∞–≤–∫–∏. üòî")

def handle_delivery_type(chat_id, delivery_type, callback_id):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        cart = get_cart(chat_id)
        
        from services.telegram import tg_answer_callback
        
        if delivery_type == "delivery":
            cart["delivery_type"] = "–î–æ—Å—Ç–∞–≤–∫–∞"
            set_cart(chat_id, cart)
            
            tg_answer_callback(callback_id, "–î–æ—Å—Ç–∞–≤–∫–∞ –æ–±—Ä–∞–Ω–∞! üöö")
            
            message = "üè† –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            message += "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <i>–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 10, –º. –¢–µ—Ä–Ω–æ–ø—ñ–ª—å</i>\n\n"
            message += "üí° –ß–∏–º –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –∞–¥—Ä–µ—Å–∞, —Ç–∏–º —à–≤–∏–¥—à–µ –º–∏ –¥–æ—Å—Ç–∞–≤–∏–º–æ!"
            
            tg_send_message(chat_id, message)
            set_state(chat_id, "awaiting_address")
            
        elif delivery_type == "pickup":
            cart["delivery_type"] = "–°–∞–º–æ–≤–∏–≤—ñ–∑"
            cart["address"] = "–°–∞–º–æ–≤–∏–≤—ñ–∑"
            cart["delivery_cost"] = 0
            set_cart(chat_id, cart)
            
            tg_answer_callback(callback_id, "–°–∞–º–æ–≤–∏–≤—ñ–∑ –æ–±—Ä–∞–Ω–∏–π! üèÉ‚Äç‚ôÇÔ∏è")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –∞–¥—Ä–µ—Å—É –¥–ª—è —Å–∞–º–æ–≤–∏–≤–æ–∑—É
            message = "üèÉ‚Äç‚ôÇÔ∏è <b>–°–∞–º–æ–≤–∏–≤—ñ–∑</b>\n\n"
            message += "üìç <b>–ê–¥—Ä–µ—Å–∞:</b> –≤—É–ª. –†—É—Å—å–∫–∞, 12, –¢–µ—Ä–Ω–æ–ø—ñ–ª—å\n"
            message += "üïê <b>–ß–∞—Å —Ä–æ–±–æ—Ç–∏:</b> 10:00 - 22:00\n\n"
            message += "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üí≥ –ö–∞—Ä—Ç–æ—é –æ–Ω–ª–∞–π–Ω", "callback_data": "payment_card"}],
                    [{"text": "üíµ –ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ", "callback_data": "payment_cash"}]
                ]
            }
            
            tg_send_message(chat_id, message, reply_markup=keyboard)
            set_state(chat_id, "awaiting_payment_method")
        
    except Exception as e:
        logger.error(f"Error handling delivery type for {chat_id}: {e}")
        from services.telegram import tg_answer_callback
        tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –¥–æ—Å—Ç–∞–≤–∫–∏", show_alert=True)

def handle_address_input(chat_id, address):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏"""
    try:
        from handlers.geo import check_delivery_availability
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        coords = check_delivery_availability(address)
        
        if coords:
            cart = get_cart(chat_id)
            cart["address"] = address.strip()
            cart["coords"] = coords
            cart["delivery_cost"] = 50  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
            set_cart(chat_id, cart)
            
            message = f"‚úÖ –ê–¥—Ä–µ—Å–∞ –ø—Ä–∏–π–Ω—è—Ç–∞!\n\n"
            message += f"üìç <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {address}\n"
            message += f"üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> 50 –≥—Ä–Ω\n\n"
            message += "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üí≥ –ö–∞—Ä—Ç–æ—é –æ–Ω–ª–∞–π–Ω", "callback_data": "payment_card"}],
                    [{"text": "üíµ –ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤—Ü—ñ", "callback_data": "payment_cash"}]
                ]
            }
            
            tg_send_message(chat_id, message, reply_markup=keyboard)
            set_state(chat_id, "awaiting_payment_method")
            
        else:
            message = "üòî –í–∏–±–∞—á—Ç–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ —Ü—ñ—î—é –∞–¥—Ä–µ—Å–æ—é –Ω–µ–º–æ–∂–ª–∏–≤–∞.\n\n"
            message += "üöö –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: –º. –¢–µ—Ä–Ω–æ–ø—ñ–ª—å —Ç–∞ –æ–∫–æ–ª–∏—Ü—ñ (–¥–æ 7 –∫–º)\n\n"
            message += "–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Å–∞–º–æ–≤–∏–≤—ñ–∑:"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üèÉ‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤–∏–≤—ñ–∑", "callback_data": "delivery_type_pickup"}],
                    [{"text": "üìù –í–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –∞–¥—Ä–µ—Å—É", "callback_data": "retry_address"}]
                ]
            }
            
            tg_send_message(chat_id, message, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error handling address for {chat_id}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–¥—Ä–µ—Å–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. üòî")

def handle_payment_method(chat_id, payment_method, callback_id):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏"""
    try:
        cart = get_cart(chat_id)
        
        from services.telegram import tg_answer_callback
        
        if payment_method == "card":
            cart["payment_method"] = "–ö–∞—Ä—Ç–æ—é –æ–Ω–ª–∞–π–Ω"
            tg_answer_callback(callback_id, "–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞ –æ–±—Ä–∞–Ω–∞! üí≥")
            
        elif payment_method == "cash":
            delivery_type = cart.get("delivery_type", "–î–æ—Å—Ç–∞–≤–∫–∞")
            if delivery_type == "–°–∞–º–æ–≤–∏–≤—ñ–∑":
                cart["payment_method"] = "–ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ —Å–∞–º–æ–≤–∏–≤–æ–∑—ñ"
                tg_answer_callback(callback_id, "–ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ —Å–∞–º–æ–≤–∏–≤–æ–∑—ñ! üíµ")
            else:
                cart["payment_method"] = "–ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤—Ü—ñ"
                tg_answer_callback(callback_id, "–ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤—Ü—ñ! üíµ")
        
        set_cart(chat_id, cart)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É
        ask_delivery_time(chat_id)
        
    except Exception as e:
        logger.error(f"Error handling payment method for {chat_id}: {e}")
        from services.telegram import tg_answer_callback
        tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –æ–ø–ª–∞—Ç–∏", show_alert=True)

def ask_delivery_time(chat_id):
    """–ó–∞–ø–∏—Ç—É—î —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏/—Å–∞–º–æ–≤–∏–≤–æ–∑—É"""
    try:
        cart = get_cart(chat_id)
        delivery_type = cart.get("delivery_type", "–î–æ—Å—Ç–∞–≤–∫–∞")
        
        now = datetime.now()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —á–∞—Å—É
        time_options = []
        
        # –ù–∞–π–±–ª–∏–∂—á–∏–π –º–æ–∂–ª–∏–≤–∏–π —á–∞—Å (—á–µ—Ä–µ–∑ 30-60 —Ö–≤)
        earliest = now + timedelta(minutes=45)
        time_options.append(earliest.strftime("%H:%M"))
        
        # –î–æ–¥–∞—î–º–æ —â–µ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
        for i in range(1, 4):
            option_time = earliest + timedelta(minutes=30 * i)
            if option_time.hour < 22:  # –î–æ 22:00
                time_options.append(option_time.strftime("%H:%M"))
        
        message = f"‚è∞ –ö–æ–ª–∏ –≤–∞–º –∑—Ä—É—á–Ω–æ {'–æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É' if delivery_type == '–î–æ—Å—Ç–∞–≤–∫–∞' else '–∑–∞–±—Ä–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}?\n\n"
        message += "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç:"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": f"üïí {time}", "callback_data": f"delivery_time_{time}"} for time in time_options[:2]],
                [{"text": f"üïí {time}", "callback_data": f"delivery_time_{time}"} for time in time_options[2:4]],
                [{"text": "üìù –í–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π —á–∞—Å", "callback_data": "custom_delivery_time"}]
            ]
        }
        
        tg_send_message(chat_id, message, reply_markup=keyboard)
        set_state(chat_id, "awaiting_delivery_time")
        
    except Exception as e:
        logger.error(f"Error asking delivery time for {chat_id}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —á–∞—Å—É. üòî")

def handle_delivery_time(chat_id, delivery_time, callback_id=None):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —á–∞—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        cart = get_cart(chat_id)
        cart["delivery_time"] = delivery_time
        set_cart(chat_id, cart)
        
        if callback_id:
            from services.telegram import tg_answer_callback
            tg_answer_callback(callback_id, f"–ß–∞—Å –æ–±—Ä–∞–Ω–æ: {delivery_time} ‚úÖ")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        show_order_confirmation(chat_id)
        
    except Exception as e:
        logger.error(f"Error handling delivery time for {chat_id}: {e}")
        if callback_id:
            from services.telegram import tg_answer_callback
            tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —á–∞—Å—É", show_alert=True)

def show_order_confirmation(chat_id):
    """–ü–æ–∫–∞–∑—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        cart = get_cart(chat_id)
        items = cart.get("items", [])
        
        if not items:
            tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. üòî")
            return
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—É–º–∏
        subtotal = sum(float(item.get("price", 0)) * int(item.get("qty", 0)) for item in items)
        delivery_cost = float(cart.get("delivery_cost", 0))
        total = subtotal + delivery_cost
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        message = "üìã <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
        
        # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤
        message += "üõí <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
        for item in items:
            price = float(item.get("price", 0))
            qty = int(item.get("qty", 0))
            subtotal_item = price * qty
            message += f"‚Ä¢ {item.get('name')} √ó {qty} = {subtotal_item:.2f} –≥—Ä–Ω\n"
        
        message += f"\nüí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤:</b> {subtotal:.2f} –≥—Ä–Ω"
        
        if delivery_cost > 0:
            message += f"\nüöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_cost:.2f} –≥—Ä–Ω"
        
        message += f"\nüí≥ <b>–î–æ —Å–ø–ª–∞—Ç–∏:</b> {total:.2f} –≥—Ä–Ω"
        
        # –î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        message += f"\n\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {cart.get('phone', 'N/A')}"
        message += f"\nüè† <b>–ê–¥—Ä–µ—Å–∞:</b> {cart.get('address', 'N/A')}"
        message += f"\nüí∏ <b>–û–ø–ª–∞—Ç–∞:</b> {cart.get('payment_method', 'N/A')}"
        message += f"\n‚è∞ <b>–ß–∞—Å:</b> {cart.get('delivery_time', 'N/A')}"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "callback_data": "confirm_order"}],
                [{"text": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ", "callback_data": "edit_order"}],
                [{"text": "‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", "callback_data": "cancel_order"}]
            ]
        }
        
        tg_send_message(chat_id, message, reply_markup=keyboard)
        set_state(chat_id, "awaiting_confirmation")
        
    except Exception as e:
        logger.error(f"Error showing order confirmation for {chat_id}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. üòî")

def confirm_order(chat_id, callback_id):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        cart = get_cart(chat_id)
        items = cart.get("items", [])
        
        if not items:
            from services.telegram import tg_answer_callback
            tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True)
            return
        
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        subtotal = sum(float(item.get("price", 0)) * int(item.get("qty", 0)) for item in items)
        delivery_cost = float(cart.get("delivery_cost", 0))
        total = subtotal + delivery_cost
        
        order_data = {
            "chat_id": chat_id,
            "items": items,
            "total": subtotal,
            "delivery_cost": delivery_cost,
            "total_with_delivery": total,
            "phone": cart.get("phone"),
            "address": cart.get("address"),
            "coords": cart.get("coords"),
            "payment_method": cart.get("payment_method"),
            "delivery_type": cart.get("delivery_type"),
            "delivery_time": cart.get("delivery_time"),
            "notes": cart.get("notes", "")
        }
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Google Sheets
        order_id = save_order_to_sheets(order_data)
        
        if order_id:
            from services.telegram import tg_answer_callback
            tg_answer_callback(callback_id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ! ‚úÖ")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
            message = f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–µ!</b>\n\n"
            message += f"üí≥ <b>–°—É–º–∞:</b> {total:.2f} –≥—Ä–Ω\n"
            message += f"‚è∞ <b>–ß–∞—Å:</b> {cart.get('delivery_time')}\n\n"
            message += "üìû –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.\n\n"
            message += "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! üòä"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üçΩÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "callback_data": "show_menu"}],
                    [{"text": "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏", "callback_data": "contact_operator"}]
                ]
            }
            
            tg_send_message(chat_id, message, reply_markup=keyboard)
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            operator_message = f"üîî <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}</b>\n\n"
            operator_message += f"üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> {chat_id}\n"
            operator_message += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {cart.get('phone')}\n"
            operator_message += f"üè† <b>–ê–¥—Ä–µ—Å–∞:</b> {cart.get('address')}\n"
            operator_message += f"üí∞ <b>–°—É–º–∞:</b> {total:.2f} –≥—Ä–Ω\n"
            operator_message += f"üí∏ <b>–û–ø–ª–∞—Ç–∞:</b> {cart.get('payment_method')}\n"
            operator_message += f"‚è∞ <b>–ß–∞—Å:</b> {cart.get('delivery_time')}\n\n"
            
            # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            operator_message += "<b>–¢–æ–≤–∞—Ä–∏:</b>\n"
            for item in items:
                qty = int(item.get("qty", 0))
                operator_message += f"‚Ä¢ {item.get('name')} √ó {qty}\n"
            
            notify_operator(operator_message, chat_id)
            
            # –û—á–∏—â—É—î–º–æ –∫–æ—à–∏–∫ —Ç–∞ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
            clear_cart(chat_id)
            set_state(chat_id, "normal")
            
            logger.info(f"Order {order_id} confirmed for user {chat_id}")
            
        else:
            from services.telegram import tg_answer_callback
            tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)
            tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. üòî")
        
    except Exception as e:
        logger.error(f"Error confirming order for {chat_id}: {e}")
        from services.telegram import tg_answer_callback
        tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)

def cancel_order(chat_id, callback_id):
    """–°–∫–∞—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        from services.telegram import tg_answer_callback
        tg_answer_callback(callback_id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        
        message = "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n–í–∞—à –∫–æ—à–∏–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏! üòä"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "show_cart"}],
                [{"text": "üçΩÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", "callback_data": "show_menu"}]
            ]
        }
        
        tg_send_message(chat_id, message, reply_markup=keyboard)
        set_state(chat_id, "normal")
        
        logger.info(f"Order cancelled for user {chat_id}")
        
    except Exception as e:
        logger.error(f"Error cancelling order for {chat_id}: {e}")
        from services.telegram import tg_answer_callback
        tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è", show_alert=True)
