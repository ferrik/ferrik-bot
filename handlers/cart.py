import logging
from models.user import get_cart, set_cart
from services.sheets import get_item_by_id, get_min_delivery_amount
from services.telegram import tg_send_message, tg_send_photo, tg_answer_callback

logger = logging.getLogger("ferrik.cart")

def show_cart(chat_id):
    """–ü–æ–∫–∞–∑—É—î –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        cart = get_cart(chat_id)
        items = cart.get("items", [])
        
        if not items:
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üçΩÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", "callback_data": "show_menu"}]
                ]
            }
            tg_send_message(chat_id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n–î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —Å–º–∞—á–Ω–µ–Ω—å–∫–µ –∑ –Ω–∞—à–æ–≥–æ –º–µ–Ω—é! üòã", reply_markup=keyboard)
            return

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
        total = sum(float(item.get("price", 0)) * int(item.get("qty", 0)) for item in items)
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–æ—à–∏–∫–∞
        cart_text = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω—É –ø–æ–∑–∏—Ü—ñ—é
        inline_keyboard = []
        for idx, item in enumerate(items):
            item_price = float(item.get("price", 0))
            item_qty = int(item.get("qty", 0))
            item_subtotal = item_price * item_qty
            
            cart_text += f"<b>{item.get('name', 'N/A')}</b>\n"
            cart_text += f"üí∞ {item_price:.2f} –≥—Ä–Ω √ó {item_qty} = {item_subtotal:.2f} –≥—Ä–Ω\n\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
            inline_keyboard.append([
                {"text": "‚ûñ", "callback_data": f"qty_minus_{idx}"},
                {"text": f"{item_qty} —à—Ç", "callback_data": f"qty_info_{idx}"},
                {"text": "‚ûï", "callback_data": f"qty_plus_{idx}"},
                {"text": "üóëÔ∏è", "callback_data": f"remove_item_{idx}"}
            ])
        
        cart_text += f"üí≥ <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total:.2f} –≥—Ä–Ω</b>"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        min_amount = get_min_delivery_amount()
        
        if total >= min_amount:
            inline_keyboard.append([
                {"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "callback_data": "checkout"}
            ])
        else:
            needed = min_amount - total
            cart_text += f"\n\n‚ö†Ô∏è –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {min_amount:.2f} –≥—Ä–Ω"
            cart_text += f"\n–î–æ–¥–∞–π—Ç–µ —â–µ –Ω–∞ {needed:.2f} –≥—Ä–Ω"
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏
        inline_keyboard.extend([
            [{"text": "üçΩÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", "callback_data": "show_menu"}],
            [{"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "clear_cart"}]
        ])
        
        tg_send_message(chat_id, cart_text, reply_markup={"inline_keyboard": inline_keyboard})
        
    except Exception as e:
        logger.error(f"Error showing cart for {chat_id}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. üòî")

def add_item_to_cart(chat_id, item_id, quantity=1):
    """–î–æ–¥–∞—î —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä
        item_info = get_item_by_id(item_id)
        if not item_info:
            tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —Ü—é –ø–æ–∑–∏—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –º–µ–Ω—é. üòî")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–Ω–∏–π
        if not item_info.get("active", True):
            tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, —Ü—è –ø–æ–∑–∏—Ü—ñ—è –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. üòî")
            return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—à–∏–∫
        cart = get_cart(chat_id)
        cart_items = cart.get("items", [])
        
        # –®—É–∫–∞—î–º–æ —á–∏ –≤–∂–µ —î —Ç–∞–∫–∏–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—à–∏–∫—É
        item_found = False
        for cart_item in cart_items:
            if str(cart_item.get("id")) == str(item_id):
                # –¢–æ–≤–∞—Ä —É–∂–µ —î, –∑–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                cart_item["qty"] = cart_item.get("qty", 0) + quantity
                item_found = True
                current_qty = cart_item["qty"]
                break
        
        if not item_found:
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞
            new_item = {
                "id": item_info.get("ID"),
                "name": item_info.get("name"),  # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –Ω–∞–∑–≤—É –ø–æ–ª—è
                "price": float(item_info.get("price", 0)),
                "qty": quantity
            }
            cart_items.append(new_item)
            current_qty = quantity
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ—à–∏–∫
        cart["items"] = cart_items
        set_cart(chat_id, cart)
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        caption = f"‚úÖ <b>{item_info.get('name')}</b> –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!\n\n"
        caption += f"üí∞ –¶—ñ–Ω–∞: {item_info.get('price', 0):.2f} –≥—Ä–Ω\n"
        caption += f"üõí –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –∫–æ—à–∏–∫—É: {current_qty} —à—Ç"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "show_cart"},
                    {"text": "‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", "callback_data": f"add_item_{item_id}"}
                ],
                [{"text": "üçΩÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", "callback_data": "show_menu"}]
            ]
        }
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ –∞–±–æ –±–µ–∑
        photo_url = item_info.get("photo", "").strip()
        if photo_url:
            tg_send_photo(chat_id, photo_url, caption, reply_markup=keyboard)
        else:
            tg_send_message(chat_id, caption, reply_markup=keyboard)
        
        logger.info(f"Added item {item_id} to cart for user {chat_id}")
        return True
        
    except Exception as e:
        logger.error(f"Error adding item {item_id} to cart for {chat_id}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É –¥–æ –∫–æ—à–∏–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. üòî")
        return False

def handle_cart_quantity_change(chat_id, action, item_index, callback_id):
    """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫—É"""
    try:
        cart = get_cart(chat_id)
        items = cart.get("items", [])
        
        if not (0 <= item_index < len(items)):
            tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        item = items[item_index]
        current_qty = int(item.get("qty", 0))
        
        if action == "plus":
            new_qty = min(current_qty + 1, 99)  # –ú–∞–∫—Å–∏–º—É–º 99 —à—Ç—É–∫
        elif action == "minus":
            new_qty = max(current_qty - 1, 1)   # –ú—ñ–Ω—ñ–º—É–º 1 —à—Ç—É–∫–∞
        else:
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        items[item_index]["qty"] = new_qty
        cart["items"] = items
        set_cart(chat_id, cart)
        
        tg_answer_callback(callback_id, f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_qty} —à—Ç")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
        show_cart(chat_id)
        
    except Exception as e:
        logger.error(f"Error changing quantity for user {chat_id}: {e}")
        tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ", show_alert=True)

def remove_item_from_cart(chat_id, item_index, callback_id):
    """–í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä –∑ –∫–æ—à–∏–∫–∞"""
    try:
        cart = get_cart(chat_id)
        items = cart.get("items", [])
        
        if not (0 <= item_index < len(items)):
            tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –Ω–∞–∑–≤—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        item_name = items[item_index].get("name", "—Ç–æ–≤–∞—Ä")
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä
        items.pop(item_index)
        cart["items"] = items
        set_cart(chat_id, cart)
        
        tg_answer_callback(callback_id, f"'{item_name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
        show_cart(chat_id)
        
        logger.info(f"Removed item {item_index} from cart for user {chat_id}")
        
    except Exception as e:
        logger.error(f"Error removing item for user {chat_id}: {e}")
        tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É", show_alert=True)

def clear_cart(chat_id, callback_id=None):
    """–û—á–∏—â—É—î –≤–µ—Å—å –∫–æ—à–∏–∫"""
    try:
        from models.user import clear_cart as clear_user_cart
        
        if clear_user_cart(chat_id):
            message = "üóëÔ∏è –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!\n\n–ú–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—ñ –ø–æ–∫—É–ø–∫–∏ –∑ –º–µ–Ω—é."
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üçΩÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", "callback_data": "show_menu"}]
                ]
            }
            tg_send_message(chat_id, message, reply_markup=keyboard)
            
            if callback_id:
                tg_answer_callback(callback_id, "–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!")
                
            logger.info(f"Cart cleared for user {chat_id}")
        else:
            tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞.")
            
    except Exception as e:
        logger.error(f"Error clearing cart for user {chat_id}: {e}")
        if callback_id:
            tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞", show_alert=True)

def get_cart_total(chat_id):
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∫–æ—à–∏–∫–∞"""
    try:
        cart = get_cart(chat_id)
        items = cart.get("items", [])
        
        total = sum(float(item.get("price", 0)) * int(item.get("qty", 0)) for item in items)
        return total
        
    except Exception as e:
        logger.error(f"Error calculating cart total for {chat_id}: {e}")
        return 0.0

def get_cart_items_count(chat_id):
    """–ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π –≤ –∫–æ—à–∏–∫—É"""
    try:
        cart = get_cart(chat_id)
        items = cart.get("items", [])
        
        return sum(int(item.get("qty", 0)) for item in items)
        
    except Exception as e:
        logger.error(f"Error counting cart items for {chat_id}: {e}")
        return 0
