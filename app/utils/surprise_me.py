"""
üéÅ SURPRISE ME - AI-–ö–ï–†–û–í–ê–ù–ò–ô –°–Æ–†–ü–†–ò–ó –ó –ö–û–ú–ë–û –¢–ê –ó–ù–ò–ñ–ö–ê–ú–ò
"""

import random
from typing import List, Dict, Any
from app.utils.validators import calculate_total_price

class SurpriseMe:
    """AI-—Å—é—Ä–ø—Ä–∏–∑ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    
    DISCOUNT_RANGES = {
        'standard': (10, 15),    # 10-15%
        'vip': (15, 20),         # 15-20%
        'loyal': (20, 30),       # 20-30% –¥–ª—è 50+ –∑–∞–º–æ–≤–ª–µ–Ω—å
    }
    
    SURPRISE_MESSAGES = [
        "üéÅ –Ø –¥–ª—è —Ç–µ–±–µ —â–æ—Å—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –≤–∏–±—Ä–∞–≤! üòã",
        "üé≤ –ü–æ—á—É–≤–∞–π –º–æ—é –µ–Ω–µ—Ä–≥—ñ—é! –û—Å—å –º—ñ–π –≤–∏–±—ñ—Ä üîÆ",
        "‚ú® –≠—Ç–æ –º–æ–π personal pick –¥–ª—è —Ç–µ–±—è! üë®‚Äçüç≥",
        "üåü –í–∏—Ä—ñ—à–∏–≤ –∑–¥–∏–≤—É–≤–∞—Ç–∏ —Ç–µ–±–µ! üéâ",
        "üí´ –ú–æ—ó —É–ª—é–±–ª–µ–Ω—Ü—ñ –¥–ª—è —Ç–µ–±–µ! ü§©",
    ]
    
    COMBO_STRUCTURES = [
        # 2 –æ—Å–Ω–æ–≤–Ω—ñ + 1 –Ω–∞–ø–∏—Ç–æ–∫
        {'main': 2, 'drink': 1, 'desc': '–î—É–æ + –Ω–∞–ø—ñ–π'},
        # 1 –æ—Å–Ω–æ–≤–Ω–µ + 1 —Å–∞–ª–∞—Ç + 1 –¥–µ—Å–µ—Ä—Ç
        {'main': 1, 'salad': 1, 'dessert': 1, 'desc': '–ö–æ–º–±–æ –æ–±—ñ–¥'},
        # 3 –∑–∞–∫—É—Å–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó
        {'appetizer': 3, 'desc': '–î–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó'},
        # 1 –æ—Å–Ω–æ–≤–Ω–µ + 2 –Ω–∞–ø–∏—Ç–∫—ñ
        {'main': 1, 'drink': 2, 'desc': '–î–ª—è –≤–µ—á—ñ—Ä–∫–∏'},
    ]
    
    @staticmethod
    def generate_surprise(
        menu_items: List[Dict[str, Any]],
        user_order_count: int,
        user_favorites: List[str] = None
    ) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—é—Ä–ø—Ä–∏–∑—É
        
        Args:
            menu_items: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –º–µ–Ω—é
            user_order_count: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_favorites: –£–ª—é–±–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
        Returns:
            Dict –∑ —Å—é—Ä–ø—Ä–∏–∑–æ–º:
            {
                'items': [item1, item2, ...],
                'discount': 15,
                'total_original': 350.0,
                'total_discounted': 297.5,
                'saved': 52.5,
                'message': '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
                'combo_name': '–ù–∞–∑–≤–∞ –∫–æ–º–±–æ'
            }
        """
        
        if not menu_items or len(menu_items) < 3:
            return None
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å –∑–Ω–∏–∂–∫–∏
        if user_order_count >= 50:
            discount_range = SurpriseMe.DISCOUNT_RANGES['loyal']
        elif user_order_count >= 10:
            discount_range = SurpriseMe.DISCOUNT_RANGES['vip']
        else:
            discount_range = SurpriseMe.DISCOUNT_RANGES['standard']
        
        discount = random.randint(*discount_range)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î–º–æ —Ç–æ–≤–∞—Ä–∏
        categories = {
            'main': [],
            'salad': [],
            'dessert': [],
            'drink': [],
            'appetizer': [],
        }
        
        for item in menu_items:
            cat = item.get('category', '').lower()
            
            if any(x in cat for x in ['–ø—ñ—Ü–∞', '–±—É—Ä–≥–µ—Ä', 'main', '–æ—Å–Ω–æ–≤–Ω–µ']):
                categories['main'].append(item)
            elif any(x in cat for x in ['—Å–∞–ª–∞—Ç', 'salad']):
                categories['salad'].append(item)
            elif any(x in cat for x in ['–¥–µ—Å–µ—Ä—Ç', 'dessert', '—Ç–æ—Ä—Ç', '–∫–µ–π–∫']):
                categories['dessert'].append(item)
            elif any(x in cat for x in ['–Ω–∞–ø—ñ–π', 'drink', 'coffee', '—Å—ñ–∫']):
                categories['drink'].append(item)
            elif any(x in cat for x in ['–∑–∞–∫—É—Å–∫–∞', 'appetizer', 'starter']):
                categories['appetizer'].append(item)
        
        # –í–∏–±–∏—Ä–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–±–æ
        combo_structure = random.choice(SurpriseMe.COMBO_STRUCTURES)
        
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–º–±–æ
        surprise_items = []
        for category, count in combo_structure.items():
            if category != 'desc':
                if category in categories and len(categories[category]) > 0:
                    items = random.sample(
                        categories[category],
                        min(count, len(categories[category]))
                    )
                    surprise_items.extend(items)
        
        # –Ø–∫—â–æ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î - –¥–æ–¥–∞—î–º–æ –∑ —É—Å—ñ—Ö
        if len(surprise_items) < 2:
            remaining = random.sample(menu_items, min(2, len(menu_items)))
            surprise_items.extend(remaining)
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å
        total_original = calculate_total_price([{'price': item['price'], 'quantity': 1} for item in surprise_items])
        total_discounted = total_original * (1 - discount / 100)
        saved = total_original - total_discounted
        
        return {
            'items': surprise_items[:3],  # –ú–∞–∫—Å–∏–º—É–º 3 —Ç–æ–≤–∞—Ä–∏
            'discount': discount,
            'total_original': round(total_original, 2),
            'total_discounted': round(total_discounted, 2),
            'saved': round(saved, 2),
            'message': random.choice(SurpriseMe.SURPRISE_MESSAGES),
            'combo_name': combo_structure['desc']
        }
    
    @staticmethod
    def format_surprise_message(surprise: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—é—Ä–ø—Ä–∏–∑—É –≤ –∫—Ä–∞—Å–∏–≤—É mensaje"""
        
        items_text = "\n".join([
            f"üîπ {item['name']} ‚Äî {item['price']} –≥—Ä–Ω"
            for item in surprise['items']
        ])
        
        message = f"""üéÅ **–°–Æ–†–ü–†–ò–ó –í–Ü–î –§–ï–†–ò–ö–ê!** üéÅ

{surprise['message']}

**–ö–û–ú–ë–û:** {surprise['combo_name']}

{items_text}

üí∞ **–ó–≤–∏—á–∞–π–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:** {surprise['total_original']} –≥—Ä–Ω
üéØ **–ó—ñ –∑–Ω–∏–∂–∫–æ—é {surprise['discount']}%:** {surprise['total_discounted']} –≥—Ä–Ω
üíö **–í–∏ –∑–∞–æ—â–∞–¥–∏–ª–∏:** {surprise['saved']} –≥—Ä–Ω

‚ú® –¶–µ –∂ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–æ! üöÄ"""
        
        return message
    
    @staticmethod
    def apply_surprise_to_cart(surprise: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—é—Ä–ø—Ä–∏–∑—É –≤ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –∫–æ—à–∏–∫–∞"""
        items_for_cart = []
        
        for item in surprise['items']:
            items_for_cart.append({
                'id': item['id'],
                'name': item['name'],
                'price': item['price'],
                'quantity': 1,
                'category': item.get('category', ''),
                'from_surprise': True,
                'discount_applied': surprise['discount']
            })
        
        return items_for_cart


# ============================================================================
# –¢–ï–°–¢
# ============================================================================

if __name__ == "__main__":
    print("üéÅ Testing Surprise Me:\n")
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    menu = [
        {'id': '1', 'name': '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 'category': 'Pizza', 'price': 120},
        {'id': '2', 'name': '–ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ', 'category': 'Pizza', 'price': 150},
        {'id': '3', 'name': '–¶–µ–∑–∞—Ä', 'category': 'Salad', 'price': 80},
        {'id': '4', 'name': '–ß–æ—Ä–Ω–∞ –§–æ—Ä–µ—Å—Ç', 'category': 'Dessert', 'price': 90},
        {'id': '5', 'name': 'Cola', 'category': 'Drink', 'price': 30},
        {'id': '6', 'name': '–ö–∞—à–∞', 'category': 'Main', 'price': 95},
    ]
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Å—é—Ä–ø—Ä–∏–∑
    surprise = SurpriseMe.generate_surprise(menu, user_order_count=15)
    
    print("1Ô∏è‚É£ –°—é—Ä–ø—Ä–∏–∑ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (15 –∑–∞–º–æ–≤–ª–µ–Ω—å):")
    print(SurpriseMe.format_surprise_message(surprise))
    
    print("\n2Ô∏è‚É£ –¢–æ–≤–∞—Ä–∏ –¥–ª—è –∫–æ—à–∏–∫–∞:")
    cart_items = SurpriseMe.apply_surprise_to_cart(surprise)
    for item in cart_items:
        print(f"  - {item['name']} ({item['discount_applied']}% –∑–Ω–∏–∂–∫–∞)")
