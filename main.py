"""
üçï FERRIKBOT v2.1 - WORKING VERSION
–í—Å—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ async —Ç–∞ Application —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ
"""

import os
import logging
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler
import threading

# ============================================================================
# LOAD ENVIRONMENT
# ============================================================================

load_dotenv()

# ============================================================================
# LOGGING SETUP
# ============================================================================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

logger = logging.getLogger(__name__)

# ============================================================================
# FLASK APP INITIALIZATION
# ============================================================================

app = Flask(__name__)

# Telegram bot application (–≥–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞)
bot_application = None
initialization_lock = threading.Lock()

# ============================================================================
# CONFIGURATION
# ============================================================================

class Config:
    """–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É"""
    
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL", "http://localhost:5000")
    DEBUG = os.getenv("DEBUG", "False").lower() == "true"
    ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
    PORT = int(os.getenv("PORT", 5000))
    
    @staticmethod
    def validate():
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
        if not Config.TELEGRAM_BOT_TOKEN:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not set")
            return False
        return True


config = Config()

# ============================================================================
# TELEGRAM BOT CREATION (–ë–ï–ó PROCESS_UPDATE - –¢–Ü–õ–¨–ö–ò –û–ë–†–û–ë–ù–ò–ö–ò)
# ============================================================================

def create_bot_application():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Telegram bot application"""
    
    global bot_application
    
    logger.info("ü§ñ Creating Telegram bot application...")
    
    TOKEN = config.TELEGRAM_BOT_TOKEN
    
    if not TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN not found!")
        return None
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è application
        bot_application = Application.builder().token(TOKEN).build()
        
        # ‚úÖ –í–ê–ñ–õ–ò–í–û: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Application
        # –ë–µ–∑ —Ü—å–æ–≥–æ –ø—Ä–æ—Ü–µ—Å_update –≤–ø–∞–¥–µ –∑ –ø–æ–º–∏–ª–∫–æ—é
        import asyncio
        
        async def init_app():
            await bot_application.initialize()
        
        # –ó–∞–ø—É—Å—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(init_app())
        
        logger.info("‚úÖ Application initialized")
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
        setup_handlers(bot_application)
        
        logger.info("‚úÖ Bot application created successfully")
        return bot_application
    
    except Exception as e:
        logger.error(f"‚ùå Failed to create bot application: {e}", exc_info=True)
        return None


def setup_handlers(application):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
    
    logger.info("üìù Setting up handlers...")
    
    try:
        async def start_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /start"""
            logger.info(f"‚úÖ /start –≤—ñ–¥ {update.effective_user.id}")
            await update.message.reply_text(
                "üç¥ –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî Ferrik, —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑—ñ —Å–º–∞–∫—É ü§ñ‚ú®\n\n"
                "–ö–æ–º–∞–Ω–¥–∏:\n"
                "‚Ä¢ /menu ‚Äî –º–µ–Ω—é\n"
                "‚Ä¢ /help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞"
            )
        
        async def help_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /help"""
            await update.message.reply_text(
                "üìö –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:\n\n"
                "/menu ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é\n"
                "/start ‚Äî –ø–æ—á–Ω–µ–º–æ –∑–Ω–æ–≤—É"
            )
        
        async def menu_command(update: Update, context):
            """–ö–æ–º–∞–Ω–¥–∞ /menu"""
            await update.message.reply_text(
                "üìã –ú–µ–Ω—é:\n\n"
                "üçï –ü—ñ—Ü–∞ ‚Äî 180 –≥—Ä–Ω\n"
                "üçî –ë—É—Ä–≥–µ—Ä ‚Äî 150 –≥—Ä–Ω"
            )
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("menu", menu_command))
        
        logger.info("‚úÖ Handlers registered")
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Handler error: {e}", exc_info=True)
        return False


def startup():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ"""
    
    global bot_application
    
    logger.info("=" * 70)
    logger.info("üöÄ FERRIKBOT v2.1 STARTING...")
    logger.info("=" * 70)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É
    if not config.validate():
        logger.error("‚ùå Configuration validation failed")
        return False
    
    logger.info("‚úÖ Configuration valid")
    logger.info(f"   Token: {config.TELEGRAM_BOT_TOKEN[:20]}...")
    logger.info(f"   Webhook: {config.WEBHOOK_URL}")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
    if not create_bot_application():
        logger.error("‚ùå Failed to create bot")
        return False
    
    logger.info("‚úÖ BOT READY!")
    logger.info(f"   Port: {config.PORT}")
    logger.info(f"   Webhook: {config.WEBHOOK_URL}/webhook")
    logger.info("=" * 70)
    
    return True


# ============================================================================
# FLASK ROUTES
# ============================================================================

@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return jsonify({
        "status": "üü¢ online",
        "bot": "üçï FerrikBot v2.1",
        "bot_initialized": bot_application is not None,
        "environment": config.ENVIRONMENT
    })


@app.route('/health', methods=['GET'])
def health():
    """Health check"""
    is_healthy = bot_application is not None
    return jsonify({
        "status": "healthy" if is_healthy else "initializing",
        "bot_initialized": is_healthy,
    }), 200 if is_healthy else 503


# ============================================================================
# üî• WEBHOOK –ú–ê–†–®–†–£–¢–ò
# ============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û—Å–Ω–æ–≤–Ω–∏–π webhook"""
    logger.info("üì® /webhook –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ")
    return process_webhook(request)


@app.route('/webhook/webhook', methods=['POST'])
def webhook_double():
    """–†–µ–∑–µ—Ä–≤–Ω–∏–π webhook"""
    logger.warning("‚ö†Ô∏è /webhook/webhook –∑–∞–ø–∏—Ç (—Å—Ç–∞—Ä–∏–π –º–∞—Ä—à—Ä—É—Ç)")
    return process_webhook(request)


def process_webhook(req):
    """
    –û–±—Ä–æ–±–∫–∞ webhook –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ Telegram
    ‚úÖ –ë–ï–ó loop.close() - –¥–æ–∑–≤–æ–ª—è—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ —É–ø—Ä–∞–≤–ª—è—Ç–∏
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏ –±–æ—Ç
        if not bot_application:
            logger.error("‚ùå Bot not initialized")
            return jsonify({"ok": False}), 500
        
        # –û—Ç—Ä–∏–º–∞–π –¥–∞–Ω—ñ
        data = req.get_json()
        if not data:
            return jsonify({"ok": False}), 400
        
        logger.info(f"üì® Update ID: {data.get('update_id')}")
        
        # –†–æ–∑–ø–∞—Ä—Å Update
        update = Update.de_json(data, bot_application.bot)
        if not update:
            return jsonify({"ok": False}), 400
        
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê –û–ë–†–û–ë–ö–ê: async –±–µ–∑ loop.close()
        import asyncio
        
        async def process():
            """–û–±—Ä–æ–±–∫–∞ Update –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
            try:
                await bot_application.process_update(update)
                logger.info("‚úÖ Update processed")
            except Exception as e:
                logger.error(f"‚ùå Error processing update: {e}", exc_info=True)
        
        # –ù–ï –ó–ê–ö–†–ò–í–ê–ô LOOP - –¥–æ–∑–≤–æ–ª—å asyncio —É–ø—Ä–∞–≤–ª—è—Ç–∏
        try:
            # –ù–∞–º–∞–≥–∞–π—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ —ñ—Å–Ω—É—é—á–æ–º—É loop
            loop = asyncio.get_event_loop()
            if loop.is_closed():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–π —è–∫ .run_until_complete() - —Ü–µ –±–ª–æ–∫—É—î
            # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º–æ 200 —ñ –¥–æ–∑–≤–æ–ª–∏–º–æ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—è
            import threading
            threading.Thread(target=lambda: asyncio.run(process())).start()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            import threading
            threading.Thread(target=lambda: asyncio.run(process())).start()
        
        return jsonify({"ok": True}), 200
    
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        return jsonify({"ok": False}), 500


# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ü–ï–†–í–û–ú –ó–ê–ü–†–û–°–ï
# ============================================================================

initialized = False

@app.before_request
def initialize_on_first_request():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π –±–æ—Ç –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ"""
    global initialized
    
    if not initialized:
        with initialization_lock:
            if not initialized:  # Double-check
                logger.info("üîî First request - initializing bot...")
                startup()
                globals()['initialized'] = True


# ============================================================================
# ERROR HANDLERS
# ============================================================================

@app.errorhandler(404)
def not_found(error):
    return jsonify({
        "error": "Not found",
        "endpoints": ["/", "/health", "/webhook"]
    }), 404


@app.errorhandler(500)
def internal_error(error):
    logger.error(f"‚ùå 500 error: {error}")
    return jsonify({"error": "Internal server error"}), 500


# ============================================================================
# MAIN
# ============================================================================

if __name__ == '__main__':
    logger.info("üçï Starting Ferrik Bot...")
    app.run(
        host="0.0.0.0",
        port=config.PORT,
        debug=config.DEBUG,
        use_reloader=False
    )
