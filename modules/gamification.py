"""
üéÆ –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è Ferrik Bot
–ë–µ–π–¥–∂—ñ, —Ä—ñ–≤–Ω—ñ, —á–µ–ª–µ–Ω–¥–∂—ñ, –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
"""
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from enum import Enum
import json
import logging

logger = logging.getLogger(__name__)


class BadgeType(Enum):
    """–¢–∏–ø–∏ –±–µ–π–¥–∂—ñ–≤"""
    # –û–Ω–±–æ—Ä–¥–∏–Ω–≥
    EXPLORER = "explorer"
    FIRST_ORDER = "first_order"
    SHOPPER = "shopper"
    
    # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    REGULAR = "regular"  # 10 –∑–∞–º–æ–≤–ª–µ–Ω—å
    FOODIE = "foodie"  # 25 –∑–∞–º–æ–≤–ª–µ–Ω—å
    GOURMET = "gourmet"  # 50 –∑–∞–º–æ–≤–ª–µ–Ω—å
    LEGEND = "legend"  # 100 –∑–∞–º–æ–≤–ª–µ–Ω—å
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ
    PIZZA_LOVER = "pizza_lover"  # 10 –ø—ñ—Ü
    SWEET_TOOTH = "sweet_tooth"  # 10 –¥–µ—Å–µ—Ä—Ç—ñ–≤
    HEALTHY = "healthy"  # 10 —Å–∞–ª–∞—Ç—ñ–≤
    NIGHT_OWL = "night_owl"  # 5 –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—ñ—Å–ª—è 22:00
    EARLY_BIRD = "early_bird"  # 5 –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–æ 9:00
    
    # –°–æ—Ü—ñ–∞–ª—å–Ω—ñ
    REFERRER = "referrer"  # –ó–∞–ø—Ä–æ—Å–∏–≤ 3 –¥—Ä—É–∑—ñ–≤
    INFLUENCER = "influencer"  # –ó–∞–ø—Ä–æ—Å–∏–≤ 10 –¥—Ä—É–∑—ñ–≤
    
    # –†–µ–π—Ç–∏–Ω–≥
    REVIEWER = "reviewer"  # 5 –≤—ñ–¥–≥—É–∫—ñ–≤
    CRITIC = "critic"  # 20 –≤—ñ–¥–≥—É–∫—ñ–≤


class Badge:
    """–û–ø–∏—Å –±–µ–π–¥–∂—É"""
    
    BADGES = {
        BadgeType.EXPLORER: {
            'name': '–î–æ—Å–ª—ñ–¥–Ω–∏–∫ —Å–º–∞–∫—É',
            'emoji': 'üîç',
            'description': '–ü–µ—Ä–µ–≥–ª—è–Ω—É–≤ –º–µ–Ω—é –≤–ø–µ—Ä—à–µ',
            'points': 10
        },
        BadgeType.FIRST_ORDER: {
            'name': '–ü–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
            'emoji': 'üéâ',
            'description': '–ó—Ä–æ–±–∏–≤ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
            'points': 50
        },
        BadgeType.SHOPPER: {
            'name': '–ü–æ–∫—É–ø–µ—Ü—å',
            'emoji': 'üõí',
            'description': '–î–æ–¥–∞–≤ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫',
            'points': 20
        },
        BadgeType.REGULAR: {
            'name': '–ü–æ—Å—Ç—ñ–π–Ω–∏–π –∫–ª—ñ—î–Ω—Ç',
            'emoji': '‚≠ê',
            'description': '10 –∑–∞–º–æ–≤–ª–µ–Ω—å',
            'points': 100
        },
        BadgeType.FOODIE: {
            'name': '–§—É–¥—ñ',
            'emoji': 'üçΩÔ∏è',
            'description': '25 –∑–∞–º–æ–≤–ª–µ–Ω—å',
            'points': 250
        },
        BadgeType.GOURMET: {
            'name': '–ì—É—Ä–º–∞–Ω',
            'emoji': 'üë®‚Äçüç≥',
            'description': '50 –∑–∞–º–æ–≤–ª–µ–Ω—å',
            'points': 500
        },
        BadgeType.LEGEND: {
            'name': '–õ–µ–≥–µ–Ω–¥–∞',
            'emoji': 'üèÜ',
            'description': '100 –∑–∞–º–æ–≤–ª–µ–Ω—å',
            'points': 1000
        },
        BadgeType.PIZZA_LOVER: {
            'name': '–õ—é–±–∏—Ç–µ–ª—å –ø—ñ—Ü–∏',
            'emoji': 'üçï',
            'description': '–ó–∞–º–æ–≤–∏–≤ 10 –ø—ñ—Ü',
            'points': 150
        },
        BadgeType.SWEET_TOOTH: {
            'name': '–õ–∞—Å—É–Ω—á–∏–∫',
            'emoji': 'üç∞',
            'description': '–ó–∞–º–æ–≤–∏–≤ 10 –¥–µ—Å–µ—Ä—Ç—ñ–≤',
            'points': 150
        },
        BadgeType.HEALTHY: {
            'name': '–ó–¥–æ—Ä–æ–≤–∏–π —Å—Ç–∏–ª—å',
            'emoji': 'ü•ó',
            'description': '–ó–∞–º–æ–≤–∏–≤ 10 —Å–∞–ª–∞—Ç—ñ–≤',
            'points': 150
        },
        BadgeType.NIGHT_OWL: {
            'name': '–ù—ñ—á–Ω–∞ —Å–æ–≤–∞',
            'emoji': 'ü¶â',
            'description': '5 –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—ñ—Å–ª—è 22:00',
            'points': 75
        },
        BadgeType.EARLY_BIRD: {
            'name': '–†–∞–Ω–Ω—è –ø—Ç–∞—à–∫–∞',
            'emoji': 'üê¶',
            'description': '5 –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–æ 9:00',
            'points': 75
        },
        BadgeType.REFERRER: {
            'name': '–î—Ä—É–≥ –¥—Ä—É–∑—ñ–≤',
            'emoji': 'ü§ù',
            'description': '–ó–∞–ø—Ä–æ—Å–∏–≤ 3 –¥—Ä—É–∑—ñ–≤',
            'points': 200
        },
        BadgeType.INFLUENCER: {
            'name': '–Ü–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä',
            'emoji': 'üì±',
            'description': '–ó–∞–ø—Ä–æ—Å–∏–≤ 10 –¥—Ä—É–∑—ñ–≤',
            'points': 500
        },
        BadgeType.REVIEWER: {
            'name': '–†–µ—Ü–µ–Ω–∑–µ–Ω—Ç',
            'emoji': 'üìù',
            'description': '–ó–∞–ª–∏—à–∏–≤ 5 –≤—ñ–¥–≥—É–∫—ñ–≤',
            'points': 100
        },
        BadgeType.CRITIC: {
            'name': '–ö—Ä–∏—Ç–∏–∫',
            'emoji': 'üé≠',
            'description': '–ó–∞–ª–∏—à–∏–≤ 20 –≤—ñ–¥–≥—É–∫—ñ–≤',
            'points': 300
        }
    }
    
    @staticmethod
    def get_badge_info(badge_type: BadgeType) -> Dict:
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–µ–π–¥–∂"""
        return Badge.BADGES.get(badge_type, {})
    
    @staticmethod
    def format_badge(badge_type: BadgeType) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –±–µ–π–¥–∂ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        info = Badge.get_badge_info(badge_type)
        return f"{info['emoji']} **{info['name']}**"


class UserLevel:
    """–°–∏—Å—Ç–µ–º–∞ —Ä—ñ–≤–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    # –î–æ—Å–≤—ñ–¥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    LEVELS = {
        1: {'xp': 0, 'title': '–ù–æ–≤–∞—á–æ–∫', 'emoji': 'üå±'},
        2: {'xp': 100, 'title': '–ê–º–∞—Ç–æ—Ä', 'emoji': 'üåø'},
        3: {'xp': 300, 'title': '–õ—é–±–∏—Ç–µ–ª—å', 'emoji': 'üçÄ'},
        4: {'xp': 600, 'title': '–§—É–¥—ñ', 'emoji': 'üå≥'},
        5: {'xp': 1000, 'title': '–ï–Ω—Ç—É–∑—ñ–∞—Å—Ç', 'emoji': '‚≠ê'},
        6: {'xp': 1500, 'title': '–ï–∫—Å–ø–µ—Ä—Ç', 'emoji': 'üíé'},
        7: {'xp': 2200, 'title': '–ú–∞–π—Å—Ç–µ—Ä', 'emoji': 'üëë'},
        8: {'xp': 3000, 'title': '–ì—É—Ä–º–∞–Ω', 'emoji': 'üèÜ'},
        9: {'xp': 4000, 'title': '–ú–∞–≥—ñ—Å—Ç—Ä —Å–º–∞–∫—É', 'emoji': 'üåü'},
        10: {'xp': 5500, 'title': '–õ–µ–≥–µ–Ω–¥–∞', 'emoji': '‚ú®'}
    }
    
    @staticmethod
    def calculate_level(total_xp: int) -> Dict:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ä—ñ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ XP"""
        current_level = 1
        for level, data in sorted(UserLevel.LEVELS.items(), reverse=True):
            if total_xp >= data['xp']:
                current_level = level
                break
        
        level_data = UserLevel.LEVELS[current_level]
        next_level = current_level + 1
        
        if next_level in UserLevel.LEVELS:
            next_level_data = UserLevel.LEVELS[next_level]
            xp_to_next = next_level_data['xp'] - total_xp
            progress = (total_xp - level_data['xp']) / (next_level_data['xp'] - level_data['xp'])
        else:
            xp_to_next = 0
            progress = 1.0
        
        return {
            'level': current_level,
            'title': level_data['title'],
            'emoji': level_data['emoji'],
            'current_xp': total_xp,
            'xp_to_next': xp_to_next,
            'progress': progress
        }
    
    @staticmethod
    def format_level(level_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Ä—ñ–≤–µ–Ω—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        level = level_data['level']
        title = level_data['title']
        emoji = level_data['emoji']
        current_xp = level_data['current_xp']
        xp_to_next = level_data['xp_to_next']
        progress = level_data['progress']
        
        # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        bar_length = 10
        filled = int(progress * bar_length)
        bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
        
        result = f"{emoji} **–†—ñ–≤–µ–Ω—å {level}: {title}**\n"
        result += f"‚≠ê XP: {current_xp}\n"
        
        if xp_to_next > 0:
            result += f"üìä {bar} {int(progress * 100)}%\n"
            result += f"üéØ –î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è: {xp_to_next} XP\n"
        else:
            result += "üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—è–≥–Ω—É—Ç–æ!\n"
        
        return result


class Challenge:
    """–¢–∏–∂–Ω–µ–≤—ñ —á–µ–ª–µ–Ω–¥–∂—ñ"""
    
    CHALLENGES = [
        {
            'id': 'variety',
            'name': '–†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å',
            'description': '–ó–∞–º–æ–≤ —Å—Ç—Ä–∞–≤–∏ –∑ 3 —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π',
            'emoji': 'üé®',
            'reward_xp': 100,
            'reward_discount': 5,
            'duration_days': 7
        },
        {
            'id': 'breakfast_week',
            'name': '–¢–∏–∂–¥–µ–Ω—å —Å–Ω—ñ–¥–∞–Ω–∫—ñ–≤',
            'description': '–ó–∞–º–æ–≤ 3 —Å–Ω—ñ–¥–∞–Ω–∫–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å',
            'emoji': 'üç≥',
            'reward_xp': 120,
            'reward_discount': 10,
            'duration_days': 7
        },
        {
            'id': 'weekend_feast',
            'name': '–í–∏—Ö—ñ–¥–Ω–∏–π –ø—ñ—Ä',
            'description': '–ó—Ä–æ–±–∏ 2 –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –≤–∏—Ö—ñ–¥–Ω—ñ',
            'emoji': 'üéâ',
            'reward_xp': 80,
            'reward_discount': 7,
            'duration_days': 7
        },
        {
            'id': 'healthy_week',
            'name': '–ó–¥–æ—Ä–æ–≤–µ —Ç–∏–∂–¥–µ–Ω—å',
            'description': '–ó–∞–º–æ–≤ 3 —Å–∞–ª–∞—Ç–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å',
            'emoji': 'ü•ó',
            'reward_xp': 100,
            'reward_discount': 8,
            'duration_days': 7
        },
        {
            'id': 'early_bird',
            'name': '–†–∞–Ω–Ω—è –ø—Ç–∞—à–∫–∞',
            'description': '–ó–∞–º–æ–≤ –¥–æ 10:00 —Ç—Ä–∏ —Ä–∞–∑–∏',
            'emoji': 'üåÖ',
            'reward_xp': 90,
            'reward_discount': 5,
            'duration_days': 7
        }
    ]
    
    @staticmethod
    def get_weekly_challenge() -> Dict:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–Ω–µ–≤–∏–π —á–µ–ª–µ–Ω–¥–∂"""
        import random
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ –≤–∏–±–∏—Ä–∞—î—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–∂–Ω—è —Ä–æ–∫—É
        return random.choice(Challenge.CHALLENGES)
    
    @staticmethod
    def format_challenge(challenge: Dict, progress: int = 0, goal: int = 3) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —á–µ–ª–µ–Ω–¥–∂ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        name = challenge['name']
        description = challenge['description']
        emoji = challenge['emoji']
        reward_xp = challenge['reward_xp']
        reward_discount = challenge['reward_discount']
        
        # –ü—Ä–æ–≥—Ä–µ—Å
        percentage = min(100, int(progress / goal * 100))
        bar_length = 10
        filled = int(percentage / 10)
        bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
        
        result = f"{emoji} **{name}**\n"
        result += f"_{description}_\n\n"
        result += f"üìä –ü—Ä–æ–≥—Ä–µ—Å: {bar} {progress}/{goal}\n"
        result += f"üéÅ –í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞: {reward_xp} XP + {reward_discount}% –∑–Ω–∏–∂–∫–∞\n"
        
        if progress >= goal:
            result += "\n‚úÖ **–ß–µ–ª–µ–Ω–¥–∂ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**"
        
        return result


class GamificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    
    @staticmethod
    def award_badge(user_id: int, badge_type: BadgeType) -> Dict:
        """–í–∏–¥–∞—î –±–µ–π–¥–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        badge_info = Badge.get_badge_info(badge_type)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        logger.info(f"Awarding badge {badge_type.value} to user {user_id}")
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
        return {
            'user_id': user_id,
            'badge_type': badge_type.value,
            'awarded_at': datetime.now().isoformat(),
            'xp_bonus': badge_info.get('points', 0)
        }
    
    @staticmethod
    def check_badge_eligibility(user_stats: Dict) -> List[BadgeType]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —è–∫—ñ –±–µ–π–¥–∂—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –æ—Ç—Ä–∏–º–∞—Ç–∏"""
        earned_badges = []
        
        total_orders = user_stats.get('total_orders', 0)
        pizza_orders = user_stats.get('pizza_orders', 0)
        dessert_orders = user_stats.get('dessert_orders', 0)
        salad_orders = user_stats.get('salad_orders', 0)
        night_orders = user_stats.get('night_orders', 0)
        morning_orders = user_stats.get('morning_orders', 0)
        referrals = user_stats.get('referrals', 0)
        reviews = user_stats.get('reviews', 0)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if total_orders >= 10:
            earned_badges.append(BadgeType.REGULAR)
        if total_orders >= 25:
            earned_badges.append(BadgeType.FOODIE)
        if total_orders >= 50:
            earned_badges.append(BadgeType.GOURMET)
        if total_orders >= 100:
            earned_badges.append(BadgeType.LEGEND)
        
        if pizza_orders >= 10:
            earned_badges.append(BadgeType.PIZZA_LOVER)
        if dessert_orders >= 10:
            earned_badges.append(BadgeType.SWEET_TOOTH)
        if salad_orders >= 10:
            earned_badges.append(BadgeType.HEALTHY)
        
        if night_orders >= 5:
            earned_badges.append(BadgeType.NIGHT_OWL)
        if morning_orders >= 5:
            earned_badges.append(BadgeType.EARLY_BIRD)
        
        if referrals >= 3:
            earned_badges.append(BadgeType.REFERRER)
        if referrals >= 10:
            earned_badges.append(BadgeType.INFLUENCER)
        
        if reviews >= 5:
            earned_badges.append(BadgeType.REVIEWER)
        if reviews >= 20:
            earned_badges.append(BadgeType.CRITIC)
        
        return earned_badges
    
    @staticmethod
    def format_profile(user_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º–∏"""
        name = user_data.get('name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
        total_xp = user_data.get('total_xp', 0)
        badges = user_data.get('badges', [])
        total_orders = user_data.get('total_orders', 0)
        total_spent = user_data.get('total_spent', 0)
        
        # –†—ñ–≤–µ–Ω—å
        level_data = UserLevel.calculate_level(total_xp)
        
        result = f"üë§ **–ü—Ä–æ—Ñ—ñ–ª—å: {name}**\n\n"
        result += UserLevel.format_level(level_data)
        result += "\n"
        
        result += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        result += f"üõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω—å: {total_orders}\n"
        result += f"üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} –≥—Ä–Ω\n"
        result += f"üèÜ –ë–µ–π–¥–∂—ñ–≤: {len(badges)}\n\n"
        
        if badges:
            result += "üèÖ **–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:**\n"
            for badge_type_str in badges[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                try:
                    badge_type = BadgeType(badge_type_str)
                    result += Badge.format_badge(badge_type) + "\n"
                except:
                    continue
            
            if len(badges) > 5:
                result += f"\n_...—Ç–∞ —â–µ {len(badges) - 5} –±–µ–π–¥–∂—ñ–≤_\n"
        
        return result


# ============================================================================
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
# ============================================================================
if __name__ == "__main__":
    print("=== –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó ===\n")
    
    # –¢–µ—Å—Ç —Ä—ñ–≤–Ω—ñ–≤
    for xp in [0, 150, 500, 1200, 3500]:
        print(f"\n--- XP: {xp} ---")
        level_data = UserLevel.calculate_level(xp)
        print(UserLevel.format_level(level_data))
    
    # –¢–µ—Å—Ç —á–µ–ª–µ–Ω–¥–∂—É
    print("\n\n=== –¢–∏–∂–Ω–µ–≤–∏–π —á–µ–ª–µ–Ω–¥–∂ ===")
    challenge = Challenge.get_weekly_challenge()
    print(Challenge.format_challenge(challenge, progress=2, goal=3))
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Ñ—ñ–ª—é
    print("\n\n=== –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===")
    user_data = {
        'name': '–û–ª–µ–∫—Å–∞–Ω–¥—Ä',
        'total_xp': 1250,
        'badges': ['first_order', 'regular', 'pizza_lover'],
        'total_orders': 15,
        'total_spent': 4500
    }
    print(GamificationManager.format_profile(user_data))
