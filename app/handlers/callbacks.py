"""
üîò –û–ë–†–û–ë–ù–ò–ö–ò CALLBACK QUERIES - –ó SURPRISE ME
–°–∫–æ–ø—ñ—é–π—Ç–µ –≤–µ—Å—å —Ñ–∞–π–ª!
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from app.utils.session import (
    get_user_session,
    get_user_stats,
    update_user_session,
    get_user_cart,
    add_to_cart,
    clear_user_cart,
)
from app.utils.surprise_me import SurpriseMe
from app.utils.warm_greetings import WarmGreetings

logger = logging.getLogger(__name__)

# ============================================================================
# üéÅ SURPRISE ME - –ì–û–õ–û–í–ù–ò–ô CALLBACK
# ============================================================================

async def surprise_me_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Callback: surprise_me
    –ì–µ–Ω–µ—Ä—É—î AI –∫–æ–º–±–æ –∑—ñ –∑–Ω–∏–∂–∫–æ—é —Ç–∞ –¥–æ–¥–∞—î –≤ –∫–æ—à–∏–∫
    """
    query = update.callback_query
    user = query.from_user
    
    logger.info(f"üéÅ User {user.id} clicked Surprise Me")
    
    try:
        # 1Ô∏è‚É£ –û–¢–†–ò–ú–£–Ñ–ú–û –ú–ï–ù–Æ (–∑–∞–≥–ª—É—à–∫–∞ - —É —Ä–µ–∞–ª—é –∑ Google Sheets)
        menu_items = [
            {'id': '1', 'name': '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 'category': 'Pizza', 'price': 120},
            {'id': '2', 'name': '–ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ', 'category': 'Pizza', 'price': 150},
            {'id': '3', 'name': '–¶–µ–∑–∞—Ä —Å–∞–ª–∞—Ç', 'category': 'Salad', 'price': 80},
            {'id': '4', 'name': '–ß–æ—Ä–Ω–∞ –§–æ—Ä–µ—Å—Ç', 'category': 'Dessert', 'price': 90},
            {'id': '5', 'name': 'Cola 0.5–ª', 'category': 'Drink', 'price': 30},
            {'id': '6', 'name': '–§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è —Ä–æ–ª', 'category': 'Sushi', 'price': 180},
        ]
        
        if not menu_items or len(menu_items) < 2:
            await query.answer("‚ùå –ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ!", show_alert=True)
            return
        
        # 2Ô∏è‚É£ –ì–ï–ù–ï–†–£–Ñ–ú–û –°–Æ–†–ü–†–ò–ó
        stats = get_user_stats(user.id)
        surprise = SurpriseMe.generate_surprise(
            menu_items,
            user_order_count=stats['order_count'],
            user_favorites=[]
        )
        
        if not surprise:
            await query.answer("‚ùå –ù–µ –º–æ–∂—É –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—é—Ä–ø—Ä–∏–∑!", show_alert=True)
            return
        
        # 3Ô∏è‚É£ –§–û–†–ú–ê–¢–£–Ñ–ú–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
        message = SurpriseMe.format_surprise_message(surprise)
        
        # 4Ô∏è‚É£ –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û –í –°–ï–°–Ü–Æ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø—Ä–∏–π–Ω—è—Ç—Ç—è)
        surprise_items = SurpriseMe.apply_surprise_to_cart(surprise)
        update_user_session(user.id, {
            'current_surprise': surprise,
            'surprise_items': surprise_items,
        })
        
        logger.info(f"‚úÖ Surprise generated: {len(surprise['items'])} items, {surprise['discount']}% discount")
        
        # 5Ô∏è‚É£ –ö–ù–û–ü–ö–ò
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ë–µ—Ä—É —Å—é—Ä–ø—Ä–∏–∑!", callback_data="accept_surprise")],
            [InlineKeyboardButton("‚ùå –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ", callback_data="surprise_me")],
            [InlineKeyboardButton("üìã –î–æ –º–µ–Ω—é", callback_data="show_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # 6Ô∏è‚É£ –†–ï–î–ê–ì–£–Ñ–ú–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        await query.answer()  # –ó–∞–∫—Ä–∏—Ç–∏ loading
        
    except Exception as e:
        logger.error(f"‚ùå Error in surprise_me: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ", show_alert=True)


# ============================================================================
# ‚úÖ ACCEPT SURPRISE - –î–û–î–ê–¢–ò –í –ö–û–®–ò–ö
# ============================================================================

async def accept_surprise_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Callback: accept_surprise
    –î–æ–¥–∞—î —Å—é—Ä–ø—Ä–∏–∑ –≤ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    query = update.callback_query
    user = query.from_user
    
    logger.info(f"‚úÖ User {user.id} accepted surprise")
    
    try:
        # 1Ô∏è‚É£ –û–¢–†–ò–ú–£–Ñ–ú–û –°–Æ–†–ü–†–ò–ó –ó –°–ï–°–Ü–á
        session = get_user_session(user.id)
        surprise_items = session.get('surprise_items', [])
        current_surprise = session.get('current_surprise', {})
        
        if not surprise_items:
            await query.answer("‚ùå –°—é—Ä–ø—Ä–∏–∑ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        # 2Ô∏è‚É£ –î–û–î–ê–Ñ–ú–û –ö–û–ñ–ï–ù –¢–û–í–ê–† –£ –ö–û–®–ò–ö
        for item in surprise_items:
            add_to_cart(user.id, item)
        
        logger.info(f"‚úÖ Added {len(surprise_items)} items to cart")
        
        # 3Ô∏è‚É£ –§–û–†–ú–£–Ñ–ú–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
        discount = current_surprise.get('discount', 0)
        total = current_surprise.get('total_discounted', 0)
        
        message = f"""üéâ **–°–Æ–†–ü–†–ò–ó –ê–ö–¢–ò–í–Ü–†–û–í–ê–ù!** üéâ

‚úÖ –î–æ–¥–∞–Ω–æ {len(surprise_items)} —Ç–æ–≤–∞—Ä–∏ –¥–æ –∫–æ—à–∏–∫–∞!
üíö –ó–Ω–∏–∂–∫–∞ {discount}% –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞!

üí∞ **–°—É–º–∞:** {current_surprise.get('total_original', 0)} –≥—Ä–Ω
üéØ **–ó—ñ –∑–Ω–∏–∂–∫–æ—é:** {total:.0f} –≥—Ä–Ω

–ì–æ—Ç–æ–≤–∏–π –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? üöÄ"""
        
        # 4Ô∏è‚É£ –ö–ù–û–ü–ö–ò
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏!", callback_data="checkout")],
            [InlineKeyboardButton("üìã –©–µ —â–æ—Å—å –¥–æ–¥–∞—Ç–∏", callback_data="show_menu")],
            [InlineKeyboardButton("üõí –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—à–∏–∫–∞", callback_data="show_cart")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # 5Ô∏è‚É£ –†–ï–î–ê–ì–£–Ñ–ú–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        await query.answer("üéâ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—à–∏–∫!", show_alert=False)
        
    except Exception as e:
        logger.error(f"‚ùå Error accepting surprise: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ!", show_alert=True)


# ============================================================================
# üìã SHOW MENU - –ü–û–ö–ê–ó–ê–¢–ò –ú–ï–ù–Æ
# ============================================================================

async def show_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback: show_menu - –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é"""
    query = update.callback_query
    user = query.from_user
    
    logger.info(f"üìã User {user.id} opened menu")
    
    menu_text = """üìã **–ú–ï–ù–Æ**

**üçï –ü–Ü–¶–Ü:**
üîπ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ ‚Äî 120 –≥—Ä–Ω ‚≠ê‚≠ê‚≠ê‚≠ê
üîπ –ü–µ–ø–µ—Ä–æ–Ω—ñ ‚Äî 150 –≥—Ä–Ω ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
üîπ –ß–æ—Ç–∏—Ä–∏ —Å–∏—Ä–∏ ‚Äî 180 –≥—Ä–Ω ‚≠ê‚≠ê‚≠ê‚≠ê

**ü•ó –°–ê–õ–ê–¢–ò:**
üîπ –¶–µ–∑–∞—Ä ‚Äî 80 –≥—Ä–Ω ‚≠ê‚≠ê‚≠ê‚≠ê
üîπ –ì—Ä–µ—Ü—å–∫–∏–π ‚Äî 90 –≥—Ä–Ω ‚≠ê‚≠ê‚≠ê‚≠ê

**üç£ –°–£–®–Ü:**
üîπ –§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è ‚Äî 180 –≥—Ä–Ω ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
üîπ –ö–∞–ª—ñ—Ñ–æ—Ä–Ω—ñ—è ‚Äî 160 –≥—Ä–Ω ‚≠ê‚≠ê‚≠ê‚≠ê

**ü•§ –ù–ê–ü–û–á:**
üîπ Cola, Sprite, Fanta ‚Äî 30 –≥—Ä–Ω
üîπ –°—ñ–∫ ‚Äî 40 –≥—Ä–Ω

üí¨ –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É —â–æ–± –¥–æ–¥–∞—Ç–∏ —É –∫–æ—à–∏–∫!"""
    
    keyboard = [
        [InlineKeyboardButton("üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data="show_cart")],
        [InlineKeyboardButton("üéÅ –°—é—Ä–ø—Ä–∏–∑", callback_data="surprise_me")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        menu_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    await query.answer()


# ============================================================================
# üõí SHOW CART - –ü–û–ö–ê–ó–ò–¢–ò –ö–û–®–ò–ö
# ============================================================================

async def show_cart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback: show_cart - –ø–æ–∫–∞–∑—É—î –∫–æ—à–∏–∫"""
    query = update.callback_query
    user = query.from_user
    
    logger.info(f"üõí User {user.id} opened cart")
    
    cart = get_user_cart(user.id)
    
    if not cart or len(cart) == 0:
        keyboard = [[InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üõí **–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!** üòî\n\n"
            "–î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —Å–º–∞—á–Ω–µ! üçï",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        await query.answer()
        return
    
    # –§–æ—Ä–º—É—î–º–æ –∫–æ—à–∏–∫
    cart_text = "üõí **–í–∞—à –∫–æ—à–∏–∫:**\n\n"
    total = 0
    
    for idx, item in enumerate(cart, 1):
        name = item.get('name', 'Unknown')
        price = item.get('price', 0)
        qty = item.get('quantity', 1)
        subtotal = price * qty
        total += subtotal
        
        cart_text += f"{idx}. {name}\n"
        cart_text += f"   {qty} √ó {price} –≥—Ä–Ω = **{subtotal} –≥—Ä–Ω**\n\n"
    
    cart_text += f"\nüí∞ **–í—Å—å–æ–≥–æ: {total} –≥—Ä–Ω**"
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode")],
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏", callback_data="checkout")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear_cart")],
        [InlineKeyboardButton("üìã –©–µ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="show_menu")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        cart_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    await query.answer()


# ============================================================================
# üë§ SHOW PROFILE - –ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# ============================================================================

async def show_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback: show_profile - –ø–æ–∫–∞–∑—É—î –ø—Ä–æ—Ñ—ñ–ª—å"""
    query = update.callback_query
    user = query.from_user
    
    logger.info(f"üë§ User {user.id} opened profile")
    
    stats = get_user_stats(user.id)
    badge = stats['badge']
    
    profile_text = f"""**üë§ –¢–ï –ü–†–û–§–Ü–õ–¨**

**–°—Ç–∞—Ç—É—Å:** {badge['emoji']} {badge['name']}

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: **{stats['order_count']}** üçï
‚Ä¢ –ë–æ–Ω—É—Å–∏: **{stats['bonus_points']}** ‚≠ê
‚Ä¢ –î–æ–ø–æ–º–æ–≥–∞: /help

‚ú® –°–ø–∞—Å–∏–±—ñ —â–æ –∑ –Ω–∞–º–∏! üíö"""
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        profile_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    await query.answer()


# ============================================================================
# üéØ SHOW CHALLENGE - –ß–ï–õ–õ–ï–ù–î–ñ
# ============================================================================

async def show_challenge_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback: show_challenge - –ø–æ–∫–∞–∑—É—î —á–µ–ª–ª–µ–Ω–¥–∂"""
    query = update.callback_query
    user = query.from_user
    
    logger.info(f"üéØ User {user.id} opened challenge")
    
    challenge_text = """**üéØ –ß–ï–õ–õ–ï–ù–î–ñ –¢–ò–ñ–ù–Ø**

üåÖ **–°–ù–Ü–î–ê–ù–û–ö –ß–ï–ú–ü–Ü–û–ù–ê**
–ó–∞–º–æ–≤—Ç–µ 3 —Ä—ñ–∑–Ω—ñ —Å–Ω—ñ–¥–∞–Ω–∫–∏!

üìä –ü—Ä–æ–≥—Ä–µ—Å: 0/3
[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]

üèÜ –ù–∞–≥—Ä–∞–¥–∞: 150 –±–æ–Ω—É—Å—ñ–≤! ‚≠ê

üí™ –î–∞–π, —Ç–∏ —Å–ø—Ä–∞–≤–∏—à! üî•"""
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        challenge_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    await query.answer()


# ============================================================================
# ‚¨ÖÔ∏è BACK TO MENU - –ù–ê–ó–ê–î
# ============================================================================

async def back_to_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback: back_to_menu - –Ω–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    user = query.from_user
    
    logger.info(f"‚¨ÖÔ∏è User {user.id} went back to menu")
    
    stats = get_user_stats(user.id)
    greeting = WarmGreetings.get_greeting_by_order_count(stats['order_count'])
    
    keyboard = [
        [
            InlineKeyboardButton("üéÅ –°—é—Ä–ø—Ä–∏–∑!", callback_data="surprise_me"),
            InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu"),
        ],
        [
            InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart"),
            InlineKeyboardButton("‚≠ê –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
        ],
        [
            InlineKeyboardButton("üéØ –ß–µ–ª–ª–µ–Ω–¥–∂", callback_data="show_challenge"),
            InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="show_help"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        greeting,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    await query.answer()


# ============================================================================
# ‚ÑπÔ∏è SHOW HELP - –î–û–ü–û–ú–û–ì–ê
# ============================================================================

async def show_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback: show_help - –¥–æ–ø–æ–º–æ–≥–∞"""
    query = update.callback_query
    
    help_text = """‚ùì **–î–û–ü–û–ú–û–ì–ê**

**–ö–æ–º–∞–Ω–¥–∏:**
/start ‚Äî –ü–æ—á–∞—Ç–∏
/menu ‚Äî –ú–µ–Ω—é
/cart ‚Äî –ö–æ—à–∏–∫
/order ‚Äî –ó–∞–º–æ–≤–∏—Ç–∏
/help ‚Äî –î–æ–ø–æ–º–æ–≥–∞

**–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:**
1Ô∏è‚É£ –í–∏–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –º–µ–Ω—é
2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω–∏ [‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏]
3Ô∏è‚É£ –í–≤–µ–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ –∞–¥—Ä–µ—Å—É

**–ü–∏—Ç–∞–Ω–Ω—è?**
üìû –ù–∞–ø–∏—à–∏ –Ω–∞–º!"""
    
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        help_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    await query.answer()


# ============================================================================
# üóëÔ∏è CLEAR CART - –û–ß–ò–°–¢–ò–¢–ò –ö–û–®–ò–ö
# ============================================================================

async def clear_cart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback: clear_cart - –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫"""
    query = update.callback_query
    user = query.from_user
    
    logger.info(f"üóëÔ∏è User {user.id} cleared cart")
    
    clear_user_cart(user.id)
    
    await query.answer("üóëÔ∏è –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!", show_alert=False)
    
    keyboard = [
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üõí **–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!** üóëÔ∏è\n\n"
        "–ü–æ—á–Ω–∏ –∑–∞–Ω–æ–≤–æ! üçï",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# üîò –ì–û–õ–û–í–ù–ò–ô CALLBACK ROUTER
# ============================================================================

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–û–õ–û–í–ù–ò–ô ROUTER –¥–ª—è –≤—Å—ñ—Ö callback queries
    –†–æ–∑–ø—ñ–∑–Ω–∞—î callback_data —ñ –≤–∏–∫–ª–∏–∫–∞—î –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    """
    query = update.callback_query
    callback_data = query.data
    
    logger.info(f"üîò Callback: {callback_data}")
    
    try:
        # –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–Ü–Ø
        if callback_data == "surprise_me":
            await surprise_me_callback(update, context)
        
        elif callback_data == "accept_surprise":
            await accept_surprise_callback(update, context)
        
        elif callback_data == "show_menu":
            await show_menu_callback(update, context)
        
        elif callback_data == "show_cart":
            await show_cart_callback(update, context)
        
        elif callback_data == "show_profile":
            await show_profile_callback(update, context)
        
        elif callback_data == "show_challenge":
            await show_challenge_callback(update, context)
        
        elif callback_data == "show_help":
            await show_help_callback(update, context)
        
        elif callback_data == "back_to_menu":
            await back_to_menu_callback(update, context)
        
        elif callback_data == "clear_cart":
            await clear_cart_callback(update, context)
        
        # –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö
        else:
            logger.warning(f"‚ö†Ô∏è Unknown callback: {callback_data}")
            await query.answer(f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {callback_data}", show_alert=True)
    
    except Exception as e:
        logger.error(f"‚ùå Error in callback: {e}")
        await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞! –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ", show_alert=True)


# ============================================================================
# –î–û–ü–û–ú–Ü–ñ–ù–ê –§–£–ù–ö–¶–Ü–Ø
# ============================================================================

def register_callback_handlers(application):
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è callback handler
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤ main.py:
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    from app.handlers.callbacks import register_callback_handlers
    
    # –£ —Ñ—É–Ω–∫—Ü—ñ—ó setup_handlers():
    register_callback_handlers(app)
    """
    from telegram.ext import CallbackQueryHandler
    
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    
    logger.info("‚úÖ Callback handlers registered")
