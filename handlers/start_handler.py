"""
Updated start handler with personalization
Integrate this with your existing start_handler.py
"""
import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from storage.user_repository import UserRepository
from models.user_profile import UserProfile
from services.personalization_service import PersonalizationService
from utils.personalization_helpers import format_user_greeting_message

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """Start command with personalized greeting"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "User"
    
    try:
        # Initialize database (first run)
        UserRepository.init_db()
        
        # Get existing profile or create new
        profile = UserRepository.get_profile(user_id)
        
        if not profile:
            # New user
            logger.info(f"üë§ New user registered: {first_name} (ID: {user_id})")
            profile = UserProfile(
                user_id=user_id,
                name=first_name
            )
            UserRepository.save_profile(profile)
        else:
            # Returning user - update last seen
            logger.info(f"üìç User {first_name} returned (ID: {user_id})")
            UserRepository.update_last_seen(user_id)
        
        # ‚ú® PERSONALIZED GREETING
        greeting = format_user_greeting_message(profile)
        
        # Main menu keyboard
        keyboard = {
            'inline_keyboard': [
                [
                    {'text': 'üìã –ú–µ–Ω—é', 'callback_data': 'show_menu'},
                    {'text': 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å', 'callback_data': 'show_profile'}
                ],
                [
                    {'text': '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó', 'callback_data': 'show_recommendations'},
                    {'text': 'üõí –ö–æ—à–∏–∫', 'callback_data': 'show_cart'}
                ],
                [
                    {'text': '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞', 'callback_data': 'show_help'}
                ]
            ]
        }
        
        await message.answer(greeting, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏",
            parse_mode="HTML"
        )


@router.message(Command("profile"))
async def cmd_profile(message: types.Message):
    """Show user profile"""
    user_id = message.from_user.id
    
    try:
        profile = UserRepository.get_profile(user_id)
        
        if not profile:
            await message.answer("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞–ø–∏—à—ñ—Ç—å /start")
            return
        
        # Get order history
        order_history = UserRepository.get_user_order_history(user_id, limit=5)
        
        # Format profile
        from utils.personalization_helpers import (
            format_profile_message,
            create_profile_keyboard
        )
        
        profile_text = format_profile_message(profile, order_history)
        keyboard = create_profile_keyboard()
        
        await message.answer(profile_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing profile: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é")


@router.message(Command("recommendations"))
async def cmd_recommendations(message: types.Message):
    """Show personalized recommendations"""
    user_id = message.from_user.id
    
    try:
        profile = UserRepository.get_profile(user_id)
        
        if not profile:
            await message.answer("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞–ø–∏—à—ñ—Ç—å /start")
            return
        
        # Get menu (integrate with your menu_service)
        # This is a placeholder - adjust based on your menu_service.py
        from services.menu_service import MenuService
        all_items = MenuService.get_all_menu_items()
        
        # Get recommendations
        from services.personalization_service import PersonalizationService
        from utils.personalization_helpers import format_recommendations_message, create_recommendations_keyboard
        
        recommendations = PersonalizationService.get_recommendations(
            profile=profile,
            all_menu_items=all_items,
            limit=3
        )
        
        text = format_recommendations_message(recommendations)
        keyboard = create_recommendations_keyboard(recommendations)
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error showing recommendations: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")


@router.callback_query(lambda c: c.data == "show_profile")
async def callback_show_profile(query: types.CallbackQuery):
    """Callback for show profile button"""
    await cmd_profile(query.message)
    await query.answer()


@router.callback_query(lambda c: c.data == "show_recommendations")
async def callback_show_recommendations(query: types.CallbackQuery):
    """Callback for recommendations button"""
    await cmd_recommendations(query.message)
    await query.answer()


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    """Help command"""
    help_text = """
<b>‚ÑπÔ∏è –î–û–ü–û–ú–û–ì–ê</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/profile - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å
/recommendations - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
/help - –¶—è –¥–æ–ø–æ–º–æ–≥–∞

<b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:</b>
1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω–∏ <b>üìã –ú–µ–Ω—é</b> –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç—Ä–∞–≤
2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω–∏ <b>‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</b> –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Ä–∞–¥
3Ô∏è‚É£ –î–æ–¥–∞–≤–∞–π —Å—Ç—Ä–∞–≤–∏ –≤ <b>üõí –ö–æ—à–∏–∫</b>
4Ô∏è‚É£ –ü–µ—Ä–µ–≥–ª—è–¥–∏ —Å–≤—ñ–π <b>üë§ –ü—Ä–æ—Ñ—ñ–ª—å</b> —Ç–∞ <b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</b>

<b>–†—ñ–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>
üÜï <b>–ù–æ–≤–∞—á–æ–∫</b> - 0-2 –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
üçΩÔ∏è <b>–ì—É—Ä–º–∞–Ω</b> - 3-10 –∑–∞–º–æ–≤–ª–µ–Ω—å
üë®‚Äçüç≥ <b>–§—É–¥—ñ</b> - 11+ –∑–∞–º–æ–≤–ª–µ–Ω—å

<b>–ë–æ–Ω—É—Å-–±–∞–ª–∏:</b>
üí∞ –ó–∞ –∫–æ–∂–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: +1 –±–∞–ª –∑–∞ 100 –≥—Ä–Ω
üìà –ó–∞ —Ä—ñ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö: +50 –±–∞–ª—ñ–≤
üéÅ 100 –±–∞–ª—ñ–≤ = 50 –≥—Ä–Ω –∑–Ω–∏–∂–∫–∏

<b>–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?</b>
–ù–∞–ø–∏—à—ñ—Ç—å @ferrik_support –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏
"""
    
    await message.answer(help_text, parse_mode="HTML")