import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
logger.info("üöÄ Starting FerrikFootBot...")

try:
    from config import (
        BOT_TOKEN, 
        GEMINI_API_KEY, 
        SPREADSHEET_ID, 
        WEBHOOK_SECRET,
        validate_config,
        log_config
    )
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î ENABLE_GOOGLE_SHEETS
    try:
        from config import ENABLE_GOOGLE_SHEETS
    except ImportError:
        ENABLE_GOOGLE_SHEETS = bool(SPREADSHEET_ID)  # –Ø–∫—â–æ —î SPREADSHEET_ID, —Ç–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–æ
        logger.warning("‚ö†Ô∏è ENABLE_GOOGLE_SHEETS not in config, using automatic detection")
    
    logger.info("‚úÖ Config imported successfully")
except Exception as e:
    logger.error(f"‚ùå Config import error: {e}")
    # Fallback –∑–Ω–∞—á–µ–Ω–Ω—è
    BOT_TOKEN = None
    GEMINI_API_KEY = None
    SPREADSHEET_ID = None
    ENABLE_GOOGLE_SHEETS = False
    WEBHOOK_SECRET = "Ferrik123"

try:
    from services.sheets import init_gspread_client, get_menu_from_sheet, save_order_to_sheets, is_sheets_connected
    logger.info("‚úÖ Sheets service imported")
except Exception as e:
    logger.error(f"‚ùå Sheets import error: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏
    def init_gspread_client(): return None
    def get_menu_from_sheet(client): return {}
    def save_order_to_sheets(*args, **kwargs): return False
    def is_sheets_connected(): return False

try:
    from services.gemini import init_gemini_client, get_ai_response, is_gemini_connected
    logger.info("‚úÖ Gemini service imported")
except Exception as e:
    logger.error(f"‚ùå Gemini import error: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏
    def init_gemini_client(): return None
    def get_ai_response(*args, **kwargs): return "AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    def is_gemini_connected(): return False

try:
    from models.user import init_user_db
    logger.info("‚úÖ User model imported")
except Exception as e:
    logger.error(f"‚ùå User model import error: {e}")
    def init_user_db(): return False

try:
    from services.telegram import tg_send_message, tg_answer_callback, tg_set_webhook
    logger.info("‚úÖ Telegram service imported")
except Exception as e:
    logger.error(f"‚ùå Telegram service import error: {e}")
    # –ó–∞–≥–ª—É—à–∫–∞ –±—É–¥–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –Ω–∏–∂—á–µ

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
sheets_client = None
menu_cache = {}
user_db = False
gemini_client = None


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ (DB, Sheets, Gemini)"""
    global sheets_client, menu_cache, user_db, gemini_client

    logger.info("üõ†Ô∏è Initializing services...")
    
    # 1. –õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    try:
        log_config()
        validate_config()
    except Exception as e:
        logger.error(f"Config validation error: {e}")
    
    # 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    try:
        if init_user_db():
            user_db = True
            logger.info("‚úÖ User DB initialized.")
        else:
            logger.error("‚ùå User DB initialization failed.")
    except Exception as e:
        logger.exception(f"‚ùå User DB startup error: {e}")

    # 3. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
    if ENABLE_GOOGLE_SHEETS:
        try:
            sheets_client = init_gspread_client()
            if is_sheets_connected():
                logger.info("‚úÖ Google Sheets client initialized.")
                
                # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –≤–∏–∫–ª–∏–∫–∞—î–º–æ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
                menu_data = get_menu_from_sheet()
                menu_cache = menu_data if menu_data is not None else {}
                logger.info(f"‚úÖ Menu cached: {len(menu_cache)} items.")
            else:
                logger.warning("‚ö†Ô∏è Google Sheets client could not connect.")
        except TypeError as e:
            logger.error(f"‚ùå TypeError in get_menu_from_sheet: {e}")
            logger.info("üí° Check if get_menu_from_sheet accepts correct parameters")
        except Exception as e:
            logger.exception(f"‚ùå Critical startup error during Google Sheets initialization: {e}")
    else:
        logger.info("‚è≠Ô∏è Google Sheets disabled by config.")
        
    # 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Gemini AI
    try:
        gemini_client = init_gemini_client()
        if is_gemini_connected():
            logger.info("‚úÖ Gemini client initialized.")
        else:
            logger.warning("‚ö†Ô∏è Gemini client could not connect.")
    except Exception as e:
        logger.exception(f"‚ùå Gemini startup error: {e}")
    
    # 5. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
    try:
        from config import RENDER_URL
        result = tg_set_webhook(RENDER_URL)
        if result and result.get('ok'):
            logger.info("‚úÖ Webhook set successfully")
        else:
            logger.error(f"‚ùå Failed to set webhook: {result}")
    except Exception as e:
        logger.error(f"‚ùå Webhook setup error: {e}")


# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def send_message(chat_id, text, reply_markup=None):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API."""
    try:
        # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        return tg_send_message(chat_id, text, reply_markup)
    except NameError:
        # Fallback —è–∫—â–æ —ñ–º–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è
        import requests
        try:
            bot_token = BOT_TOKEN or os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
            if not bot_token:
                logger.error("BOT_TOKEN not found in send_message")
                return None
            
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            
            if reply_markup:
                payload["reply_markup"] = reply_markup  # requests.post —Å json= —Å–∞–º —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç
            
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"‚ùå Send message error: {e}")
            return None


def answer_callback(callback_id, text, show_alert=False):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ callback query"""
    try:
        return tg_answer_callback(callback_id, text, show_alert)
    except NameError:
        logger.warning("tg_answer_callback not available")
        return None


# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def handle_start(chat_id):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    welcome_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç!\n\n"
        "–Ø <b>FerrikFootBot</b> ‚Äì —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ.\n\n"
        "–û–±–µ—Ä–∏ –¥—ñ—é –≤ –º–µ–Ω—é:"
    )
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üìñ –ú–µ–Ω—é", "callback_data": "menu"}],
            [{"text": "üõí –ö–æ—Ä–∑–∏–Ω–∞", "callback_data": "cart"}, {"text": "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è", "callback_data": "recommend"}],
            [{"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", "callback_data": "contacts"}]
        ]
    }
    
    send_message(chat_id, welcome_text, reply_markup=keyboard)


def show_menu(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    if not menu_cache:
        send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    menu_text = "<b>üìñ –ù–∞—à–µ –ú–µ–Ω—é:</b>\n\n"
    
    items = list(menu_cache.values())[:10]  # –ü–µ—Ä—à—ñ 10 —Å—Ç—Ä–∞–≤
    for item in items:
        name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        price = item.get('price', '?')
        menu_text += f"üçï <b>{name}</b> - {price} –≥—Ä–Ω\n"
    
    if len(menu_cache) > 10:
        menu_text += f"\n... —Ç–∞ —â–µ {len(menu_cache) - 10} —Å—Ç—Ä–∞–≤!"
    
    send_message(chat_id, menu_text)


def show_contacts(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏"""
    contacts_text = """
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏</b>

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380XX XXX XX XX
üìß Email: info@ferrikfoot.com
üìç –ê–¥—Ä–µ—Å–∞: –º. –ö–∏—ó–≤, –≤—É–ª. –ü—Ä–∏–∫–ª–∞–¥–Ω–∞, 1

üïê –ü—Ä–∞—Ü—é—î–º–æ: –ü–Ω-–ù–¥ 9:00-22:00
"""
    send_message(chat_id, contacts_text)


def show_recommendations(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    if not is_gemini_connected():
        send_message(chat_id, "‚ùå AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return
    
    try:
        recommendation = get_ai_response("–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –ø–æ–ø—É–ª—è—Ä–Ω—É —Å—Ç—Ä–∞–≤—É –∑ –º–µ–Ω—é")
        send_message(chat_id, f"üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b>\n\n{recommendation}")
    except Exception as e:
        logger.error(f"Recommendation error: {e}")
        send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é.")


def process_callback_query(callback_query):
    """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    try:
        chat_id = callback_query["message"]["chat"]["id"]
        callback_id = callback_query["id"]
        data = callback_query["data"]
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback (–ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≥–æ–¥–∏–Ω–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
        answer_callback(callback_id, "–û–±—Ä–æ–±–ª—è—é...")
        
        if data == "menu":
            show_menu(chat_id)
        elif data == "cart":
            send_message(chat_id, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")
        elif data == "recommend":
            show_recommendations(chat_id)
        elif data == "contacts":
            show_contacts(chat_id)
        else:
            send_message(chat_id, f"–û–±—Ä–∞–Ω–æ: {data}")

    except Exception as e:
        logger.error(f"Callback error: {e}")


def process_message(message):
    """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        chat_id = message["chat"]["id"]
        text = message.get("text", "")
        
        if text == "/start":
            handle_start(chat_id)
        elif text == "/menu" or text.lower() in ["–º–µ–Ω—é", "–ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"]:
            show_menu(chat_id)
        elif text == "/contacts" or text.lower() in ["–∫–æ–Ω—Ç–∞–∫—Ç–∏", "–∞–¥—Ä–µ—Å–∞"]:
            show_contacts(chat_id)
        else:
            # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ AI-–æ–±—Ä–æ–±–∫—É —Ç–µ–∫—Å—Ç—É
            send_message(chat_id, f"–Ø –æ—Ç—Ä–∏–º–∞–≤: <b>{text}</b>\n\n–°–ø—Ä–æ–±—É–π—Ç–µ /start –∞–±–æ /menu")

    except Exception as e:
        logger.error(f"Message processing error: {e}")
        try:
            send_message(message["chat"]["id"], "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
        except:
            pass


# Flask routes
@app.route('/', methods=['GET'])
def index():
    """Health check endpoint"""
    return jsonify({
        'status': 'ok',
        'bot': 'FerrikFootBot',
        'timestamp': datetime.now().isoformat()
    })


@app.route('/<path:secret>', methods=['POST'])
def webhook(secret):
    """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –≤–µ–±—Ö—É–∫—ñ–≤ –≤—ñ–¥ Telegram"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ secret token —á–µ—Ä–µ–∑ URL path
    if secret != WEBHOOK_SECRET:
        logger.warning(f"Invalid webhook path: {secret}")
        return jsonify({'status': 'unauthorized'}), 401
    
    if request.method != 'POST':
        return jsonify({'status': 'method not allowed'}), 405
    
    try:
        update = request.get_json()
        if not update:
            logger.warning("Empty update received")
            return jsonify({'status': 'ok'})

        logger.info(f"Received update: {update.get('update_id', 'unknown')}")

        if 'message' in update:
            process_message(update['message'])
        elif 'callback_query' in update:
            process_callback_query(update['callback_query'])
        else:
            logger.warning(f"Unknown update type: {update.keys()}")
            
        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.exception(f"Webhook processing error: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500


# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404


@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {error}")
    return jsonify({"error": "Internal server error"}), 500


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
with app.app_context():
    init_services()


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logger.warning("‚ö†Ô∏è Running Flask in development mode (should use gunicorn in production)")
    app.run(host="0.0.0.0", port=port, debug=False)  # debug=False –¥–ª—è production