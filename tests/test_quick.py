"""
–®–≤–∏–¥–∫—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —â–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è

–ó–∞–ø—É—Å–∫: python tests/test_quick.py
"""
import sys
from decimal import Decimal

def test_imports():
    """–¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –≤—Å—ñ –º–æ–¥—É–ª—ñ —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è"""
    print("–¢–µ—Å—Ç 1: –Ü–º–ø–æ—Ä—Ç–∏...")
    
    try:
        from utils.html_formatter import escape_field, validate_telegram_html
        print("  ‚úÖ html_formatter —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except ImportError as e:
        print(f"  ‚ùå html_formatter: {e}")
        return False
    
    try:
        from utils.price_handler import parse_price, format_price
        print("  ‚úÖ price_handler —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except ImportError as e:
        print(f"  ‚ùå price_handler: {e}")
        return False
    
    try:
        from config import normalize_menu_item, MenuField
        print("  ‚úÖ field_mapping —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
    except ImportError as e:
        print(f"  ‚ùå field_mapping: {e}")
        return False
    
    return True


def test_xss_protection():
    """–¢–µ—Å—Ç 2: XSS –∑–∞—Ö–∏—Å—Ç"""
    print("\n–¢–µ—Å—Ç 2: XSS Protection...")
    
    from utils.html_formatter import escape_field, validate_telegram_html
    
    # –¢–µ—Å—Ç escape
    dangerous = '<script>alert("xss")</script>'
    escaped = escape_field(dangerous)
    
    if '<script>' in escaped:
        print(f"  ‚ùå XSS –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ: {escaped}")
        return False
    print(f"  ‚úÖ XSS –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ: {escaped[:50]}...")
    
    # –¢–µ—Å—Ç validation
    safe_html = "<b>Safe text</b>"
    dangerous_html = '<script>alert(1)</script>'
    
    if not validate_telegram_html(safe_html):
        print("  ‚ùå –ë–µ–∑–ø–µ—á–Ω–∏–π HTML –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
        return False
    
    if validate_telegram_html(dangerous_html):
        print("  ‚ùå –ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π HTML –ø—Ä–∏–π–Ω—è—Ç–æ")
        return False
    
    print("  ‚úÖ Validation –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    return True


def test_decimal_precision():
    """–¢–µ—Å—Ç 3: Decimal —Ç–æ—á–Ω—ñ—Å—Ç—å"""
    print("\n–¢–µ—Å—Ç 3: Decimal Precision...")
    
    from utils.price_handler import parse_price
    
    # –ö–ª–∞—Å–∏—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ float
    result = parse_price("0.1") + parse_price("0.2")
    expected = Decimal("0.3")
    
    if result != expected:
        print(f"  ‚ùå Decimal –Ω–µ—Ç–æ—á–Ω–∏–π: {result} != {expected}")
        return False
    
    print(f"  ‚úÖ 0.1 + 0.2 = {result} (—Ç–æ—á–Ω–æ!)")
    
    # –¢–µ—Å—Ç parse —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    test_cases = [
        ("120", Decimal("120.00")),
        ("120.50", Decimal("120.50")),
        ("120,50", Decimal("120.50")),  # –Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        ("120 –≥—Ä–Ω", Decimal("120.00")),
    ]
    
    for input_val, expected_val in test_cases:
        result = parse_price(input_val)
        if result != expected_val:
            print(f"  ‚ùå parse_price('{input_val}') = {result}, –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected_val}")
            return False
    
    print("  ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å—ñ—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î")
    return True


def test_field_mapping():
    """–¢–µ—Å—Ç 4: Field Mapping"""
    print("\n–¢–µ—Å—Ç 4: Field Mapping...")
    
    from config import normalize_menu_item, get_field_value, MenuField
    
    # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
    raw_item = {
        '–°—Ç—Ä–∞–≤–∏': '–ë–æ—Ä—â',  # Sheets —Ñ–æ—Ä–º–∞—Ç
        '–¶—ñ–Ω–∞': '120',
        '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è': '–°—É–ø–∏'
    }
    
    normalized = normalize_menu_item(raw_item)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ internal –∫–ª—é—á—ñ–≤
    if normalized.get('name') != '–ë–æ—Ä—â':
        print(f"  ‚ùå –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞: {normalized}")
        return False
    
    print(f"  ‚úÖ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è: {raw_item} ‚Üí {normalized}")
    
    # –¢–µ—Å—Ç get_field_value
    value = get_field_value(normalized, MenuField.NAME)
    if value != '–ë–æ—Ä—â':
        print(f"  ‚ùå get_field_value –ø–æ–≤–µ—Ä–Ω—É–≤ {value}")
        return False
    
    print("  ‚úÖ get_field_value –ø—Ä–∞—Ü—é—î")
    return True


def test_cart_calculation():
    """–¢–µ—Å—Ç 5: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–∑–∏–Ω–∏"""
    print("\n–¢–µ—Å—Ç 5: Cart Calculation...")
    
    from utils.price_handler import calculate_cart_total
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –∫–æ—Ä–∑–∏–Ω—É
    cart = {
        frozenset({'–¶—ñ–Ω–∞': '120.50', 'name': 'Item1'}.items()): 2,
        frozenset({'–¶—ñ–Ω–∞': '99.99', 'name': 'Item2'}.items()): 1,
    }
    
    total = calculate_cart_total(cart)
    expected = Decimal('340.99')  # 120.50*2 + 99.99
    
    if total != expected:
        print(f"  ‚ùå –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π: {total} != {expected}")
        return False
    
    print(f"  ‚úÖ Total: {total} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)")
    return True


def test_sheets_format():
    """–¢–µ—Å—Ç 6: –§–æ—Ä–º–∞—Ç –¥–ª—è Sheets"""
    print("\n–¢–µ—Å—Ç 6: Sheets Format...")
    
    from utils.price_handler import price_to_sheets_format
    
    test_cases = [
        (Decimal("120.50"), "120.50"),
        ("99", "99.00"),
        (150.123, "150.12"),  # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è
    ]
    
    for input_val, expected in test_cases:
        result = price_to_sheets_format(input_val)
        if result != expected:
            print(f"  ‚ùå {input_val} ‚Üí {result}, –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å {expected}")
            return False
        if not isinstance(result, str):
            print(f"  ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ string: {type(result)}")
            return False
    
    print("  ‚úÖ –í—Å—ñ —Ñ–æ—Ä–º–∞—Ç–∏ Sheets –ø—Ä–∞–≤–∏–ª—å–Ω—ñ")
    return True


def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏"""
    print("=" * 60)
    print("–®–í–ò–î–ö–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ü–Ü–°–õ–Ø –í–°–¢–ê–ù–û–í–õ–ï–ù–ù–Ø")
    print("=" * 60)
    
    tests = [
        test_imports,
        test_xss_protection,
        test_decimal_precision,
        test_field_mapping,
        test_cart_calculation,
        test_sheets_format,
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"  ‚ùå EXCEPTION: {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–ò: {passed} passed, {failed} failed")
    print("=" * 60)
    
    if failed == 0:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò! –ú–æ–∂–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é.")
        return 0
    else:
        print("‚ö†Ô∏è  –Ñ –ø—Ä–æ–±–ª–µ–º–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
        return 1


if __name__ == "__main__":
    sys.exit(run_all_tests())
```

---

## üìÑ 10. –®–≤–∏–¥–∫–∏–π setup script `setup.sh`

```bash
#!/bin/bash
# –®–≤–∏–¥–∫–∏–π setup –¥–ª—è –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤

echo "üöÄ Starting setup..."

# –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
echo "üìÅ Creating directories..."
mkdir -p utils config state tests

# –°—Ç–≤–æ—Ä–∏—Ç–∏ __init__ —Ñ–∞–π–ª–∏
echo "üìù Creating __init__.py files..."
touch utils/__init__.py
touch config/__init__.py
touch state/__init__.py
touch tests/__init__.py

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Python
echo "üêç Checking Python version..."
python --version

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
echo "üì¶ Installing dependencies..."
pip install -r requirements.txt

# –ö–æ–ø—ñ—é–≤–∞—Ç–∏ .env.example —è–∫—â–æ .env –Ω–µ —ñ—Å–Ω—É—î
if [ ! -f .env ]; then
    echo "‚öôÔ∏è  Creating .env from .env.example..."
    cp .env.example .env
    echo "‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û: –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª –∑ –≤–∞—à–∏–º–∏ credentials!"
else
    echo "‚úÖ .env already exists"
fi

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏
echo "üß™ Running tests..."
python tests/test_quick.py

echo ""
echo "=" 
echo "‚úÖ Setup complete!"
echo "=" 
echo ""
echo "Next steps:"
echo "1. –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª"
echo "2. –°–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥ –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏"
echo "3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python tests/test_quick.py"
echo "4. –Ø–∫—â–æ —Ç–µ—Å—Ç–∏ OK - –ø–æ—á–Ω—ñ—Ç—å –º—ñ–≥—Ä–∞—Ü—ñ—é main.py"
```

–ó—Ä–æ–±—ñ—Ç—å executable:
```bash
chmod +x setup.sh
```

---

## üéØ –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø –ü–û –ö–û–ü–Ü–Æ–í–ê–ù–ù–Æ

### –ö—Ä–æ–∫ 1: –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ)

```bash
# –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä—ñ–Ω—å –ø—Ä–æ–µ–∫—Ç—É
cd /path/to/your/bot/project

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ setup
bash setup.sh

# –ê–ë–û –≤—Ä—É—á–Ω—É:
mkdir -p utils config state tests
touch utils/__init__.py config/__init__.py state/__init__.py tests/__init__.py
```

### –ö—Ä–æ–∫ 2: –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏

–í—ñ–¥–∫—Ä–∏–π—Ç–µ –∫–æ–∂–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —ñ **–ø–æ–≤–Ω—ñ—Å—Ç—é —Å–∫–æ–ø—ñ—é–π—Ç–µ** –∫–æ–¥:

1. **`full_html_formatter`** ‚Üí –∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤ `utils/html_formatter.py`
2. **`full_price_handler`** ‚Üí –∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤ `utils/price_handler.py`
3. **`full_field_mapping`** ‚Üí –∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤ `config/field_mapping.py`
4. **`full_quick_test`** ‚Üí –∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤ `tests/test_quick.py`
5. `.env.example` ‚Üí —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –≤–∏—â–µ
6. `requirements.txt` ‚Üí –¥–æ–¥–∞—Ç–∏ —Ä—è–¥–∫–∏ –∑ –≤–∏—â–µ
7. `.gitignore` ‚Üí –¥–æ–¥–∞—Ç–∏ —Ä—è–¥–∫–∏ –∑ –≤–∏—â–µ

### –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞

```bash
# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
pip install -r requirements.txt

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏
python tests/test_quick.py

# –û—á—ñ–∫—É—î—Ç—å—Å—è –≤–∏–≤—ñ–¥:
# ‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏
```

### –ö—Ä–æ–∫ 4: –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ .env

```bash
# –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥
cp .env.example .env

# –í—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ (–≤—Å—Ç–∞–≤–∏—Ç–∏ —Å–≤–æ—ó credentials)
nano .env
# –∞–±–æ
vim .env
```

---

## ‚úÖ CHECKLIST

–ü—ñ—Å–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ:

- [ ] `utils/html_formatter.py` —ñ—Å–Ω—É—î —ñ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–¥
- [ ] `utils/price_handler.py` —ñ—Å–Ω—É—î —ñ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–¥
- [ ] `config/field_mapping.py` —ñ—Å–Ω—É—î —ñ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–¥
- [ ] `tests/test_quick.py` —ñ—Å–Ω—É—î —ñ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–¥
- [ ] `.env.example` —Å—Ç–≤–æ—Ä–µ–Ω–æ
- [ ] `.gitignore` –æ–Ω–æ–≤–ª–µ–Ω–æ
- [ ] `requirements.txt` –æ–Ω–æ–≤–ª–µ–Ω–æ
- [ ] `python tests/test_quick.py` –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫

---

**–î–∞–ª—ñ —â–æ?** –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤ –ø–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –¥–æ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó `main.py` —Ç–∞ `services/sheets.py`. –•–æ—á–µ—Ç–µ —â–æ–± —è –Ω–∞–¥–∞–≤ **–ø–æ–≤–Ω—ñ –≤–µ—Ä—Å—ñ—ó —Ü–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑—ñ –∑–º—ñ–Ω–∞–º–∏**?