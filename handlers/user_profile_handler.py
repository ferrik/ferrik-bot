"""
Handler for user profile operations
Shows profile, history, preferences, favorites
"""
import logging
from typing import Optional
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from storage.user_repository import UserRepository
from models.user_profile import UserProfile
from services.personalization_service import PersonalizationService
from utils.personalization_helpers import (
    format_profile_message,
    format_order_history_message,
    format_recommendations_message,
    create_profile_keyboard,
    format_discount_offer
)

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("profile"))
async def show_profile(message: types.Message, state: FSMContext):
    """Show user profile command"""
    user_id = message.from_user.id
    
    # Get or create profile
    profile = UserRepository.get_profile(user_id)
    if not profile:
        profile = UserProfile(
            user_id=user_id,
            name=message.from_user.first_name or "User"
        )
        UserRepository.save_profile(profile)
    
    # Update last seen
    UserRepository.update_last_seen(user_id)
    
    # Get order history
    order_history = UserRepository.get_user_order_history(user_id, limit=5)
    
    # Format message
    profile_text = format_profile_message(profile, order_history)
    
    # Create keyboard
    keyboard = create_profile_keyboard()
    
    await message.answer(profile_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "view_history")
async def view_order_history(query: types.CallbackQuery, state: FSMContext):
    """View order history callback"""
    user_id = query.from_user.id
    
    order_history = UserRepository.get_user_order_history(user_id, limit=10)
    history_text = format_order_history_message(order_history)
    
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ—ñ–ª—å', 'callback_data': 'back_to_profile'}]
        ]
    }
    
    await query.message.edit_text(history_text, reply_markup=keyboard, parse_mode="HTML")
    await query.answer()


@router.callback_query(F.data == "view_favorites")
async def view_favorites(query: types.CallbackQuery, state: FSMContext):
    """View favorite dishes callback"""
    user_id = query.from_user.id
    
    profile = UserRepository.get_profile(user_id)
    if not profile or not profile.favorite_dishes:
        await query.answer("–ü–æ–∫–∏ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö —Å—Ç—Ä–∞–≤")
        return
    
    text = "‚≠ê <b>–¢–≤–æ—ó —É–ª—é–±–ª–µ–Ω—ñ —Å—Ç—Ä–∞–≤–∏:</b>\n\n"
    
    keyboard = {'inline_keyboard': []}
    
    for i, dish in enumerate(profile.favorite_dishes[:10], 1):
        text += f"{i}. {dish}\n"
        keyboard['inline_keyboard'].append([
            {'text': f"üçï {dish}", 'callback_data': f"order_{i}"}
        ])
    
    keyboard['inline_keyboard'].append([
        {'text': 'üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ—ñ–ª—å', 'callback_data': 'back_to_profile'}
    ])
    
    await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await query.answer()


@router.callback_query(F.data == "view_bonuses")
async def view_bonuses(query: types.CallbackQuery):
    """View bonus points callback"""
    user_id = query.from_user.id
    
    profile = UserRepository.get_profile(user_id)
    if not profile:
        await query.answer("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    text = f"üéÅ <b>–¢–í–û–á –ë–û–ù–£–°-–ë–ê–õ–ò</b>\n\n"
    text += f"<b>–í—Å—å–æ–≥–æ –±–∞–ª—ñ–≤:</b> <code>{profile.points}</code>\n\n"
    text += f"<b>–Ø–∫ –∑–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏:</b>\n"
    text += f"‚Ä¢ –ö–æ–∂–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: +1 –±–∞–ª –∑–∞ 100 –≥—Ä–Ω\n"
    text += f"‚Ä¢ –†—ñ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö: +50 –±–∞–ª—ñ–≤\n"
    text += f"‚Ä¢ –ü–µ—Ä—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: +10 –±–∞–ª—ñ–≤\n\n"
    text += f"<b>–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏:</b>\n"
    text += f"‚Ä¢ 100 –±–∞–ª—ñ–≤ = 50 –≥—Ä–Ω –∑–Ω–∏–∂–∫–∏\n"
    text += f"‚Ä¢ 50 –±–∞–ª—ñ–≤ = 25 –≥—Ä–Ω –∑–Ω–∏–∂–∫–∏\n"
    text += f"‚Ä¢ 10 –±–∞–ª—ñ–≤ = 5 –≥—Ä–Ω –∑–Ω–∏–∂–∫–∏\n"
    
    keyboard = {
        'inline_keyboard': [
            [{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ—ñ–ª—å', 'callback_data': 'back_to_profile'}]
        ]
    }
    
    await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await query.answer()


@router.callback_query(F.data == "settings")
async def settings_menu(query: types.CallbackQuery):
    """Settings menu callback"""
    user_id = query.from_user.id
    
    preferences = UserRepository.get_preferences(user_id)
    
    text = "‚öôÔ∏è <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø</b>\n\n"
    text += f"<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {preferences.preferred_delivery_method}\n"
    text += f"<b>–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è:</b> {'–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ' if preferences.push_notifications else '–í–∏–º–∫–Ω–µ–Ω–æ ‚ùå'}\n"
    text += f"<b>–ë—é–¥–∂–µ—Ç:</b> –¥–æ {preferences.max_budget} –≥—Ä–Ω\n\n"
    
    if preferences.dietary_restrictions:
        text += f"<b>–î—ñ—î—Ç–∏—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è:</b>\n"
        for restriction in preferences.dietary_restrictions:
            text += f"‚Ä¢ {restriction}\n"
        text += "\n"
    
    keyboard = {
        'inline_keyboard': [
            [
                {'text': 'üì¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è', 'callback_data': 'toggle_notifications'},
                {'text': 'üöö –î–æ—Å—Ç–∞–≤–∫–∞', 'callback_data': 'edit_delivery'}
            ],
            [
                {'text': 'üå± –î—ñ—î—Ç–∞', 'callback_data': 'edit_diet'},
                {'text': 'üí∞ –ë—é–¥–∂–µ—Ç', 'callback_data': 'edit_budget'}
            ],
            [{'text': 'üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ—ñ–ª—å', 'callback_data': 'back_to_profile'}]
        ]
    }
    
    await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await query.answer()


@router.callback_query(F.data == "toggle_notifications")
async def toggle_notifications(query: types.CallbackQuery):
    """Toggle push notifications"""
    user_id = query.from_user.id
    
    preferences = UserRepository.get_preferences(user_id)
    preferences.push_notifications = not preferences.push_notifications
    UserRepository.save_preferences(preferences)
    
    status = "–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ" if preferences.push_notifications else "–í–∏–º–∫–Ω–µ–Ω–æ ‚ùå"
    await query.answer(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {status}")
    
    # Refresh settings
    await settings_menu(query)


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(query: types.CallbackQuery):
    """Go back to profile view"""
    user_id = query.from_user.id
    
    profile = UserRepository.get_profile(user_id)
    order_history = UserRepository.get_user_order_history(user_id, limit=5)
    
    profile_text = format_profile_message(profile, order_history)
    keyboard = create_profile_keyboard()
    
    await query.message.edit_text(profile_text, reply_markup=keyboard, parse_mode="HTML")
    await query.answer()


@router.callback_query(F.data == "quick_reorder")
async def quick_reorder_action(query: types.CallbackQuery):
    """Quick reorder favorite dish"""