# handlers/cart.py
"""
üõí –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–®–ò–ö–ê
–î–æ–¥–∞–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –ø–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–æ—à–∏–∫—É
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
from services.models import get_session, UserCart, MenuItem
from sqlalchemy.orm import Session

logger = logging.getLogger(__name__)


# ============================================================================
# –î–û–ë–ê–í–õ–ï–ù–ù–Ø –í –ö–û–®–ò–ö
# ============================================================================

async def add_to_cart(user_id: str, item_id: str, quantity: int, db_engine) -> bool:
    """
    –î–æ–¥–∞–π —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Args:
        user_id: Telegram user ID
        item_id: ID —Ç–æ–≤–∞—Ä—É
        quantity: –ö—ñ–ª—å–∫—ñ—Å—Ç—å
        db_engine: SQLAlchemy engine
    
    Returns:
        True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ, False —è–∫—â–æ –ø–æ–º–∏–ª–∫–∞
    """
    try:
        session = get_session(db_engine)
        
        # –û—Ç—Ä–∏–º–∞–π —Ç–æ–≤–∞—Ä
        menu_item = session.query(MenuItem).filter(MenuItem.id == item_id).first()
        
        if not menu_item:
            logger.warning(f"‚ùå Item not found: {item_id}")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏, —á–∏ –≤–∂–µ –≤ –∫–æ—à–∏–∫—É
        existing = session.query(UserCart).filter(
            UserCart.user_id == user_id,
            UserCart.item_id == item_id
        ).first()
        
        if existing:
            # –ó–±—ñ–ª—å—à –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            existing.quantity += quantity
            logger.info(f"‚úÖ Updated cart: {user_id} - {item_id} qty={existing.quantity}")
        else:
            # –î–æ–¥–∞–π –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
            cart_item = UserCart(
                user_id=user_id,
                item_id=item_id,
                item_name=menu_item.name,
                quantity=quantity,
                price=menu_item.price
            )
            session.add(cart_item)
            logger.info(f"‚úÖ Added to cart: {user_id} - {item_id} qty={quantity}")
        
        session.commit()
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Add to cart error: {e}")
        return False
    
    finally:
        session.close()


# ============================================================================
# –í–ò–î–ê–õ–ï–ù–ù–Ø –ó –ö–û–®–ò–ö–ê
# ============================================================================

async def remove_from_cart(user_id: str, cart_id: int, db_engine) -> bool:
    """–í–∏–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä –∑ –∫–æ—à–∏–∫–∞"""
    try:
        session = get_session(db_engine)
        
        item = session.query(UserCart).filter(
            UserCart.id == cart_id,
            UserCart.user_id == user_id
        ).first()
        
        if item:
            session.delete(item)
            session.commit()
            logger.info(f"‚úÖ Removed from cart: {user_id} - cart_id={cart_id}")
            return True
        
        return False
    
    except Exception as e:
        logger.error(f"‚ùå Remove from cart error: {e}")
        return False
    
    finally:
        session.close()


# ============================================================================
# –ü–ï–†–ï–ì–õ–Ø–î –ö–û–®–ò–ö–ê
# ============================================================================

async def get_user_cart(user_id: str, db_engine) -> list:
    """–û—Ç—Ä–∏–º–∞–π –≤–µ—Å—å –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        session = get_session(db_engine)
        
        items = session.query(UserCart).filter(
            UserCart.user_id == user_id
        ).all()
        
        return [item.to_dict() for item in items]
    
    except Exception as e:
        logger.error(f"‚ùå Get cart error: {e}")
        return []
    
    finally:
        session.close()


async def get_cart_total(user_id: str, db_engine) -> float:
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É–π —Å—É–º—É –∫–æ—à–∏–∫–∞"""
    try:
        session = get_session(db_engine)
        
        items = session.query(UserCart).filter(
            UserCart.user_id == user_id
        ).all()
        
        total = sum(item.quantity * item.price for item in items)
        return total
    
    except Exception as e:
        logger.error(f"‚ùå Get cart total error: {e}")
        return 0
    
    finally:
        session.close()


# ============================================================================
# –ü–û–ö–ê–ó –ö–û–®–ò–ö–ê –í TELEGRAM
# ============================================================================

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE, db_engine):
    """–ö–æ–º–∞–Ω–¥–∞ /cart - –ø–æ–∫–∞–∑ –∫–æ—à–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user_id = str(update.effective_user.id)
        
        # –û—Ç—Ä–∏–º–∞–π —Ç–æ–≤–∞—Ä–∏
        cart_items = await get_user_cart(user_id, db_engine)
        
        if not cart_items:
            await update.message.reply_text(
                "üõí –¢–≤—ñ–π –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n\n"
                "–û–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä: /menu"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç—É–π –∫–æ—à–∏–∫
        text = "üõí *–¢–í–Ü–ô –ö–û–®–ò–ö:*\n\n"
        total = 0
        
        for item in cart_items:
            item_total = item['quantity'] * item['price']
            total += item_total
            
            text += f"‚Ä¢ *{item['item_name']}*\n"
            text += f"  –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item['quantity']} ‚úï {item['price']} –≥—Ä–Ω = {item_total} –≥—Ä–Ω\n"
            text += f"  [üÜî {item['id']}]\n\n"
        
        text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += f"*–†–ê–ó–û–ú: {total} –≥—Ä–Ω*\n"
        text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="menu"),
                InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="cart_clear"),
            ],
            [
                InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order_start"),
            ]
        ]
        
        await update.message.reply_text(
            text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    except Exception as e:
        logger.error(f"‚ùå Show cart error: {e}")
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞")


# ============================================================================
# –û–ß–ò–°–¢–ö–ê –ö–û–®–ò–ö–ê
# ============================================================================

async def clear_cart(user_id: str, db_engine) -> bool:
    """–í–∏–¥–∞–ª–∏ –í–°–Ü —Ç–æ–≤–∞—Ä–∏ –∑ –∫–æ—à–∏–∫–∞"""
    try:
        session = get_session(db_engine)
        
        session.query(UserCart).filter(
            UserCart.user_id == user_id
        ).delete()
        
        session.commit()
        logger.info(f"‚úÖ Cleared cart: {user_id}")
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Clear cart error: {e}")
        return False
    
    finally:
        session.close()


# ============================================================================
# INLINE –ö–ù–û–ü–ö–ò –î–õ–Ø –¢–û–í–ê–†–Ü–í
# ============================================================================

def get_item_buttons(item_id: str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É (–¥–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫, –¥–µ—Ç–∞–ª—ñ)"""
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏", callback_data=f"add_item_{item_id}"),
            InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"favorite_{item_id}"),
        ],
        [
            InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—ñ", callback_data=f"item_details_{item_id}"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)