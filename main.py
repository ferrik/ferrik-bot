import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime
from collections import defaultdict

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('hubsy')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç–∏
logger.info("üöÄ Starting Hubsy Bot...")

try:
    from config import (
        BOT_TOKEN, GEMINI_API_KEY, SPREADSHEET_ID, 
        WEBHOOK_SECRET, validate_config, log_config
    )
    logger.info("‚úÖ Config imported successfully")
except Exception as e:
    logger.error(f"‚ùå Config import error: {e}")
    BOT_TOKEN = None
    WEBHOOK_SECRET = "Ferrik123"

try:
    from services.sheets import (
        init_gspread_client, get_menu_from_sheet, 
        save_order_to_sheets, is_sheets_connected, search_menu_items
    )
    logger.info("‚úÖ Sheets service imported")
except Exception as e:
    logger.error(f"‚ùå Sheets import error: {e}")

try:
    from services.gemini import init_gemini_client, get_ai_response, is_gemini_connected
    logger.info("‚úÖ Gemini service imported")
except Exception as e:
    logger.error(f"‚ùå Gemini import error: {e}")

try:
    from services.telegram import tg_send_message, tg_answer_callback, tg_set_webhook
    logger.info("‚úÖ Telegram service imported")
except Exception as e:
    logger.error(f"‚ùå Telegram service import error: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
menu_cache = []
user_carts = defaultdict(list)  # {chat_id: [items]}
user_states = {}  # {chat_id: 'state'}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
def init_services():
    global menu_cache
    logger.info("üõ†Ô∏è Initializing Hubsy services...")
    
    try:
        log_config()
        validate_config()
    except: pass
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
    try:
        menu_cache = get_menu_from_sheet()
        logger.info(f"‚úÖ Menu cached: {len(menu_cache)} items")
    except Exception as e:
        logger.error(f"‚ùå Menu loading error: {e}")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI
    try:
        init_gemini_client()
        logger.info("‚úÖ Gemini initialized")
    except Exception as e:
        logger.error(f"‚ùå Gemini error: {e}")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
    try:
        from config import RENDER_URL
        result = tg_set_webhook(RENDER_URL)
        if result and result.get('ok'):
            logger.info("‚úÖ Webhook set successfully")
    except Exception as e:
        logger.error(f"‚ùå Webhook setup error: {e}")

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
def send_message(chat_id, text, reply_markup=None, parse_mode="HTML"):
    try:
        return tg_send_message(chat_id, text, reply_markup, parse_mode)
    except Exception as e:
        logger.error(f"Send error: {e}")
        return None

def answer_callback(callback_id, text="", show_alert=False):
    try:
        return tg_answer_callback(callback_id, text, show_alert)
    except Exception as e:
        logger.error(f"Callback answer error: {e}")

# –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –º–µ–Ω—é
def get_categories():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –º–µ–Ω—é"""
    categories = set()
    for item in menu_cache:
        cat = item.get("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–Ü–Ω—à–µ")
        if cat:
            categories.add(cat)
    return sorted(list(categories))

def get_items_by_category(category):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
    return [item for item in menu_cache if item.get("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è") == category]

def format_item(item, show_full=False):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏"""
    name = item.get("–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
    price = item.get("–¶—ñ–Ω–∞", "?")
    
    if show_full:
        desc = item.get("–û–ø–∏—Å", "")
        weight = item.get("–í–∞–≥–∞", "")
        text = f"<b>{name}</b>\n"
        if desc:
            text += f"{desc}\n"
        if weight:
            text += f"‚öñÔ∏è {weight}\n"
        text += f"üí∞ <b>{price} –≥—Ä–Ω</b>"
        return text
    else:
        return f"{name} - {price} –≥—Ä–Ω"

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def handle_start(chat_id):
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    text = (
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ <b>Hubsy</b>!\n\n"
        "üçï –í–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–º–∞—á–Ω–æ—ó —ó–∂—ñ.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üìñ –ú–µ–Ω—é", "callback_data": "show_categories"}],
            [
                {"text": "üîç –ü–æ—à—É–∫", "callback_data": "search_mode"},
                {"text": "üõí –ö–æ—Ä–∑–∏–Ω–∞", "callback_data": "show_cart"}
            ],
            [
                {"text": "‚ú® AI-–ü–æ—Ä–∞–¥–∞", "callback_data": "ai_recommend"},
                {"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", "callback_data": "contacts"}
            ]
        ]
    }
    
    send_message(chat_id, text, reply_markup=keyboard)

def show_categories(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –º–µ–Ω—é"""
    categories = get_categories()
    
    if not categories:
        send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
        return
    
    text = "üìñ <b>–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:</b>"
    
    keyboard = {"inline_keyboard": []}
    
    # –ï–º–æ–¥–∑—ñ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    category_emoji = {
        "–ü—ñ—Ü–∞": "üçï",
        "–ë—É—Ä–≥–µ—Ä–∏": "üçî",
        "–°—É—à—ñ": "üç£",
        "–°–∞–ª–∞—Ç–∏": "ü•ó",
        "–ù–∞–ø–æ—ó": "ü•§",
        "–î–µ—Å–µ—Ä—Ç–∏": "üç∞"
    }
    
    for cat in categories:
        emoji = category_emoji.get(cat, "üçΩÔ∏è")
        keyboard["inline_keyboard"].append([
            {"text": f"{emoji} {cat}", "callback_data": f"cat_{cat}"}
        ])
    
    keyboard["inline_keyboard"].append([
        {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "start"}
    ])
    
    send_message(chat_id, text, reply_markup=keyboard)

def show_category_items(chat_id, category):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    items = get_items_by_category(category)
    
    if not items:
        send_message(chat_id, f"–í –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó <b>{category}</b> –ø–æ–∫–∏ –Ω–µ–º–∞—î —Å—Ç—Ä–∞–≤")
        return
    
    text = f"üìã <b>{category}</b>\n\n"
    
    keyboard = {"inline_keyboard": []}
    
    for i, item in enumerate(items[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–≤
        item_text = format_item(item)
        text += f"{i+1}. {item_text}\n"
        
        item_id = item.get("ID") or item.get("–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏", "")
        keyboard["inline_keyboard"].append([
            {"text": f"‚ûï {item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '')[:20]}", "callback_data": f"add_{item_id}"}
        ])
    
    keyboard["inline_keyboard"].append([
        {"text": "üîô –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó", "callback_data": "show_categories"},
        {"text": "üè† –ì–æ–ª–æ–≤–Ω–∞", "callback_data": "start"}
    ])
    
    send_message(chat_id, text, reply_markup=keyboard)

def add_to_cart(chat_id, item_id):
    """–î–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    # –ó–Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–≤—É
    item = None
    for menu_item in menu_cache:
        if str(menu_item.get("ID", "")) == str(item_id) or menu_item.get("–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏") == item_id:
            item = menu_item
            break
    
    if not item:
        return "‚ùå –°—Ç—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    
    user_carts[chat_id].append(item)
    name = item.get("–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏", "–°—Ç—Ä–∞–≤–∞")
    return f"‚úÖ <b>{name}</b> –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!"

def show_cart(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É"""
    cart = user_carts.get(chat_id, [])
    
    if not cart:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è\n\n–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –º–µ–Ω—é —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Å—Ç—Ä–∞–≤–∏!"
        keyboard = {
            "inline_keyboard": [[
                {"text": "üìñ –ú–µ–Ω—é", "callback_data": "show_categories"}
            ]]
        }
        send_message(chat_id, text, reply_markup=keyboard)
        return
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫
    total = 0
    items_count = defaultdict(int)
    
    for item in cart:
        name = item.get("–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏", "")
        items_count[name] += 1
        try:
            price = float(str(item.get("–¶—ñ–Ω–∞", 0)).replace(",", "."))
            total += price
        except:
            pass
    
    text = "üõí <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"
    
    for name, count in items_count.items():
        text += f"‚Ä¢ {name} x{count}\n"
    
    text += f"\nüí∞ <b>–°—É–º–∞: {total:.2f} –≥—Ä–Ω</b>"
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "callback_data": "checkout"}],
            [{"text": "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É", "callback_data": "clear_cart"}],
            [{"text": "‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", "callback_data": "show_categories"}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "start"}]
        ]
    }
    
    send_message(chat_id, text, reply_markup=keyboard)

def clear_cart(chat_id):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É"""
    user_carts[chat_id] = []
    return "üóëÔ∏è –ö–æ—Ä–∑–∏–Ω—É –æ—á–∏—â–µ–Ω–æ"

def checkout(chat_id):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    cart = user_carts.get(chat_id, [])
    
    if not cart:
        return "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è"
    
    try:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        save_order_to_sheets(chat_id, cart)
        
        # –û—á–∏—â–∞—î–º–æ –∫–æ—Ä–∑–∏–Ω—É
        user_carts[chat_id] = []
        
        text = (
            "‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
            "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n\n"
            "–î—è–∫—É—î–º–æ —â–æ –æ–±—Ä–∞–ª–∏ Hubsy! üíô"
        )
        
        keyboard = {
            "inline_keyboard": [[
                {"text": "üè† –ì–æ–ª–æ–≤–Ω–∞", "callback_data": "start"}
            ]]
        }
        
        send_message(chat_id, text, reply_markup=keyboard)
        return None
        
    except Exception as e:
        logger.error(f"Checkout error: {e}")
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

def ai_recommend(chat_id):
    """AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    if not is_gemini_connected():
        text = "‚ùå AI-–ø–æ–º—ñ—á–Ω–∏–∫ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        keyboard = {
            "inline_keyboard": [[
                {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "start"}
            ]]
        }
        send_message(chat_id, text, reply_markup=keyboard)
        return
    
    try:
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        categories = get_categories()
        prompt = f"""–¢–∏ - –ø–æ–º—ñ—á–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É Hubsy. –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π 2-3 —Å—Ç—Ä–∞–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.

–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {', '.join(categories)}

–î–∞–π –∫–æ—Ä–æ—Ç–∫—É (2-3 —Ä–µ—á–µ–Ω–Ω—è) –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –≤ –¥—Ä—É–∂–Ω—å–æ–º—É —Å—Ç–∏–ª—ñ."""

        recommendation = get_ai_response(prompt)
        
        text = f"‚ú® <b>AI-–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b>\n\n{recommendation}"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", "callback_data": "show_categories"}],
                [{"text": "üîÑ –Ü–Ω—à–∞ –ø–æ—Ä–∞–¥–∞", "callback_data": "ai_recommend"}],
                [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "start"}]
            ]
        }
        
        send_message(chat_id, text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"AI recommend error: {e}")
        send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ AI. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

def show_contacts(chat_id):
    """–ö–æ–Ω—Ç–∞–∫—Ç–∏"""
    text = """
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏ Hubsy</b>

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380 XX XXX XX XX
üìß Email: hello@hubsy.com
üìç –ê–¥—Ä–µ—Å–∞: –º. –ö–∏—ó–≤, –≤—É–ª. –°–º–∞—á–Ω–∞, 1

üïê –ü—Ä–∞—Ü—é—î–º–æ: —â–æ–¥–Ω—è 9:00-23:00

üöó –î–æ—Å—Ç–∞–≤–∫–∞: 30-40 —Ö–≤–∏–ª–∏–Ω
üí≥ –û–ø–ª–∞—Ç–∞: –≥–æ—Ç—ñ–≤–∫–∞, –∫–∞—Ä—Ç–∫–∞
"""
    
    keyboard = {
        "inline_keyboard": [[
            {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "start"}
        ]]
    }
    
    send_message(chat_id, text, reply_markup=keyboard)

def search_mode(chat_id):
    """–†–µ–∂–∏–º –ø–æ—à—É–∫—É"""
    user_states[chat_id] = 'searching'
    text = "üîç <b>–ü–æ—à—É–∫ —Å—Ç—Ä–∞–≤</b>\n\n–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –∞–±–æ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ —Å—Ç—Ä–∞–≤–∏:"
    
    keyboard = {
        "inline_keyboard": [[
            {"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "callback_data": "start"}
        ]]
    }
    
    send_message(chat_id, text, reply_markup=keyboard)

def process_search(chat_id, query):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫—É"""
    results = search_menu_items(query)
    
    if not results:
        text = f"‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '<b>{query}</b>'\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç:"
        keyboard = {
            "inline_keyboard": [[
                {"text": "üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å–µ –º–µ–Ω—é", "callback_data": "show_categories"}
            ]]
        }
        send_message(chat_id, text, reply_markup=keyboard)
        return
    
    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É '<b>{query}</b>':\n\n"
    keyboard = {"inline_keyboard": []}
    
    for item in results[:10]:
        item_text = format_item(item)
        text += f"‚Ä¢ {item_text}\n"
        
        item_id = item.get("ID") or item.get("–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏", "")
        keyboard["inline_keyboard"].append([
            {"text": f"‚ûï {item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '')[:25]}", "callback_data": f"add_{item_id}"}
        ])
    
    keyboard["inline_keyboard"].append([
        {"text": "üîç –ù–æ–≤–∏–π –ø–æ—à—É–∫", "callback_data": "search_mode"},
        {"text": "üè† –ì–æ–ª–æ–≤–Ω–∞", "callback_data": "start"}
    ])
    
    send_message(chat_id, text, reply_markup=keyboard)
    user_states[chat_id] = None

# –û–±—Ä–æ–±–∫–∞ callback
def process_callback_query(callback_query):
    try:
        chat_id = callback_query["message"]["chat"]["id"]
        callback_id = callback_query["id"]
        data = callback_query["data"]
        
        answer_callback(callback_id, "‚è≥")
        
        if data == "start":
            handle_start(chat_id)
        elif data == "show_categories":
            show_categories(chat_id)
        elif data.startswith("cat_"):
            category = data[4:]
            show_category_items(chat_id, category)
        elif data.startswith("add_"):
            item_id = data[4:]
            msg = add_to_cart(chat_id, item_id)
            answer_callback(callback_id, msg, show_alert=True)
        elif data == "show_cart":
            show_cart(chat_id)
        elif data == "clear_cart":
            msg = clear_cart(chat_id)
            answer_callback(callback_id, msg, show_alert=True)
            show_cart(chat_id)
        elif data == "checkout":
            msg = checkout(chat_id)
            if msg:
                answer_callback(callback_id, msg, show_alert=True)
        elif data == "ai_recommend":
            ai_recommend(chat_id)
        elif data == "contacts":
            show_contacts(chat_id)
        elif data == "search_mode":
            search_mode(chat_id)
        else:
            send_message(chat_id, f"–û–±—Ä–∞–Ω–æ: {data}")
            
    except Exception as e:
        logger.error(f"Callback error: {e}")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
def process_message(message):
    try:
        chat_id = message["chat"]["id"]
        text = message.get("text", "")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É –ø–æ—à—É–∫—É
        if user_states.get(chat_id) == 'searching':
            process_search(chat_id, text)
            return
        
        # –ö–æ–º–∞–Ω–¥–∏
        if text == "/start":
            handle_start(chat_id)
        elif text == "/menu":
            show_categories(chat_id)
        elif text == "/cart":
            show_cart(chat_id)
        elif text == "/help":
            handle_start(chat_id)
        else:
            # AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç–µ–∫—Å—Ç
            if is_gemini_connected():
                try:
                    prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤: {text}\n\n–î–∞–π –∫–æ—Ä–æ—Ç–∫—É –¥—Ä—É–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —ñ–º–µ–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É Hubsy."
                    response = get_ai_response(prompt)
                    send_message(chat_id, response)
                except:
                    send_message(chat_id, "–°–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–µ–Ω—é")
            else:
                send_message(chat_id, "–°–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–µ–Ω—é")
                
    except Exception as e:
        logger.error(f"Message error: {e}")

# Flask routes
@app.route('/', methods=['GET'])
def index():
    return jsonify({
        'status': 'ok',
        'bot': 'Hubsy',
        'version': '2.0',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/test-menu', methods=['GET'])
def test_menu():
    """–¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–µ–Ω—é"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        is_connected = is_sheets_connected()
        
        # –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é
        menu = get_menu_from_sheet()
        
        return jsonify({
            'sheets_connected': is_connected,
            'menu_items_count': len(menu),
            'menu_cached': len(menu_cache),
            'sample_items': menu[:3] if menu else [],
            'spreadsheet_id': os.environ.get('GOOGLE_SHEET_ID') or os.environ.get('SPREADSHEET_ID'),
            'has_credentials': bool(os.environ.get('GOOGLE_CREDENTIALS_JSON'))
        })
    except Exception as e:
        return jsonify({
            'error': str(e),
            'error_type': type(e).__name__
        }), 500

@app.route('/<path:secret>', methods=['POST'])
def webhook(secret):
    if secret != WEBHOOK_SECRET:
        logger.warning(f"Invalid webhook path: {secret}")
        return jsonify({'status': 'unauthorized'}), 401
    
    try:
        update = request.get_json()
        if not update:
            return jsonify({'status': 'ok'})

        logger.info(f"Update: {update.get('update_id', 'unknown')}")

        if 'message' in update:
            process_message(update['message'])
        elif 'callback_query' in update:
            process_callback_query(update['callback_query'])
            
        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.exception(f"Webhook error: {e}")
        return jsonify({'status': 'error'}), 500

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {error}")
    return jsonify({"error": "Internal server error"}), 500

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
with app.app_context():
    init_services()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)