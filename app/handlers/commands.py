"""
üéØ –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ - –õ–Æ–î–Ø–ù–ê –í–ï–†–°–Ü–Ø
–¢–µ–ø–ª—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è, –±–µ–π–¥–∂–∏ —Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

from app.utils.validators import format_order_summary, calculate_total_price
from app.utils.session import (
    get_user_cart,
    clear_user_cart,
    get_user_session,
    update_user_session,
    get_user_stats,
    get_user_badge,
    get_referral_link,
    get_weekly_challenge,
    get_user_challenge_progress,
    ACHIEVEMENTS,
)

logger = logging.getLogger(__name__)

# ============================================================================
# –ü–†–ò–í–Ü–¢–ê–ù–ù–Ø - –¢–ï–ü–õ–Ü –¢–ê –ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü
# ============================================================================

WARM_GREETINGS = {
    'first_time': """üëã **–í—ñ—Ç–∞—é —É FerrikFoot!** üçï

–Ø **Ferrik** ‚Äî —Ç–≤—ñ–π —Å—É–ø–µ—Ä-–ø–æ–º—ñ—á–Ω–∏–∫ –∑—ñ —Å–º–∞–∫—É üòã

–ó–Ω–∞—é, —â–æ —Ç–∏ –≥–æ–ª–æ–¥–Ω–∏–π! –í–∏–±–µ—Ä–∏, —â–æ –±–∞–∂–∞—î—à:

‚ú® **–ü–æ—Ä–∞–¥–∏—Ç–∏ —Å—Ç—Ä–∞–≤—É** –∑–∞ —Ç–≤–æ—ó–º –Ω–∞—Å—Ç—Ä–æ—î–º
üéÅ **–ü–æ–¥–∞—Ä—É—é 50 –±–æ–Ω—É—Å—ñ–≤** –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
üìã **–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é** –∑ –∫—Ä–∞—â–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤
üí¨ **–†–æ–∑—É–º—ñ—Ç–∏** —Ç–≤–æ—ó –±–∞–∂–∞–Ω–Ω—è —è–∫ –ª—é–¥–∏–Ω–∞ (–Ω–µ –±–æ—Ç)

–ß–æ–≥–æ —á–µ–∫–∞—î–º–æ? –ó—Ä–æ–±–∏–º–æ —Ç–µ–±–µ —â–∞—Å–ª–∏–≤–∏–º! üöÄ""",

    'returning_once': """–û—É, —Ç–∏ –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è! üëã

–°–ø–æ–¥—ñ–≤–∞—é—Å—å, –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ —Å–º–∞—á–Ω–∏–º? üçΩÔ∏è

–©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞–∫–∞–∑—É—î–º–æ?""",

    'regular': """–ü—Ä–∏–≤—ñ—Ç, —á–µ–º–ø—ñ–æ–Ω! üëë

–ó–Ω–æ–≤—É –≥–æ–ª–æ–¥–Ω–∏–π? üòã
–Ø –≤–∂–µ –∑–Ω–∞—é —Ç–≤–æ—ó —É–ø–æ–¥–æ–±–∞–Ω–Ω—è!

–°–ø—Ä–æ–±—É—î–º–æ —â–æ—Å—å –Ω–æ–≤–µ —á–∏ –∑–∞–º–æ–≤–∏–º–æ —É–ª—é–±–ª–µ–Ω–µ? üçï""",

    'VIP': """–ü—Ä–∏–≤—ñ—Ç, –º–µ–≥–∞—Ñ–∞–Ω! üåü

–¢–∏ —É–∂–µ **{badge}** —É FerrikFoot!
–°–ø–∞—Å–∏–±—ñ —â–æ –∑–∞–ª–∏—à–∞—î—à—Å—è –∑ –Ω–∞–º–∏ üôå

–î–ª—è —Ç–µ–±–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ: **{bonus} –±–æ–Ω—É—Å—ñ–≤** –∑–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!

–©–æ –Ω–∞ –º–µ–Ω—é? üë®‚Äçüç≥""",
}


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start - –ü–ï–†–°–û–ù–ê–õ–Ü–ó–û–í–ê–ù–ò–ô"""
    user = update.effective_user
    
    logger.info(f"üë§ User {user.id} (@{user.username}) started bot")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Å—ñ—é
    session = get_user_session(user.id)
    stats = get_user_stats(user.id)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    if stats['order_count'] == 0:
        # –ü–ï–†–®–ò–ô –†–ê–ó–î–ó–í–Ü–î - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–ï–ü–õ–ò–ô
        greeting = WARM_GREETINGS['first_time']
        # –î–∞—î–º–æ –±–æ–Ω—É—Å –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
        update_user_session(user.id, {'bonus_points': 50})
        
    elif stats['order_count'] == 1:
        greeting = WARM_GREETINGS['returning_once']
    
    elif stats['order_count'] < 10:
        greeting = WARM_GREETINGS['regular']
    
    else:
        # VIP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        badge = stats['badge']
        bonus = stats['bonus_points']
        greeting = WARM_GREETINGS['VIP'].format(
            badge=badge['name'],
            bonus=bonus
        )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    keyboard = [
        [
            InlineKeyboardButton("üéÅ –°—é—Ä–ø—Ä–∏–∑!", callback_data="surprise_me"),
            InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu"),
        ],
        [
            InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart"),
            InlineKeyboardButton("‚≠ê –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
        ],
        [
            InlineKeyboardButton("üéØ –ß–µ–ª–ª–µ–Ω–¥–∂", callback_data="show_challenge"),
            InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="show_help"),
        ]
    ]
    
    # –Ø–∫—â–æ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º—É
    if stats['order_count'] == 0:
        referral_link = get_referral_link(user.id)
        greeting += f"\n\n**–ü–æ–¥—ñ–ª–∏—Å—å –∑ –¥—Ä—É–∑—è–º–∏:**\n`{referral_link}`\n_(–û–±–∏–¥–≤–∞ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ 100 –±–æ–Ω—É—Å—ñ–≤!)_"
        keyboard.append([
            InlineKeyboardButton("üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –±–æ—Ç–æ–º", callback_data="share_bot")
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        greeting,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# –ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê - –ü–û–ö–ê–ó–£–í–ê–¢–ò –ë–ï–ô–î–ñ–Ü –Ü –°–¢–ê–¢–ò–°–¢–ò–ö–£
# ============================================================================

async def show_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é"""
    query = update.callback_query
    user = query.from_user
    
    stats = get_user_stats(user.id)
    badge = stats['badge']
    
    profile_text = f"""**üë§ –¢–ï –ü–†–û–§–Ü–õ–¨**

**–°—Ç–∞—Ç—É—Å:** {badge['emoji']} {badge['name']}
_(–©–µ {stats['next_badge_in']} –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è!)_

üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: **{stats['order_count']}** üçï
‚Ä¢ –ó–∞–≥–∞–ª–æ–º –≤–∏—Ç—Ä–∞—á–µ–Ω–æ: **{stats['total_spent']} –≥—Ä–Ω** üí∞
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å: **{stats['avg_order_value']} –≥—Ä–Ω**
‚Ä¢ –ë–æ–Ω—É—Å-–ø–æ—ñ–Ω—Ç–∏: **{stats['bonus_points']}** ‚≠ê

üèÜ **–î–û–°–Ø–ì–ù–ï–ù–ù–Ø:** {stats['achievements_count']} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ

‚ù§Ô∏è **–£–õ–Æ–ë–õ–ï–ù–ê –°–¢–†–ê–í–ê:** {stats['favorite_item'] or '–©–µ –Ω–µ –æ–±—Ä–∞–≤'}

üìÖ **–ó –ù–ê–ú–ò –ó:** {stats['created_at'][:10]}
"""

    if stats['order_count'] > 0:
        profile_text += f"\nüìå **–û–°–¢–ê–ù–ù–Ñ –ó–ê–ú–û–í–õ–ï–ù–ù–Ø:** {stats['last_order_date'][:10]}"
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data="show_achievements")],
        [InlineKeyboardButton("üë• –ú–æ—ó —Ä–µ—Ñ–µ—Ä–∞–ª—ñ", callback_data="show_referrals")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        profile_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


# ============================================================================
# –ß–ï–õ–õ–ï–ù–î–ñ–Ü - –ú–û–¢–ò–í–ê–¶–Ü–Ø –ó–ê–ú–û–í–õ–Ø–¢–ò
# ============================================================================

async def show_challenge_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π —á–µ–ª–ª–µ–Ω–¥–∂"""
    query = update.callback_query
    user = query.from_user
    
    challenge_data = get_user_challenge_progress(user.id)
    challenge = challenge_data['challenge']
    
    challenge_text = f"""**üéØ –ß–ï–õ–õ–ï–ù–î–ñ –¢–ò–ñ–ù–Ø**

{challenge['title']}

**–ó–∞–≤–¥–∞–Ω–Ω—è:** {challenge['description']}

üìä **–ü–†–û–ì–†–ï–°:**
{challenge_data['percentage']}% [{'‚ñà' * (challenge_data['percentage']//10)}{'‚ñë' * (10 - challenge_data['percentage']//10)}]

**–í–∏–∫–æ–Ω–∞–Ω–æ:** {challenge_data['current_progress']}/{challenge['target']}
**–ó–∞–ª–∏—à–∏–ª–æ—Å—å:** {challenge_data['remaining']}

üèÜ **–ù–ê–ì–†–ê–î–ê:** {challenge['reward']} –±–æ–Ω—É—Å—ñ–≤! ‚≠ê

{'‚úÖ –ß–ï–õ–õ–ï–ù–î–ñ –ó–ê–í–ï–†–®–ï–ù–û! üéâ' if challenge_data['completed'] else '–©–µ —Ç—Ä–æ—Ö–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ! üí™'}
"""

    keyboard = [
        [InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup