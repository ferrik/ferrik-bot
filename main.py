import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∑ Render (ENV VAR)
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ú–µ–Ω—é –∑ –µ–º–æ–¥–∑—ñ
main_menu = [
    ["üçî –ú–µ–Ω—é", "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
    ["‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–∏"]
]

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç FerrikFoot üöÄ\n"
        "–í–∏–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ ‚¨áÔ∏è",
        reply_markup=reply_markup
    )

# –¢–µ–∫—Å—Ç–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üçî –ú–µ–Ω—é":
        await update.message.reply_text("–ù–∞—à–µ –º–µ–Ω—é üçïüçüüçπ\n(—Ç—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ –∑ –ë–î –∞–±–æ API)")
    elif text == "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        await update.message.reply_text("–¢–≤–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üõí —â–µ –ø—É—Å—Ç—ñ.")
    elif text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
        await update.message.reply_text("‚ÑπÔ∏è –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ —â–æ–¥–Ω—è –∑ 10:00 –¥–æ 22:00")
    elif text == "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç–∏":
        await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω: +380123456789\nüìç –ê–¥—Ä–µ—Å–∞: –º. –¢–µ—Ä–Ω–æ–ø—ñ–ª—å")
    else:
        await update.message.reply_text("‚ùì –Ø —Ç–µ–±–µ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤, –≤–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é ‚¨áÔ∏è")

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    port = int(os.environ.get("PORT", 8080))
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )

if __name__ == "__main__":
    main()
