import logging
from services.sheets import get_menu_from_sheet
from services.telegram import tg_send_message, tg_send_photo
from models.user import set_state

logger = logging.getLogger("ferrik.budget")

def start_budget_search(chat_id):
    """–ü–æ—á–∏–Ω–∞—î –ø–æ—à—É–∫ —Å—Ç—Ä–∞–≤ –∑–∞ –±—é–¥–∂–µ—Ç–æ–º"""
    try:
        message = "üí∞ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –±—é–¥–∂–µ—Ç (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Å—É–º—É –≤ –≥—Ä–∏–≤–Ω—è—Ö):\n\n"
        message += "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>300</code> –∞–±–æ <code>150</code>"
        
        tg_send_message(chat_id, message)
        set_state(chat_id, "awaiting_budget")
        
    except Exception as e:
        logger.error(f"Error starting budget search for {chat_id}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –ø–æ—à—É–∫—É.")

def handle_budget_input(chat_id, budget_text):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–∏–π –±—é–¥–∂–µ—Ç —Ç–∞ –ø–æ–∫–∞–∑—É—î –ø—ñ–¥—Ö–æ–¥—è—â—ñ —Å—Ç—Ä–∞–≤–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º–æ –±—é–¥–∂–µ—Ç
        budget_str = budget_text.strip().replace(',', '.').replace(' ', '')
        budget = float(budget_str)
        
        if budget <= 0:
            tg_send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–µ —á–∏—Å–ª–æ.")
            return False
            
        if budget > 10000:
            tg_send_message(chat_id, "–¶–µ –¥—É–∂–µ –≤–µ–ª–∏–∫–∏–π –±—é–¥–∂–µ—Ç! –í–≤–µ–¥—ñ—Ç—å —Ä–µ–∞–ª—å–Ω—É —Å—É–º—É.")
            return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ–Ω—é
        menu_items = get_menu_from_sheet()
        if not menu_items:
            tg_send_message(chat_id, "–í–∏–±–∞—á—Ç–µ, –º–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.")
            return False
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—ñ–¥—Ö–æ–¥—è—â—ñ —Å—Ç—Ä–∞–≤–∏
        suitable_items = [
            item for item in menu_items 
            if item.get('active', True) and item.get('price', 0) <= budget
        ]
        
        if not suitable_items:
            min_price = min(
                item.get('price', 999) for item in menu_items 
                if item.get('active', True)
            )
            message = f"üòî –ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î —Å—Ç—Ä–∞–≤ —É –±—é–¥–∂–µ—Ç—ñ –¥–æ {budget:.0f} –≥—Ä–Ω.\n"
            message += f"–ù–∞–π–¥–µ—à–µ–≤—à–∞ –ø–æ–∑–∏—Ü—ñ—è: {min_price:.0f} –≥—Ä–Ω"
            tg_send_message(chat_id, message)
            return False
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º, –ø–æ—Ç—ñ–º –∑–∞ —Ü—ñ–Ω–æ—é
        suitable_items.sort(key=lambda x: (
            -float(x.get('rating', 0)), 
            x.get('price', 0)
        ))
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        show_budget_results(chat_id, budget, suitable_items)
        
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
        set_state(chat_id, "normal")
        return True
        
    except ValueError:
        tg_send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 250).")
        return False
    except Exception as e:
        logger.error(f"Error handling budget input for {chat_id}: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –±—é–¥–∂–µ—Ç—É.")
        return False

def show_budget_results(chat_id, budget, items):
    """–ü–æ–∫–∞–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞ –±—é–¥–∂–µ—Ç–æ–º"""
    try:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = f"üí∞ –ó–Ω–∞–π—à–æ–≤ {len(items)} —Å—Ç—Ä–∞–≤ —É –±—é–¥–∂–µ—Ç—ñ –¥–æ {budget:.0f} –≥—Ä–Ω:\n\n"
        tg_send_message(chat_id, header)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        for item in items[:10]:
            price = item.get('price', 0)
            name = item.get('name', 'N/A')
            description = item.get('description', '')
            rating = item.get('rating')
            category = item.get('category', '')
            
            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
            text = f"<b>{name}</b>\n"
            text += f"üí∞ <b>–¶—ñ–Ω–∞:</b> {price:.0f} –≥—Ä–Ω"
            
            if rating:
                stars = '‚≠ê' * int(float(rating))
                text += f"\n{stars} <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}/5"
            
            if category:
                text += f"\nüçΩÔ∏è <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {category}"
                
            if description:
                # –û–±—Ä—ñ–∑–∞—î–º–æ –æ–ø–∏—Å —è–∫—â–æ –¥–æ–≤–≥–∏–π
                desc = description[:100] + "..." if len(description) > 100 else description
                text += f"\nüìù {desc}"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            keyboard = {
                "inline_keyboard": [
                    [{"text": f"‚ûï –î–æ–¥–∞—Ç–∏ ({price:.0f} –≥—Ä–Ω)", 
                      "callback_data": f"add_item_{item.get('ID')}"}]
                ]
            }
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ —Ñ–æ—Ç–æ —è–∫—â–æ —î
            photo_url = item.get('photo', '').strip()
            if photo_url:
                tg_send_photo(chat_id, photo_url, text, reply_markup=keyboard)
            else:
                tg_send_message(chat_id, text, reply_markup=keyboard)
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        if len(items) > 10:
            footer = f"\nüìä –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à—ñ 10 –∑ {len(items)} –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Å—Ç—Ä–∞–≤."
            tg_send_message(chat_id, footer)
        
        # –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —Å—Ç—Ä–∞–≤ —è–∫—â–æ –±—é–¥–∂–µ—Ç –¥–æ–∑–≤–æ–ª—è—î
        suggest_combinations(chat_id, budget, items)
        
    except Exception as e:
        logger.error(f"Error showing budget results: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.")

def suggest_combinations(chat_id, budget, items):
    """–ü—Ä–æ–ø–æ–Ω—É—î –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —Å—Ç—Ä–∞–≤ –≤ —Ä–∞–º–∫–∞—Ö –±—é–¥–∂–µ—Ç—É"""
    try:
        # –®—É–∫–∞—î–º–æ —Ü—ñ–∫–∞–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó
        combinations = []
        
        # –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç—Ä–∞–≤–∞ + –∑–∞–∫—É—Å–∫–∞/—Å–∞–ª–∞—Ç
        main_dishes = [item for item in items if '–ø—ñ—Ü–∞' in item.get('name', '').lower() or '—Å—É—à—ñ' in item.get('name', '').lower()]
        salads = [item for item in items if '—Å–∞–ª–∞—Ç' in item.get('category', '').lower()]
        
        for main in main_dishes[:3]:
            for salad in salads[:2]:
                combo_price = main.get('price', 0) + salad.get('price', 0)
                if combo_price <= budget:
                    combinations.append({
                        'items': [main, salad],
                        'total': combo_price,
                        'savings': budget - combo_price
                    })
        
        if combinations:
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –µ–∫–æ–Ω–æ–º—ñ—î—é (–±—ñ–ª—å—à–∞ –µ–∫–æ–Ω–æ–º—ñ—è = –∫—Ä–∞—â–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è)
            combinations.sort(key=lambda x: -x['savings'])
            
            combo_text = "üçΩÔ∏è <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó:</b>\n\n"
            
            for i, combo in enumerate(combinations[:2], 1):
                items_names = [item.get('name') for item in combo['items']]
                combo_text += f"{i}. {' + '.join(items_names)}\n"
                combo_text += f"   üí∞ {combo['total']:.0f} –≥—Ä–Ω "
                combo_text += f"(–∑–∞–ª–∏—à–∏—Ç—å—Å—è {combo['savings']:.0f} –≥—Ä–Ω)\n\n"
            
            tg_send_message(chat_id, combo_text)
            
    except Exception as e:
        logger.error(f"Error suggesting combinations: {e}")

def get_price_ranges():
    """–û—Ç—Ä–∏–º—É—î –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ü—ñ–Ω–æ–≤—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏"""
    return {
        "üçî –ë—é–¥–∂–µ—Ç–Ω–æ": "–¥–æ 150 –≥—Ä–Ω",
        "üçï –°—Ç–∞–Ω–¥–∞—Ä—Ç": "150-300 –≥—Ä–Ω", 
        "üç£ –ü—Ä–µ–º—ñ—É–º": "300-500 –≥—Ä–Ω",
        "ü•Ç –î–µ–ª—é–∫—Å": "500+ –≥—Ä–Ω"
    }

def show_price_ranges(chat_id):
    """–ü–æ–∫–∞–∑—É—î –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ü—ñ–Ω–æ–≤—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏"""
    try:
        message = "üí∞ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ –±—é–¥–∂–µ—Ç–∏:</b>\n\n"
        
        ranges = get_price_ranges()
        keyboard = {"inline_keyboard": []}
        
        for emoji_name, price_range in ranges.items():
            message += f"{emoji_name}: {price_range}\n"
            # –í–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è callback
            if "–¥–æ 150" in price_range:
                callback_data = "budget_range_150"
            elif "150-300" in price_range:
                callback_data = "budget_range_300"
            elif "300-500" in price_range:
                callback_data = "budget_range_500"
            else:
                callback_data = "budget_range_1000"
                
            keyboard["inline_keyboard"].append([
                {"text": emoji_name, "callback_data": callback_data}
            ])
        
        message += "\n–ê–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é —Å—É–º—É:"
        keyboard["inline_keyboard"].append([
            {"text": "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤—ñ–π –±—é–¥–∂–µ—Ç", "callback_data": "custom_budget"}
        ])
        
        tg_send_message(chat_id, message, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing price ranges: {e}")
        tg_send_message(chat_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Ü—ñ–Ω–æ–≤–∏—Ö –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤.")

def handle_budget_range(chat_id, range_callback, callback_id):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ —Ü—ñ–Ω–æ–≤–æ–≥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É"""
    try:
        from services.telegram import tg_answer_callback
        
        range_map = {
            "budget_range_150": 150,
            "budget_range_300": 300,
            "budget_range_500": 500,
            "budget_range_1000": 1000
        }
        
        budget = range_map.get(range_callback)
        if budget:
            tg_answer_callback(callback_id, f"–ë—é–¥–∂–µ—Ç {budget} –≥—Ä–Ω –æ–±—Ä–∞–Ω–æ!")
            handle_budget_input(chat_id, str(budget))
        else:
            tg_answer_callback(callback_id, "–ù–µ–≤—ñ–¥–æ–º–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω")
            
    except Exception as e:
        logger.error(f"Error handling budget range: {e}")
        tg_answer_callback(callback_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω—É")