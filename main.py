"""
Hubsy Bot - Telegram Bot –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ
Secure Version –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º–∏

–ê–≤—Ç–æ—Ä: Claude AI + ferrik
–î–∞—Ç–∞: 2025-10-08
"""

import os
import sys
import logging
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .env
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)
logger.info("Starting Hubsy Bot (Secure Version)...")

# =============================================================================
# –Ü–ú–ü–û–†–¢ CONFIG
# =============================================================================

try:
    import bot_config as config
    
    # Backward compatibility aliases
    BOT_TOKEN = config.BOT_TOKEN
    WEBHOOK_SECRET = config.WEBHOOK_SECRET
    GOOGLE_SHEET_ID = config.GOOGLE_SHEET_ID
    SPREADSHEET_ID = config.GOOGLE_SHEET_ID  # Alias
    OPERATOR_CHAT_ID = config.OPERATOR_CHAT_ID
    
    logger.info("‚úÖ Config loaded successfully")
    
except ImportError as e:
    logger.critical(f"Config import failed: {e}")
    print(f"\nError: Cannot start without config\n")
    sys.exit(1)

# =============================================================================
# –Ü–ú–ü–û–†–¢–ò –°–ï–†–í–Ü–°–Ü–í
# =============================================================================

try:
    from services import telegram as tg_service
    from services import sheets as sheets_service
    from services import database as db_service
    
    # Gemini –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
    try:
        from services import gemini as ai_service
        AI_ENABLED = True
    except ImportError:
        logger.warning("Gemini service not available")
        AI_ENABLED = False
    
    logger.info("‚úÖ Services imported")
    
except ImportError as e:
    logger.error(f"Failed to import services: {e}")
    logger.error("Make sure all service files exist in services/ directory")
    sys.exit(1)

# =============================================================================
# FLASK APP
# =============================================================================

app = Flask(__name__)

# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü (–ø–æ—Å—Ç—É–ø–æ–≤–æ –º—ñ–≥—Ä—É—î–º–æ –Ω–∞ Redis)
# =============================================================================

from collections import defaultdict
from threading import RLock

# –°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}
user_states_lock = RLock()

# –ö–æ—Ä–∑–∏–Ω–∏
user_carts = defaultdict(dict)
user_carts_lock = RLock()

# –ö–µ—à –º–µ–Ω—é
menu_cache = []
menu_cache_lock = RLock()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
MAX_CART_ITEMS = getattr(config, 'MAX_CART_ITEMS', 50)
MAX_ITEM_QUANTITY = getattr(config, 'MAX_ITEM_QUANTITY', 99)

logger.info("‚úÖ Global variables initialized")

# =============================================================================
# HELPER –§–£–ù–ö–¶–Ü–á
# =============================================================================

def get_menu():
    """–û—Ç—Ä–∏–º—É—î –º–µ–Ω—é –∑ –∫–µ—à—É –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î"""
    global menu_cache
    
    with menu_cache_lock:
        if not menu_cache:
            logger.info("Loading menu from Google Sheets...")
            try:
                menu_cache = sheets_service.get_menu_from_sheet()
                logger.info(f"‚úÖ Menu loaded: {len(menu_cache)} items")
            except Exception as e:
                logger.error(f"Failed to load menu: {e}")
                return []
        
        return menu_cache


def refresh_menu():
    """–û–Ω–æ–≤–ª—é—î –∫–µ—à –º–µ–Ω—é"""
    global menu_cache
    
    try:
        with menu_cache_lock:
            menu_cache = sheets_service.get_menu_from_sheet()
        logger.info(f"‚úÖ Menu refreshed: {len(menu_cache)} items")
        return True
    except Exception as e:
        logger.error(f"Failed to refresh menu: {e}")
        return False


def get_categories():
    """–û—Ç—Ä–∏–º—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    menu = get_menu()
    categories = set()
    
    for item in menu:
        category = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ')
        if category:
            categories.add(category)
    
    return sorted(list(categories))


def get_items_by_category(category):
    """–û—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
    menu = get_menu()
    return [item for item in menu if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category]


def find_item_by_name(name):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞ –Ω–∞–∑–≤–æ—é"""
    menu = get_menu()
    for item in menu:
        if item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏') == name:
            return item
    return None


# =============================================================================
# –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø
# =============================================================================

import html

def safe_html_escape(text):
    """–ë–µ–∑–ø–µ—á–Ω–æ escape HTML"""
    if text is None:
        return ""
    return html.escape(str(text))


def format_item(item):
    """–§–æ—Ä–º–∞—Ç—É—î —Ç–æ–≤–∞—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    name = safe_html_escape(item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏'))
    category = safe_html_escape(item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'))
    price = safe_html_escape(item.get('–¶—ñ–Ω–∞', '0'))
    description = safe_html_escape(item.get('–û–ø–∏—Å', ''))
    
    text = f"<b>{name}</b>\n"
    text += f"<i>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</i> {category}\n"
    
    if description:
        text += f"{description}\n"
    
    text += f"<b>–¶—ñ–Ω–∞:</b> {price} –≥—Ä–Ω"
    
    return text


def get_cart_summary(chat_id):
    """–§–æ—Ä–º—É—î summary –∫–æ—Ä–∑–∏–Ω–∏"""
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    if not cart:
        return "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è"
    
    summary = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    
    for item_name, quantity in cart.items():
        item = find_item_by_name(item_name)
        if item:
            name = safe_html_escape(item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', 'N/A'))
            price = float(item.get('–¶—ñ–Ω–∞', 0))
            item_total = price * quantity
            total += item_total
            
            summary += f"‚ñ´Ô∏è <b>{name}</b>\n"
            summary += f"   {price:.2f} –≥—Ä–Ω x {quantity} = {item_total:.2f} –≥—Ä–Ω\n\n"
    
    summary += f"üí∞ <b>–†–∞–∑–æ–º:</b> {total:.2f} –≥—Ä–Ω"
    
    return summary


# =============================================================================
# TELEGRAM API
# =============================================================================

def send_message(chat_id, text, reply_markup=None, parse_mode='HTML'):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        return tg_service.tg_send_message(chat_id, text, reply_markup, parse_mode)
    except Exception as e:
        logger.error(f"Failed to send message to {chat_id}: {e}")
        return None


def create_main_keyboard():
    """–ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞"""
    return {
        "keyboard": [
            [{"text": "üìã –ú–µ–Ω—é"}, {"text": "üõí –ö–æ—Ä–∑–∏–Ω–∞"}],
            [{"text": "üîç –ü–æ—à—É–∫"}, {"text": "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }


def create_categories_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    categories = get_categories()
    
    keyboard = {"inline_keyboard": []}
    
    for category in categories:
        keyboard["inline_keyboard"].append([
            {"text": category, "callback_data": f"category:{category}"}
        ])
    
    keyboard["inline_keyboard"].append([
        {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_main"}
    ])
    
    return keyboard


def create_item_keyboard(item):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä—É"""
    item_name = item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', 'unknown')
    
    return {
        "inline_keyboard": [
            [{"text": "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", "callback_data": f"add:{item_name}"}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_categories"}]
        ]
    }


# =============================================================================
# –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î
# =============================================================================

def handle_start(chat_id):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = (
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ Hubsy Bot!\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é\n"
        "üõí –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
    )
    
    if AI_ENABLED:
        welcome_text += "üîç –ó–Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–≤–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI\n"
    
    welcome_text += "\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"
    
    send_message(chat_id, welcome_text, reply_markup=create_main_keyboard())
    
    with user_states_lock:
        user_states[chat_id] = None


def handle_menu(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    text = "üìã <b>–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:</b>"
    send_message(chat_id, text, reply_markup=create_categories_keyboard())


def handle_cart(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É"""
    summary = get_cart_summary(chat_id)
    
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    if cart:
        keyboard = {
            "keyboard": [
                [{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"}],
                [{"text": "üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É"}],
                [{"text": "üîô –ù–∞–∑–∞–¥"}]
            ],
            "resize_keyboard": True
        }
        send_message(chat_id, summary, reply_markup=keyboard)
    else:
        send_message(chat_id, summary, reply_markup=create_main_keyboard())


def handle_search(chat_id):
    """–ü–æ—à—É–∫"""
    if not AI_ENABLED:
        send_message(
            chat_id,
            "üîç –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –º–µ–Ω—é: /menu"
        )
        return
    
    text = (
        "üîç <b>–ü–æ—à—É–∫ —Å—Ç—Ä–∞–≤</b>\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ:\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: '—â–æ—Å—å –≥–æ—Å—Ç—Ä–µ' –∞–±–æ '–≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫—ñ —Å—Ç—Ä–∞–≤–∏'"
    )
    
    with user_states_lock:
        user_states[chat_id] = 'searching'
    
    send_message(chat_id, text)


def handle_help(chat_id):
    """–î–æ–ø–æ–º–æ–≥–∞"""
    text = (
        "‚ÑπÔ∏è <b>–î–æ–ø–æ–º–æ–≥–∞</b>\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é\n"
        "/cart - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É\n"
        "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
        "–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:\n"
        "1. –û–±–µ—Ä—ñ—Ç—å üìã –ú–µ–Ω—é\n"
        "2. –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é\n"
        "3. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –≤ üõí –ö–æ—Ä–∑–∏–Ω—É\n"
        "4. –û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
    )
    
    send_message(chat_id, text, reply_markup=create_main_keyboard())


def handle_cancel(chat_id):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel"""
    with user_states_lock:
        user_states[chat_id] = None
    
    send_message(chat_id, "‚úÖ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=create_main_keyboard())


# =============================================================================
# –û–ë–†–û–ë–ö–ê CALLBACK QUERIES
# =============================================================================

def handle_callback_category(chat_id, category):
    """–í–∏–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"""
    items = get_items_by_category(category)
    
    if not items:
        send_message(chat_id, f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category}' –ø–æ—Ä–æ–∂–Ω—è")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä
    item = items[0]
    text = format_item(item)
    
    keyboard = create_item_keyboard(item)
    
    if len(items) > 1:
        keyboard["inline_keyboard"].insert(1, [
            {"text": "‚¨ÖÔ∏è", "callback_data": f"prev:{category}:0"},
            {"text": f"1/{len(items)}", "callback_data": "noop"},
            {"text": "‚û°Ô∏è", "callback_data": f"next:{category}:0"}
        ])
    
    send_message(chat_id, text, reply_markup=keyboard)


def handle_callback_add_to_cart(chat_id, item_name):
    """–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    item = find_item_by_name(item_name)
    
    if not item:
        send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    with user_carts_lock:
        cart = user_carts[chat_id]
        
        if len(cart) >= MAX_CART_ITEMS:
            send_message(chat_id, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_CART_ITEMS} —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–æ—Ä–∑–∏–Ω—ñ")
            return
        
        current_quantity = cart.get(item_name, 0)
        
        if current_quantity >= MAX_ITEM_QUANTITY:
            send_message(chat_id, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_ITEM_QUANTITY} —à—Ç –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É")
            return
        
        cart[item_name] = current_quantity + 1
    
    send_message(chat_id, f"‚úÖ {item_name} –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")


# =============================================================================
# CHECKOUT
# =============================================================================

def handle_checkout_start(chat_id):
    """–ü–æ—á–∞—Ç–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"""
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    if not cart:
        send_message(chat_id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è", reply_markup=create_main_keyboard())
        return
    
    text = "üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
    
    keyboard = {
        "keyboard": [[
            {"text": "üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", "request_contact": True}
        ]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }
    
    with user_states_lock:
        user_states[chat_id] = 'awaiting_contact'
    
    send_message(chat_id, text, reply_markup=keyboard)


def handle_contact_received(chat_id, contact):
    """–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç"""
    phone = contact.get('phone_number')
    
    if not phone:
        send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä")
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    with user_states_lock:
        if chat_id not in user_states:
            user_states[chat_id] = {}
        if isinstance(user_states[chat_id], dict):
            user_states[chat_id]['phone'] = phone
        else:
            user_states[chat_id] = {'phone': phone}
    
    text = "üìç –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏"
    
    with user_states_lock:
        user_states[chat_id] = 'awaiting_address'
    
    send_message(chat_id, text)


def handle_address_received(chat_id, address):
    """–û—Ç—Ä–∏–º–∞–Ω–æ –∞–¥—Ä–µ—Å—É"""
    if len(address) < 10:
        send_message(chat_id, "‚ùå –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    
    # –§—ñ–Ω–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    summary = get_cart_summary(chat_id)
    
    # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    phone = "N/A"
    with user_states_lock:
        state_data = user_states.get(chat_id, {})
        if isinstance(state_data, dict):
            phone = state_data.get('phone', 'N/A')
    
    text = f"{summary}\n\n"
    text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
    text += f"üìç –ê–¥—Ä–µ—Å–∞: {safe_html_escape(address)}\n\n"
    text += "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?"
    
    keyboard = {
        "keyboard": [
            [{"text": "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"}],
            [{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]
        ],
        "resize_keyboard": True
    }
    
    # –ó–±–µ—Ä–µ–≥—Ç–∏ –∞–¥—Ä–µ—Å—É
    with user_states_lock:
        state_data = user_states.get(chat_id, {})
        if isinstance(state_data, dict):
            state_data['address'] = address
            user_states[chat_id] = 'awaiting_confirmation'
        else:
            user_states[chat_id] = {'address': address, 'state': 'awaiting_confirmation'}
    
    send_message(chat_id, text, reply_markup=keyboard)


def handle_order_confirmation(chat_id):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    if not cart:
        send_message(chat_id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è")
        return
    
    try:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏
        contact_info = {}
        with user_states_lock:
            state_data = user_states.get(chat_id, {})
            if isinstance(state_data, dict):
                contact_info = state_data
        
        phone = contact_info.get('phone', 'N/A')
        address = contact_info.get('address', 'N/A')
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ total
        total = 0
        for item_name, quantity in cart.items():
            item = find_item_by_name(item_name)
            if item:
                price = float(item.get('–¶—ñ–Ω–∞', 0))
                total += price * quantity
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ database
        order_id = db_service.save_order(
            chat_id=chat_id,
            cart=cart,
            contact_info={'phone': phone, 'address': address},
            total=str(total)
        )
        
        if not order_id:
            raise Exception("Database save failed")
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
        with user_carts_lock:
            user_carts[chat_id] = {}
        
        with user_states_lock:
            user_states[chat_id] = None
        
        # Sheets sync (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        try:
            sheets_service.save_order_to_sheets(order_id, cart, contact_info)
        except Exception as e:
            logger.error(f"Sheets sync failed: {e}")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        if OPERATOR_CHAT_ID:
            try:
                operator_msg = f"üÜï <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}</b>\n\n"
                operator_msg += get_cart_summary(chat_id)
                operator_msg += f"\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìç –ê–¥—Ä–µ—Å–∞: {address}"
                
                send_message(OPERATOR_CHAT_ID, operator_msg)
            except Exception as e:
                logger.error(f"Failed to notify operator: {e}")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        user_msg = f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
        user_msg += f"üí∞ –°—É–º–∞: {total:.2f} –≥—Ä–Ω\n\n"
        user_msg += "–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n–î—è–∫—É—î–º–æ! üéâ"
        
        send_message(chat_id, user_msg, reply_markup=create_main_keyboard())
        
        logger.info(f"‚úÖ Order {order_id} created for chat {chat_id}")
        
    except Exception as e:
        logger.error(f"Checkout failed: {e}")
        send_message(
            chat_id,
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=create_main_keyboard()
        )


# =============================================================================
# WEBHOOK HANDLER
# =============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ secret
    received_secret = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
    
    if received_secret != WEBHOOK_SECRET:
        logger.warning(f"‚ö†Ô∏è  Webhook auth failed from {request.remote_addr}")
        return jsonify({"error": "Unauthorized"}), 401
    
    try:
        update = request.get_json()
        
        if not update:
            return jsonify({"status": "ok"}), 200
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            
            # –ö–æ–º–∞–Ω–¥–∏
            if 'text' in message:
                text = message['text']
                
                if text.startswith('/'):
                    if text == '/start':
                        handle_start(chat_id)
                    elif text == '/menu':
                        handle_menu(chat_id)
                    elif text == '/cart':
                        handle_cart(chat_id)
                    elif text == '/help':
                        handle_help(chat_id)
                    elif text == '/cancel':
                        handle_cancel(chat_id)
                    else:
                        send_message(chat_id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏")
                
                else:
                    # –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç–∞–Ω—É
                    current_state = user_states.get(chat_id)
                    
                    if current_state == 'searching' and AI_ENABLED:
                        # AI –ø–æ—à—É–∫
                        try:
                            results = ai_service.search_menu(text, get_menu())
                            
                            if results:
                                send_message(chat_id, f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:")
                                
                                for item in results[:5]:
                                    item_text = format_item(item)
                                    send_message(chat_id, item_text, reply_markup=create_item_keyboard(item))
                            else:
                                send_message(chat_id, "üòî –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                            
                            with user_states_lock:
                                user_states[chat_id] = None
                            
                            send_message(chat_id, "–©–æ –¥–∞–ª—ñ?", reply_markup=create_main_keyboard())
                        except Exception as e:
                            logger.error(f"Search failed: {e}")
                            send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É")
                    
                    elif current_state == 'awaiting_address':
                        handle_address_received(chat_id, text)
                    
                    elif current_state == 'awaiting_confirmation':
                        if text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
                            handle_order_confirmation(chat_id)
                        elif text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
                            handle_cancel(chat_id)
                    
                    else:
                        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
                        if text == "üìã –ú–µ–Ω—é":
                            handle_menu(chat_id)
                        elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
                            handle_cart(chat_id)
                        elif text == "üîç –ü–æ—à—É–∫":
                            handle_search(chat_id)
                        elif text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞":
                            handle_help(chat_id)
                        elif text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
                            handle_checkout_start(chat_id)
                        elif text == "üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É":
                            with user_carts_lock:
                                user_carts[chat_id] = {}
                            send_message(chat_id, "‚úÖ –ö–æ—Ä–∑–∏–Ω—É –æ—á–∏—â–µ–Ω–æ", reply_markup=create_main_keyboard())
                        elif text == "üîô –ù–∞–∑–∞–¥":
                            handle_start(chat_id)
                        else:
                            send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é", reply_markup=create_main_keyboard())
            
            # –ö–æ–Ω—Ç–∞–∫—Ç
            elif 'contact' in message:
                handle_contact_received(chat_id, message['contact'])
        
        # Callback queries
        elif 'callback_query' in update:
            callback = update['callback_query']
            callback_id = callback['id']
            chat_id = callback['message']['chat']['id']
            data = callback['data']
            
            # –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ callback
            tg_service.tg_answer_callback_query(callback_id)
            
            if data.startswith('category:'):
                category = data.split(':', 1)[1]
                handle_callback_category(chat_id, category)
            
            elif data.startswith('add:'):
                item_name = data.split(':', 1)[1]
                handle_callback_add_to_cart(chat_id, item_name)
            
            elif data == 'back_to_categories':
                handle_menu(chat_id)
            
            elif data == 'back_to_main':
                handle_start(chat_id)
        
        return jsonify({"status": "ok"}), 200
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({"status": "error"}), 500


# =============================================================================
# HEALTH & ADMIN ENDPOINTS
# =============================================================================

@app.route('/health', methods=['GET'])
def health_check():
    """Health check"""
    try:
        menu_ok = len(get_menu()) > 0
        
        return jsonify({
            "status": "healthy" if menu_ok else "degraded",
            "menu_items": len(menu_cache),
            "version": "2.0.0-secure"
        }), 200 if menu_ok else 503
        
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return jsonify({"status": "unhealthy", "error": str(e)}), 503


@app.route('/admin/refresh_menu', methods=['POST'])
def admin_refresh_menu():
    """–û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é"""
    success = refresh_menu()
    
    if success:
        return jsonify({"status": "ok", "items": len(menu_cache)})
    else:
        return jsonify({"status": "error"}), 500


@app.route('/', methods=['GET'])
def index():
    """Root endpoint"""
    return jsonify({
        "service": "Hubsy Bot",
        "status": "running",
        "version": "2.0.0-secure"
    })


# =============================================================================
# –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
# =============================================================================

def initialize_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
    logger.info("=" * 60)
    logger.info("INITIALIZING HUBSY BOT")
    logger.info("=" * 60)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é
    logger.info("Loading menu...")
    menu = get_menu()
    logger.info(f"‚úÖ Menu loaded: {len(menu)} items")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ webhook (—è–∫—â–æ —î URL)
    if hasattr(config, 'WEBHOOK_URL') and config.WEBHOOK_URL:
        logger.info("Setting up webhook...")
        try:
            success = tg_service.setup_webhook_safe()
            if success:
                logger.info("‚úÖ Webhook configured")
            else:
                logger.warning("‚ö†Ô∏è  Webhook setup failed (non-critical)")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Webhook setup error: {e}")
    else:
        logger.warning("‚ö†Ô∏è  WEBHOOK_URL not set, skipping webhook setup")
    
    logger.info("=" * 60)
    logger.info("‚úÖ BOT INITIALIZED SUCCESSFULLY")
    logger.info("=" * 60)


# =============================================================================
# –ó–ê–ü–£–°–ö
# =============================================================================

if __name__ == '__main__':
    try:
        initialize_bot()
        
        port = getattr(config, 'PORT', 10000)
        
        logger.info(f"Starting server on port {port}")
        
        app.run(
            host='0.0.0.0',
            port=port,
            debug=getattr(config, 'FLASK_DEBUG', False)
        )
        
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Failed to start: {e}")
        raise
