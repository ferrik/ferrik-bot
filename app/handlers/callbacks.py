"""
üîò –û–±—Ä–æ–±–Ω–∏–∫ callback queries (inline –∫–Ω–æ–ø–∫–∏)
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

from app.utils.validators import format_order_summary
from app.utils.session import (
    get_user_session,
    update_user_session,
    get_user_cart,
    clear_user_cart
)

logger = logging.getLogger(__name__)


async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ callback queries
    """
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    user = query.from_user
    
    logger.info(f"üë§ User {user.id} callback: {callback_data}")
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è callbacks
    if callback_data == "show_menu":
        await show_menu_callback(update, context)
    
    elif callback_data == "show_cart":
        await show_cart_callback(update, context)
    
    elif callback_data == "show_help":
        await show_help_callback(update, context)
    
    elif callback_data == "clear_cart":
        await clear_cart_callback(update, context)
    
    elif callback_data == "checkout":
        await checkout_callback(update, context)
    
    elif callback_data == "confirm_order":
        await confirm_order_callback(update, context)
    
    elif callback_data == "cancel_order":
        await cancel_order_callback(update, context)
    
    else:
        await query.edit_message_text("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


async def show_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    query = update.callback_query
    sheets_service = context.bot_data.get('sheets_service')
    
    if not sheets_service:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    try:
        menu_items = sheets_service.get_menu()
        
        if not menu_items:
            await query.edit_message_text("üòî –ú–µ–Ω—é –Ω–∞—Ä–∞–∑—ñ –ø–æ—Ä–æ–∂–Ω—î")
            return
        
        # –§–æ—Ä–º—É—î–º–æ –º–µ–Ω—é
        message_parts = ["üìã **–ú–ï–ù–Æ**\n"]
        
        categories = {}
        for item in menu_items:
            category = item.get('category', '–Ü–Ω—à–µ')
            if category not in categories:
                categories[category] = []
            categories[category].append(item)
        
        for category, items in categories.items():
            message_parts.append(f"\n**{category}**")
            for item in items[:10]:  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                name = item.get('name', 'Unknown')
                price = item.get('price', 0)
                message_parts.append(f"üîπ {name} ‚Äî {price} –≥—Ä–Ω")
        
        message_parts.append("\nüí¨ –ù–∞–ø–∏—à—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏!")
        
        menu_text = "\n".join(message_parts)
        
        await query.edit_message_text(
            menu_text,
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"‚ùå Error in show_menu: {e}")
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é")


async def show_cart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫"""
    query = update.callback_query
    user = query.from_user
    
    cart = get_user_cart(user.id)
    
    if not cart or len(cart) == 0:
        keyboard = [[
            InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="show_menu")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n\n"
            "–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –∑ –º–µ–Ω—é!",
            reply_markup=reply_markup
        )
        return
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    order_data = {'items': cart}
    cart_text = format_order_summary(order_data)
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    keyboard = [
        [
            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear_cart"),
            InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏", callback_data="checkout")
        ],
        [
            InlineKeyboardButton("üìã –î–æ–¥–∞—Ç–∏ —â–µ", callback_data="show_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        cart_text,
        reply_markup=reply_markup
    )


async def show_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"""
    query = update.callback_query
    
    help_text = (
        "üìñ **–î–û–ü–û–ú–û–ì–ê**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n"
        "üîπ /start ‚Äî –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
        "üîπ /menu ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é\n"
        "üîπ /cart ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫\n"
        "üîπ /order ‚Äî –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "üîπ /help ‚Äî –î–æ–≤—ñ–¥–∫–∞\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏!"
    )
    
    keyboard = [[
        InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu"),
        InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def clear_cart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫"""
    query = update.callback_query
    user = query.from_user
    
    clear_user_cart(user.id)
    
    keyboard = [[
        InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="show_menu")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!\n\n"
        "–î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –∑ –º–µ–Ω—é.",
        reply_markup=reply_markup
    )


async def checkout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    query = update.callback_query
    user = query.from_user
    
    cart = get_user_cart(user.id)
    
    if not cart or len(cart) == 0:
        await query.edit_message_text("üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    order_data = {'items': cart}
    summary = format_order_summary(order_data)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    await query.edit_message_text(
        f"{summary}\n\n"
        "üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
        "(—Ñ–æ—Ä–º–∞—Ç: +380501234567 –∞–±–æ 0501234567)"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
    update_user_session(user.id, {
        'state': 'awaiting_phone',
        'order_data': order_data
    })


async def confirm_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    query = update.callback_query
    user = query.from_user
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    session = get_user_session(user.id)
    order_data = session.get('order_data', {})
    
    sheets_service = context.bot_data.get('sheets_service')
    
    if not sheets_service:
        await query.edit_message_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    try:
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
        order_data['user_id'] = user.id
        order_data['username'] = user.username or 'N/A'
        order_data['timestamp'] = datetime.now().isoformat()
        order_data['status'] = '–ù–æ–≤–∏–π'
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Google Sheets
        order_id = sheets_service.save_order(order_data)
        
        # –û—á–∏—â—É—î–º–æ –∫–æ—à–∏–∫ —Ç–∞ —Å–µ—Å—ñ—é
        clear_user_cart(user.id)
        update_user_session(user.id, {'state': 'idle'})
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        success_text = (
            "‚úÖ **–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–û!**\n\n"
            f"üìù –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{order_id}\n\n"
            "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!\n\n"
            "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏:\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone', 'N/A')}\n"
            f"–ê–¥—Ä–µ—Å–∞: {order_data.get('address', 'N/A')}\n\n"
            "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! üéâ"
        )
        
        keyboard = [[
            InlineKeyboardButton("üìã –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="show_menu")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            success_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        logger.info(f"‚úÖ Order #{order_id} created by user {user.id}")
        
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ–≤ (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
        telegram_config = context.bot_data.get('telegram_config')
        if telegram_config and telegram_config.admin_ids:
            admin_notification = (
                f"üîî **–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}**\n\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user.username or user.id}\n"
                f"{format_order_summary(order_data)}"
            )
            
            for admin_id in telegram_config.admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=admin_notification,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"‚ùå Failed to notify admin {admin_id}: {e}")
    
    except Exception as e:
        logger.error(f"‚ùå Error creating order: {e}")
        await query.edit_message_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏."
        )


async def cancel_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    query = update.callback_query
    user = query.from_user
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
    update_user_session(user.id, {'state': 'idle'})
    
    keyboard = [[
        InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu"),
        InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
        "–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=reply_markup
    )
