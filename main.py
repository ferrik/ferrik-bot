import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
logger.info("üöÄ Starting FerrikFootBot...")

try:
    # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü—ñ –º–æ–¥—É–ª—ñ —Ç–∞ –∑–º—ñ–Ω–Ω—ñ —ñ—Å–Ω—É—é—Ç—å
    from config import BOT_TOKEN, GEMINI_API_KEY, SPREADSHEET_ID, ENABLE_GOOGLE_SHEETS
    logger.info("‚úÖ Config imported successfully")
except Exception as e:
    logger.error(f"‚ùå Config import error: {e}")

try:
    from services.sheets import init_gspread_client, get_menu_from_sheet, save_order_to_sheets, is_sheets_connected
    logger.info("‚úÖ Sheets service imported")
except Exception as e:
    logger.error(f"‚ùå Sheets import error: {e}")

try:
    from services.gemini import init_gemini_client, get_ai_response, is_gemini_connected
    logger.info("‚úÖ Gemini service imported")
except Exception as e:
    logger.error(f"‚ùå Gemini import error: {e}")

try:
    from models.user import init_user_db
    logger.info("‚úÖ User model imported")
except Exception as e:
    logger.error(f"‚ùå User model import error: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
sheets_client = None
menu_cache = {}
user_db = False # –§–ª–∞–≥ —Å—Ç–∞–Ω—É
gemini_client = None


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ (DB, Sheets, Gemini)"""
    global sheets_client, menu_cache, user_db, gemini_client

    logger.info("üõ†Ô∏è Initializing services...")
    
    # 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è config —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    import config
    config.log_config()
    
    # 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    try:
        if init_user_db():
            user_db = True  # –§–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            logger.info("‚úÖ User DB initialized.")
        else:
            logger.error("‚ùå User DB initialization failed.")
    except Exception as e:
        logger.exception(f"‚ùå User DB startup error: {e}")

    # 3. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
    if ENABLE_GOOGLE_SHEETS:
        try:
            sheets_client = init_gspread_client()
            if is_sheets_connected():
                logger.info("‚úÖ Google Sheets client initialized.")
                
                # --- –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ü–û–ú–ò–õ–ö–ò TypeError ---
                # –í–∏–¥–∞–ª–µ–Ω–æ 'force=True', –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ —Å–ø—Ä–∏—á–∏–Ω–∏–ª–æ TypeError.
                # –¢–µ–ø–µ—Ä —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ª–∏—à–µ –∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º sheets_client.
                menu_data = get_menu_from_sheet(sheets_client)
                menu_cache = menu_data if menu_data is not None else {}
                logger.info(f"‚úÖ Menu cached: {len(menu_cache)} items.")
            else:
                logger.warning("‚ö†Ô∏è Google Sheets client could not connect.")
        except Exception as e:
            # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ, —â–æ–± –±–æ—Ç –Ω–µ –≤–ø–∞–≤, –∞–ª–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –º–µ–Ω—é –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
            logger.exception(f"‚ùå Critical startup error during Google Sheets initialization: {e}")
    else:
        logger.info("‚è≠Ô∏è Google Sheets disabled by config.")
        
    # 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Gemini AI
    try:
        gemini_client = init_gemini_client()
        if is_gemini_connected():
            logger.info("‚úÖ Gemini client initialized.")
        else:
            logger.warning("‚ö†Ô∏è Gemini client could not connect.")
    except Exception as e:
        logger.exception(f"‚ùå Gemini startup error: {e}")


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É
def requires_db(func):
    def wrapper(*args, **kwargs):
        if not user_db:
            # –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è send_message, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ chat_id - –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
            chat_id = kwargs.get('chat_id') or args[0] if args else None
            send_message(chat_id, "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return None
        return func(*args, **kwargs)
    return wrapper

def requires_sheets(func):
    def wrapper(*args, **kwargs):
        if not menu_cache:
            chat_id = kwargs.get('chat_id') or args[0] if args else None
            send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return None
        return func(*args, **kwargs)
    return wrapper
    
# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—Å–ø—Ä–æ—â–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞)
def send_message(chat_id, text, reply_markup=None):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram API."""
    import requests
    try:
        bot_token = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("BOT_TOKEN not found in send_message")
            return None
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        if reply_markup:
            import json
            payload["reply_markup"] = json.dumps(reply_markup)
        
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå Send message error: {e}")
        return None

# –†–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π
# ... [handle_start, show_menu, show_contacts, show_recommendations, process_callback_query] ...

def handle_start(chat_id):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    welcome_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç!\n\n"
        "–Ø <b>FoodBot</b> ‚Äì —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ.\n\n"
        "–û–±–µ—Ä–∏ –¥—ñ—é –≤ –º–µ–Ω—é:"
    )
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üìñ –ú–µ–Ω—é", "callback_data": "menu"}],
            [{"text": "üõí –ö–æ—Ä–∑–∏–Ω–∞", "callback_data": "cart"}, {"text": "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è", "callback_data": "recommend"}]
        ]
    }
    
    send_message(chat_id, welcome_text, reply_markup=keyboard)


def show_menu(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    if not menu_cache:
        send_message(chat_id, "–ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.")
        return

    menu_text = "<b>üìñ –ù–∞—à–µ –ú–µ–Ω—é:</b>\n\n"
    
    # –°–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞: –≤–∏–≤–æ–¥–∏–º–æ –ø–µ—Ä—à—ñ 5 —Å—Ç—Ä–∞–≤
    items = list(menu_cache.values())
    for item in items[:5]:
        menu_text += f"üçï <b>{item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}</b> - {item.get('price', '?')} –≥—Ä–Ω\n"
    
    menu_text += "\n... —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /full_menu –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É."
    send_message(chat_id, menu_text)


def show_contacts(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏"""
    contacts_text = """
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏</b>

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380XX XXX XX XX
üìß Email: info@ferrikfoot.com
üìç –ê–¥—Ä–µ—Å–∞: –º. –ö–∏—ó–≤, –≤—É–ª. –ü—Ä–∏–∫–ª–∞–¥–Ω–∞, 1
"""
    send_message(chat_id, contacts_text)


def show_recommendations(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    # ... (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ get_ai_response) ...
    send_message(chat_id, "üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>\n\nAI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!")


def process_callback_query(callback_query):
    """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    try:
        chat_id = callback_query["message"]["chat"]["id"]
        data = callback_query["data"]
        
        if data == "menu":
            show_menu(chat_id)
        elif data == "cart":
            send_message(chat_id, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")
        elif data == "recommend":
            show_recommendations(chat_id)
        else:
            send_message(chat_id, f"–û–±—Ä–∞–Ω–æ: {data}")

    except Exception as e:
        logger.error(f"Callback error: {e}")


def process_message(message):
    """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        chat_id = message["chat"]["id"]
        text = message.get("text", "")
        
        if text == "/start":
            handle_start(chat_id)
        elif text == "/menu" or text.lower() in ["–º–µ–Ω—é", "–ø–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"]:
            show_menu(chat_id)
        elif text == "/contacts" or text.lower() in ["–∫–æ–Ω—Ç–∞–∫—Ç–∏", "–∞–¥—Ä–µ—Å–∞"]:
            show_contacts(chat_id)
        else:
            send_message(chat_id, f"–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: <b>{text}</b>. –°–ø—Ä–æ–±—É–π—Ç–µ /start –∞–±–æ /menu.")

    except Exception as e:
        logger.error(f"Message processing error: {e}")
        send_message(message["chat"]["id"], "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.")


@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –≤–µ–±—Ö—É–∫—ñ–≤ –≤—ñ–¥ Telegram"""
    if request.method == 'POST':
        update = request.get_json()
        if not update:
            logger.warning("Empty update received")
            return jsonify({'status': 'ok'})

        if 'message' in update:
            process_message(update['message'])
        elif 'callback_query' in update:
            process_callback_query(update['callback_query'])
            
        return jsonify({'status': 'ok'})
    return jsonify({'status': 'method not allowed'}), 405


def answer_callback(callback_id, text):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ callback query (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—É—Ç –∞–±–æ —ñ–º–ø–æ—Ä—Ç –∑ services.telegram
    pass


# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404


@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal error: {error}")
    return jsonify({"error": "Internal server error"}), 500


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É
with app.app_context():
    init_services()


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    # –£ production-—Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ (Render) gunicorn –∑–∞–ø—É—Å–∫–∞—î –¥–æ–¥–∞—Ç–æ–∫, —Ç–æ–º—É —Ü–µ–π –±–ª–æ–∫ 
    # –∑–∞–∑–≤–∏—á–∞–π –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è. –£ development –π–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏.
    logger.warning("Running Flask in development mode (should be gunicorn in production)")
    app.run(host="0.0.0.0", port=port, debug=True)
