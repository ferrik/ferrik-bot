import os
import logging
from flask import Flask, request, jsonify
from werkzeug.exceptions import BadRequest
import json
from datetime import datetime
import requests

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ - –¥–µ–∫–ª–∞—Ä—É—é—Ç—å—Å—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É
menu_cache = {}
sheets_client = None
tg_send_message = None
get_gemini_recommendation = None
init_sheets = None
get_menu_from_sheets = None
create_user = None
get_user = None

def create_fallback_send_message():
    """–°—Ç–≤–æ—Ä—é—î fallback —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    def fallback_send(chat_id, text, keyboard=None, parse_mode="Markdown"):
        try:
            bot_token = os.environ.get('BOT_TOKEN')
            if not bot_token:
                logger.error("BOT_TOKEN not found")
                return None
                
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            
            if keyboard:
                payload["reply_markup"] = json.dumps(keyboard)
            
            response = requests.post(url, data=payload, timeout=10)
            
            if response.status_code == 200:
                logger.info(f"Fallback message sent to {chat_id}")
                return response.json()
            else:
                logger.error(f"Fallback send failed: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"Fallback send error: {e}")
            return None
    
    return fallback_send

def safe_import():
    """–ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    global tg_send_message, get_gemini_recommendation, init_sheets, get_menu_from_sheets, create_user, get_user
    
    try:
        # –Ü–º–ø–æ—Ä—Ç–∏ –∑ config
        from config import BOT_TOKEN, GEMINI_API_KEY, SPREADSHEET_ID
        logger.info("Config imported successfully")
    except Exception as e:
        logger.error(f"Config import error: {e}")
        # Fallback to environment variables - –≤–æ–Ω–∏ —ñ —Ç–∞–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è
    
    try:
        from services.telegram import send_message as tg_send_message
        logger.info("Telegram service imported")
    except Exception as e:
        logger.error(f"Telegram import error: {e}")
        # Fallback function
        tg_send_message = create_fallback_send_message()
    
    try:
        from services.gemini import get_gemini_recommendation
        logger.info("Gemini service imported")
    except Exception as e:
        logger.error(f"Gemini import error: {e}")
        get_gemini_recommendation = lambda x: "AI —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    
    try:
        from services.sheets import init_sheets, get_menu_from_sheets
        logger.info("Sheets service imported")
    except Exception as e:
        logger.error(f"Sheets import error: {e}")
        init_sheets = lambda: None
        get_menu_from_sheets = lambda: {}
    
    try:
        from models.user import create_user, get_user
        logger.info("User model imported")
    except Exception as e:
        logger.error(f"User model import error: {e}")
        create_user = lambda x, y: True
        get_user = lambda x: None

def initialize_bot():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –±–æ—Ç–∞"""
    global menu_cache, sheets_client
    
    logger.info("üöÄ FerrikFootBot starting initialization...")
    
    try:
        # –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
        safe_import()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
        try:
            sheets_client = init_sheets()
            logger.info("‚úÖ Google Sheets connected")
        except Exception as e:
            logger.warning(f"Sheets connection failed: {e}")
            sheets_client = None
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
        try:
            menu_cache = get_menu_from_sheets()
            logger.info(f"‚úÖ Menu cached: {len(menu_cache)} items")
        except Exception as e:
            logger.warning(f"Menu loading failed: {e}")
            menu_cache = {}
        
        logger.info("üéâ FerrikFootBot initialization completed!")
        
    except Exception as e:
        logger.error(f"‚ùå Initialization failed: {e}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
initialize_bot()

@app.route('/', methods=['GET'])
def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "FerrikFootBot",
        "menu_items": len(menu_cache) if menu_cache else 0
    }), 200

@app.route('/keep-alive', methods=['GET'])
def keep_alive():
    """Endpoint –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É"""
    return jsonify({
        "status": "alive",
        "timestamp": datetime.now().isoformat(),
        "uptime": "service is running",
        "cache_status": "active" if menu_cache else "empty"
    }), 200

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Telegram"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"status": "error", "message": "No data"}), 400
        
        logger.info(f"Received update: {data.get('update_id', 'unknown')}")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if "message" in data:
            process_message(data["message"])
        elif "callback_query" in data:
            process_callback_query(data["callback_query"])
            
        return jsonify({"status": "ok"})
        
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return jsonify({"status": "error", "message": "Internal error"}), 500

def process_message(message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    chat_id = None
    try:
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]
        username = message["from"].get("first_name", "User")
        text = message.get("text", "")
        
        logger.info(f"Processing message from {username} ({user_id}): {text}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            user = get_user(user_id)
            if not user:
                create_user(user_id, username)
                logger.info(f"Created new user: {user_id}")
        except Exception as e:
            logger.error(f"User management error: {e}")
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
        if text == "/start":
            greeting_text = f"""
üçî –í—ñ—Ç–∞—î–º–æ –≤ FerrikFoot! 

–ü—Ä–∏–≤—ñ—Ç, {username}! üëã

–Ø –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–º–∞—á–Ω–æ—ó —ó–∂—ñ. 
–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?
"""
            
            keyboard = {
                "keyboard": [
                    [{"text": "üçî –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É"}],
                    [{"text": "üìã –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"}, {"text": "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"}],
                    [{"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"}, {"text": "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"}]
                ],
                "resize_keyboard": True,
                "one_time_keyboard": False
            }
            
            try:
                tg_send_message(chat_id, greeting_text, keyboard=keyboard)
            except Exception as e:
                logger.error(f"Error sending greeting: {e}")
            return
        
        # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if text == "üçî –ó–∞–º–æ–≤–∏—Ç–∏ —ó–∂—É":
            show_menu(chat_id)
        elif text == "üìã –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
            show_orders(chat_id)
        elif text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è":
            show_info(chat_id)
        elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏":
            show_contacts(chat_id)
        elif text == "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó":
            show_recommendations(chat_id)
        else:
            handle_unknown_message(chat_id, text)
        
    except Exception as e:
        logger.error(f"Error in process_message: {e}")
        if chat_id:
            try:
                tg_send_message(chat_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            except:
                logger.error("Failed to send error message")

def handle_unknown_message(chat_id, text):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ AI
        prompt = f"""
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤: "{text}"
–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É FerrikFoot. –î–∞–π –∫–æ—Ä–æ—Ç–∫—É –∫–æ—Ä–∏—Å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
"""
        response = get_gemini_recommendation(prompt)
        
        if response and "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π" not in response:
            tg_send_message(chat_id, response)
        else:
            tg_send_message(chat_id, "–ù–µ —Ä–æ–∑—É–º—ñ—é. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /help")
            
    except Exception as e:
        logger.error(f"Error handling unknown message: {e}")
        tg_send_message(chat_id, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó")

def show_menu(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    global menu_cache
    
    try:
        if not menu_cache:
            # –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
            menu_cache = get_menu_from_sheets()
    except:
        pass
    
    if not menu_cache:
        tg_send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    menu_text = "üçΩÔ∏è **–ù–∞—à–µ –º–µ–Ω—é:**\n\n"
    for item_id, item in menu_cache.items():
        if item.get('active', True):
            menu_text += f"üçï **{item['name']}**\n"
            menu_text += f"üí∞ –¶—ñ–Ω–∞: {item['price']} –≥—Ä–Ω\n"
            if item.get('description'):
                menu_text += f"üìù {item['description']}\n"
            menu_text += "\n"
    
    tg_send_message(chat_id, menu_text)

def show_orders(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    tg_send_message(chat_id, "üìã **–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n\n–ü–æ–∫–∏ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î.")

def show_info(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"""
    info_text = """
‚ÑπÔ∏è **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ FerrikFoot**

üïí **–ß–∞—Å —Ä–æ–±–æ—Ç–∏:** –ü–Ω-–ù–¥: 10:00 - 22:00
üöö **–î–æ—Å—Ç–∞–≤–∫–∞:** –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –≤—ñ–¥ 300 –≥—Ä–Ω (30-45 —Ö–≤)
üí≥ **–û–ø–ª–∞—Ç–∞:** –ì–æ—Ç—ñ–≤–∫–∞ –∞–±–æ –∫–∞—Ä—Ç–∫–∞
üéØ **–ü–µ—Ä–µ–≤–∞–≥–∏:** –°–≤—ñ–∂—ñ –ø—Ä–æ–¥—É–∫—Ç–∏, —à–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
"""
    tg_send_message(chat_id, info_text)

def show_contacts(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏"""
    contacts_text = """
üìû **–ö–æ–Ω—Ç–∞–∫—Ç–∏**

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +380XX XXX XX XX
üìß Email: info@ferrikfoot.com
üìç –ê–¥—Ä–µ—Å–∞: –º. –ö–∏—ó–≤, –≤—É–ª. –ü—Ä–∏–∫–ª–∞–¥–Ω–∞, 1
"""
    tg_send_message(chat_id, contacts_text)

def show_recommendations(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    try:
        if menu_cache:
            menu_items = [f"{item['name']} - {item['price']} –≥—Ä–Ω" 
                         for item in menu_cache.values() if item.get('active', True)][:5]
            
            prompt = f"–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —Å—Ç—Ä–∞–≤–∏ –∑ –º–µ–Ω—é: {', '.join(menu_items)}. –ö–æ—Ä–æ—Ç–∫–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."
            recommendation = get_gemini_recommendation(prompt)
            
            tg_send_message(chat_id, f"üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**\n\n{recommendation}")
        else:
            tg_send_message(chat_id, "üçï –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –Ω–∞—à—É —Ñ—ñ—Ä–º–æ–≤—É –ø—ñ—Ü—É!")
    except:
        tg_send_message(chat_id, "üçï –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –Ω–∞—à—É —Ñ—ñ—Ä–º–æ–≤—É –ø—ñ—Ü—É!")

def process_callback_query(callback_query):
    """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    try:
        chat_id = callback_query["message"]["chat"]["id"]
        data = callback_query["data"]
        tg_send_message(chat_id, f"–û–±—Ä–∞–Ω–æ: {data}")
    except Exception as e:
        logger.error(f"Callback error: {e}")

# –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Flask
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Internal server error"}), 500

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
