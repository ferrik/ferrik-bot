"""
Hubsy Bot - Main Application
Telegram –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é Google Sheets —Ç–∞ Gemini AI
"""

import logging
import os
import time
from flask import Flask, request, jsonify
from typing import Dict, Any, List, Optional

import config
from services import sheets, gemini
from services.telegram import (
    tg_send_message as send_message,
    tg_send_photo as send_photo,
    tg_answer_callback as answer_callback_query
)
from services import database

# Logging setup
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask app
app = Flask(__name__)

# Global data
menu_data: List[Dict[str, Any]] = []
user_states: Dict[int, Dict[str, Any]] = {}
user_carts: Dict[int, List[Dict[str, Any]]] = {}

# ============================================================================
# STARTUP - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
# ============================================================================

def initialize():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
    global menu_data
    
    logger.info("üöÄ Starting Hubsy Bot v3.2.0...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if not database.init_database():
        logger.error("‚ùå Database initialization failed")
        return False
    
    logger.info("‚úÖ Database initialized")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
    try:
        menu_data = sheets.load_menu()
        if menu_data:
            logger.info(f"‚úÖ Menu loaded: {len(menu_data)} items")
        else:
            logger.warning("‚ö†Ô∏è Menu is empty")
    except Exception as e:
        logger.error(f"‚ùå Menu loading failed: {e}")
    
    # –¢–µ—Å—Ç Gemini
    gemini.test_gemini_connection()
    
    return True

# –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è
initialize()

# ============================================================================
# CART FUNCTIONS (In-Memory)
# ============================================================================

def add_to_cart(user_id: int, item: Dict[str, Any]):
    """–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—à–∏–∫"""
    if user_id not in user_carts:
        user_carts[user_id] = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ –≤ –∫–æ—à–∏–∫—É
    for cart_item in user_carts[user_id]:
        if cart_item.get('id') == item.get('id'):
            cart_item['quantity'] = cart_item.get('quantity', 1) + 1
            return
    
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
    item['quantity'] = 1
    user_carts[user_id].append(item)


def get_cart(user_id: int) -> List[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return user_carts.get(user_id, [])


def clear_cart(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫"""
    if user_id in user_carts:
        user_carts[user_id] = []


def remove_from_cart(user_id: int, item_id: str):
    """–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –∫–æ—à–∏–∫–∞"""
    if user_id in user_carts:
        user_carts[user_id] = [
            item for item in user_carts[user_id] 
            if item.get('id') != item_id
        ]


def get_cart_total(user_id: int) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∫–æ—à–∏–∫–∞"""
    cart = get_cart(user_id)
    total = sum(
        item.get('price', 0) * item.get('quantity', 1) 
        for item in cart
    )
    return total


# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

def get_user_state(user_id: int) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id not in user_states:
        user_states[user_id] = {
            "state": None,
            "data": {}
        }
    return user_states[user_id]


def set_user_state(user_id: int, state: str, data: Dict[str, Any] = None):
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_states[user_id] = {
        "state": state,
        "data": data or {}
    }


def clear_user_state(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id in user_states:
        user_states[user_id] = {"state": None, "data": {}}


# ============================================================================
# KEYBOARD LAYOUTS
# ============================================================================

def get_main_menu():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    return {
        "keyboard": [
            ["üìã –ú–µ–Ω—é", "üõí –ö–æ—à–∏–∫"],
            ["‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó", "üîç –ü–æ—à—É–∫"],
            ["üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üÜò –î–æ–ø–æ–º–æ–≥–∞"]
        ],
        "resize_keyboard": True
    }


def get_category_menu(categories: List[str]):
    """–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    keyboard = []
    for i in range(0, len(categories), 2):
        row = categories[i:i+2]
        keyboard.append(row)
    keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True
    }


def get_item_keyboard(item_id: str):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä—É"""
    return {
        "inline_keyboard": [
            [
                {"text": "‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", "callback_data": f"add_{item_id}"}
            ],
            [
                {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", "callback_data": "back_to_categories"}
            ]
        ]
    }


def get_cart_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–æ—à–∏–∫–∞"""
    return {
        "inline_keyboard": [
            [
                {"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "callback_data": "checkout"}
            ],
            [
                {"text": "üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", "callback_data": "clear_cart"}
            ],
            [
                {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", "callback_data": "back_to_menu"}
            ]
        ]
    }


# ============================================================================
# MESSAGE HANDLERS
# ============================================================================

def handle_start(chat_id: int, username: str):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    welcome_message = f"""
üëã –í—ñ—Ç–∞—î–º–æ –≤ <b>Hubsy Bot</b>!

–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–º–æ–≤–∏—Ç–∏ —Å–º–∞—á–Ω—É —ó–∂—É —à–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ.

üîπ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –º–µ–Ω—é
üîπ –î–æ–¥–∞–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–≤–∏ –≤ –∫–æ—à–∏–∫
üîπ –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá
"""
    
    send_message(chat_id, welcome_message, reply_markup=get_main_menu())
    database.log_activity(chat_id, "start", {"username": username})


def handle_menu(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    if not menu_data:
        send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    categories = list(set(
        item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ') 
        for item in menu_data 
        if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è')
    ))
    
    if not categories:
        send_message(chat_id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    message = "üìã <b>–ù–ê–®–ï –ú–ï–ù–Æ</b>\n" + "‚îÄ" * 30 + "\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"
    
    send_message(
        chat_id,
        message,
        reply_markup=get_category_menu(categories)
    )
    
    set_user_state(chat_id, "selecting_category")
    database.log_activity(chat_id, "view_menu")


def handle_category(chat_id: int, category: str):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—Ä–∞–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    items = [item for item in menu_data if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category]
    
    if not items:
        send_message(chat_id, f"‚ùå –ù–µ–º–∞—î —Å—Ç—Ä–∞–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}'")
        return
    
    message = f"üçΩ <b>{category.upper()}</b>\n" + "‚îÄ" * 30 + "\n\n"
    
    for item in items:
        name = item.get('–°—Ç—Ä–∞–≤–∏', item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏'))
        price = item.get('–¶—ñ–Ω–∞', 0)
        description = item.get('–û–ø–∏—Å', '')
        item_id = item.get('ID', '')
        
        message += f"üîπ <b>{name}</b>\n"
        message += f"üí∞ {price} –≥—Ä–Ω\n"
        if description:
            message += f"üìù {description[:100]}...\n"
        message += "\n"
    
    send_message(chat_id, message, reply_markup=get_main_menu())
    database.log_activity(chat_id, "view_category", {"category": category})


def handle_cart(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫"""
    cart = get_cart(chat_id)
    
    if not cart:
        send_message(
            chat_id,
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤–∏ –∑ –º–µ–Ω—é üëá",
            reply_markup=get_main_menu()
        )
        return
    
    total = get_cart_total(chat_id)
    
    message = "üõí <b>–í–ê–® –ö–û–®–ò–ö</b>\n" + "‚îÄ" * 30 + "\n\n"
    
    for item in cart:
        name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        price = item.get('price', 0)
        quantity = item.get('quantity', 1)
        
        message += f"üîπ <b>{name}</b>\n"
        message += f"   {quantity} x {price} –≥—Ä–Ω = {quantity * price} –≥—Ä–Ω\n\n"
    
    message += "‚îÄ" * 30 + "\n"
    message += f"üí∞ <b>–†–∞–∑–æ–º: {total} –≥—Ä–Ω</b>"
    
    send_message(chat_id, message, reply_markup=get_cart_keyboard())
    database.log_activity(chat_id, "view_cart")


def handle_recommendations(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    if not menu_data:
        send_message(chat_id, "‚ùå –ú–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –∑ –±–∞–∑–∏
    popular = database.get_popular_items(limit=5)
    
    if popular:
        message = "‚≠ê <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á</b>\n" + "‚îÄ" * 30 + "\n\n"
        message += "üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ —Å—Ç—Ä–∞–≤–∏:</b>\n\n"
        
        for dish_name, count in popular:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç—Ä–∞–≤—É –≤ –º–µ–Ω—é
            dish = next((item for item in menu_data if item.get('–°—Ç—Ä–∞–≤–∏') == dish_name or item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏') == dish_name), None)
            if dish:
                price = dish.get('–¶—ñ–Ω–∞', 0)
                message += f"üîπ <b>{dish_name}</b>\n"
                message += f"   üí∞ {price} –≥—Ä–Ω | üë• –ó–∞–º–æ–≤–∏–ª–∏ {count} —Ä–∞–∑\n\n"
    else:
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö - –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ —Å—Ç—Ä–∞–≤–∏
        message = "‚≠ê <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á</b>\n" + "‚îÄ" * 30 + "\n\n"
        
        for item in menu_data[:5]:
            name = item.get('–°—Ç—Ä–∞–≤–∏', item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏'))
            price = item.get('–¶—ñ–Ω–∞', 0)
            description = item.get('–û–ø–∏—Å', '')
            
            message += f"üîπ <b>{name}</b>\n"
            message += f"   üí∞ {price} –≥—Ä–Ω\n"
            if description:
                message += f"   üìù {description[:80]}...\n"
            message += "\n"
    
    send_message(chat_id, message, reply_markup=get_main_menu())
    database.log_activity(chat_id, "view_recommendations")


def handle_search(chat_id: int):
    """–ü–æ—á–∞—Ç–æ–∫ –ø–æ—à—É–∫—É"""
    message = """
üîç <b>–ü–û–®–£–ö</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

–ù–∞–ø–∏—à—ñ—Ç—å —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ:
‚Ä¢ –ù–∞–∑–≤—É —Å—Ç—Ä–∞–≤–∏
‚Ä¢ –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç
‚Ä¢ –¢–∏–ø –∫—É—Ö–Ω—ñ

–ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–ø—ñ—Ü–∞", "–∑ –∫—É—Ä–∫–æ—é", "–≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–µ"
"""
    
    send_message(chat_id, message, reply_markup={"remove_keyboard": True})
    set_user_state(chat_id, "searching")
    database.log_activity(chat_id, "start_search")


def handle_my_orders(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    orders = database.get_user_orders(chat_id, limit=5)
    
    if not orders:
        send_message(
            chat_id,
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å\n\n–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤–∏ –∑ –º–µ–Ω—é —ñ –∑—Ä–æ–±—ñ—Ç—å –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! üçΩ",
            reply_markup=get_main_menu()
        )
        return
    
    message = "üì¶ <b>–ú–û–á –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n" + "‚îÄ" * 30 + "\n\n"
    
    for order in orders:
        order_id = order.get('id', 'N/A')
        total = order.get('total', 0)
        status = order.get('status', 'unknown')
        created_at = order.get('created_at', 'N/A')
        
        status_emoji = {
            'new': 'üÜï',
            'confirmed': '‚úÖ',
            'preparing': 'üë®‚Äçüç≥',
            'ready': 'üéâ',
            'delivered': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(status, '‚ùì')
        
        message += f"{status_emoji} <b>#{order_id[:8]}</b>\n"
        message += f"   üí∞ {total} –≥—Ä–Ω | üìÖ {created_at[:16]}\n"
        message += f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    send_message(chat_id, message, reply_markup=get_main_menu())
    database.log_activity(chat_id, "view_orders")


def handle_help(chat_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"""
    help_text = """
üÜò <b>–î–û–ü–û–ú–û–ì–ê</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

<b>–Ø–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>
1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å "üìã –ú–µ–Ω—é"
2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
3Ô∏è‚É£ –î–æ–¥–∞–π—Ç–µ —Å—Ç—Ä–∞–≤–∏ –≤ –∫–æ—à–∏–∫
4Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ "üõí –ö–æ—à–∏–∫"
5Ô∏è‚É£ –û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

<b>–ö–æ–º–∞–Ω–¥–∏:</b>
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/menu - –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
/cart - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

<b>–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?</b>
–ù–∞–ø–∏—à—ñ—Ç—å @support –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ:
üìû +380 XX XXX XX XX
"""
    
    send_message(chat_id, help_text, reply_markup=get_main_menu())
    database.log_activity(chat_id, "view_help")


def handle_checkout(chat_id: int, callback_query_id: str = None):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    cart = get_cart(chat_id)
    
    if not cart:
        if callback_query_id:
            answer_callback_query(callback_query_id, "üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
    
    message = """
üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:

<b>–Ü–º'—è</b>
<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>
<b>–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>

–ü—Ä–∏–∫–ª–∞–¥:
–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ
+380501234567
–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1, –∫–≤. 10
"""
    
    send_message(chat_id, message)
    set_user_state(chat_id, "checkout")
    database.log_activity(chat_id, "start_checkout")


# ============================================================================
# CALLBACK HANDLERS
# ============================================================================

def handle_callback(callback_data: str, chat_id: int, message_id: int, callback_query_id: str):
    """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    
    if callback_data.startswith("add_"):
        # –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—à–∏–∫
        item_id = callback_data.replace("add_", "")
        item = next((x for x in menu_data if str(x.get('ID')) == str(item_id)), None)
        
        if item:
            add_to_cart(chat_id, {
                'id': item_id,
                'name': item.get('–°—Ç—Ä–∞–≤–∏', item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏')),
                'price': item.get('–¶—ñ–Ω–∞', 0),
                'quantity': 1
            })
            answer_callback_query(callback_query_id, "‚úÖ –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫!")
            database.log_activity(chat_id, "add_to_cart", {"item_id": item_id})
        else:
            answer_callback_query(callback_query_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    elif callback_data == "checkout":
        handle_checkout(chat_id, callback_query_id)
        answer_callback_query(callback_query_id, "üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    
    elif callback_data == "clear_cart":
        clear_cart(chat_id)
        answer_callback_query(callback_query_id, "üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
        handle_cart(chat_id)
        database.log_activity(chat_id, "clear_cart")
    
    elif callback_data == "back_to_menu":
        handle_menu(chat_id)
        answer_callback_query(callback_query_id, "üìã –ú–µ–Ω—é")
    
    elif callback_data == "back_to_categories":
        handle_menu(chat_id)
        answer_callback_query(callback_query_id, "üìã –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó")


# ============================================================================
# WEBHOOK HANDLER
# ============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–∫–∞ webhook –≤—ñ–¥ Telegram"""
    try:
        update = request.json
        logger.info(f"üì• Webhook: {update.get('update_id')}")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if 'message' in update:
            message = update['message']
            chat_id = message['chat']['id']
            user_id = message['from']['id']
            username = message['from'].get('username', 'Unknown')
            
            logger.info(f"üì® Message from {chat_id} ({username}): {message.get('text', 'No text')}")
            
            # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if 'text' in message:
                text = message['text']
                
                # –ö–æ–º–∞–Ω–¥–∏
                if text == '/start':
                    handle_start(chat_id, username)
                elif text == '/menu' or text == 'üìã –ú–µ–Ω—é':
                    handle_menu(chat_id)
                elif text == '/cart' or text == 'üõí –ö–æ—à–∏–∫':
                    handle_cart(chat_id)
                elif text == '/help' or text == 'üÜò –î–æ–ø–æ–º–æ–≥–∞':
                    handle_help(chat_id)
                elif text == '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó':
                    handle_recommendations(chat_id)
                elif text == 'üîç –ü–æ—à—É–∫':
                    handle_search(chat_id)
                elif text == 'üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
                    handle_my_orders(chat_id)
                elif text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
                    send_message(chat_id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
                    clear_user_state(chat_id)
                
                # –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤
                else:
                    user_data = get_user_state(chat_id)
                    
                    if user_data.get("state") == "selecting_category":
                        # –í–∏–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è
                        handle_category(chat_id, text)
                        clear_user_state(chat_id)
                    
                    elif user_data.get("state") == "searching":
                        # –ü–æ—à—É–∫ —á–µ—Ä–µ–∑ Gemini
                        try:
                            query = text
                            
                            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ gemini –º–æ–¥—É–ª—è
                            search_results = gemini.search_menu(query, menu_data)
                            
                            if search_results:
                                # –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–≤–∏
                                response = f"üîç <b>–ó–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Å—Ç—Ä–∞–≤:</b>\n\n"
                                
                                for item in search_results[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –º–∞–∫—Å–∏–º—É–º 5
                                    name = item.get('–°—Ç—Ä–∞–≤–∏', item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏'))
                                    price = item.get('–¶—ñ–Ω–∞', 0)
                                    description = item.get('–û–ø–∏—Å', '')
                                    
                                    response += f"üçΩ <b>{name}</b>\n"
                                    response += f"üí∞ {price} –≥—Ä–Ω\n"
                                    if description:
                                        response += f"üìù {description[:100]}...\n"
                                    response += "\n"
                                
                                send_message(chat_id, response, reply_markup=get_main_menu())
                                
                                # –î–æ–¥–∞—Ç–∫–æ–≤–æ –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ AI –∫–æ–º–µ–Ω—Ç–∞—Ä
                                ai_comment = gemini.get_ai_response(query, menu_data)
                                if ai_comment:
                                    send_message(chat_id, f"ü§ñ <b>AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b>\n\n{ai_comment}")
                            else:
                                # –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                                send_message(
                                    chat_id, 
                                    "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–≤ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º üòï\n\n"
                                    "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –º–µ–Ω—é.",
                                    reply_markup=get_main_menu()
                                )
                            
                            clear_user_state(chat_id)
                        except Exception as e:
                            logger.error(f"Search error: {e}")
                            send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É üòï\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–∑ –º–µ–Ω—é.")
                    
                    elif user_data.get("state") == "checkout":
                        # –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                        try:
                            lines = text.strip().split('\n')
                            if len(lines) >= 3:
                                name = lines[0]
                                phone = lines[1]
                                address = '\n'.join(lines[2:])
                                
                                cart = get_cart(chat_id)
                                total = get_cart_total(chat_id)
                                
                                # –ì–µ–Ω–µ—Ä—É—î–º–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                                order_id = f"ORD{int(time.time())}"
                                
                                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                                success = database.save_order(
                                    order_id=order_id,
                                    user_id=chat_id,
                                    username=username,
                                    items=cart,
                                    total=total,
                                    phone=phone,
                                    address=address,
                                    notes=f"Name: {name}"
                                )
                                
                                if success:
                                    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
                                    confirmation = f"""
‚úÖ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–û!</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

<b>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> #{order_id}

<b>–í–∞—à—ñ –¥–∞–Ω—ñ:</b>
üë§ {name}
üìû {phone}
üìç {address}

<b>–°—É–º–∞:</b> {total} –≥—Ä–Ω

–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!
"""
                                    send_message(chat_id, confirmation, reply_markup=get_main_menu())
                                    
                                    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                                    if config.OPERATOR_CHAT_ID:
                                        operator_msg = f"""
üÜï <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>

üë§ {name}
üìû {phone}
üìç {address}

<b>–°—Ç—Ä–∞–≤–∏:</b>
"""
                                        for item in cart:
                                            operator_msg += f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price']*item['quantity']} –≥—Ä–Ω\n"
                                        
                                        operator_msg += f"\nüí∞ <b>–†–∞–∑–æ–º: {total} –≥—Ä–Ω</b>"
                                        
                                        send_message(config.OPERATOR_CHAT_ID, operator_msg)
                                    
                                    # –û—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫
                                    clear_cart(chat_id)
                                    clear_user_state(chat_id)
                                    
                                    database.log_activity(chat_id, "order_placed", {"order_id": order_id, "total": total})
                                else:
                                    send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                            else:
                                send_message(chat_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:\n\n–Ü–º'—è\n–¢–µ–ª–µ—Ñ–æ–Ω\n–ê–¥—Ä–µ—Å–∞")
                        except Exception as e:
                            logger.error(f"Checkout error: {e}")
                            send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        
        # –û–±—Ä–æ–±–∫–∞ callback query
        elif 'callback_query' in update:
            callback = update['callback_query']
            chat_id = callback['message']['chat']['id']
            message_id = callback['message']['message_id']
            callback_data = callback['data']
            callback_query_id = callback['id']
            
            logger.info(f"üîò Callback: {callback_data} from {chat_id}")
            
            handle_callback(callback_data, chat_id, message_id, callback_query_id)
        
        return jsonify({"ok": True}), 200
        
    except Exception as e:
        logger.error(f"Webhook error: {e}", exc_info=True)
        return jsonify({"ok": False, "error": str(e)}), 500


# ============================================================================
# STARTUP
# ============================================================================

@app.route('/')
def index():
    """Health check"""
    return jsonify({
        "status": "ok",
        "bot": "Hubsy Bot",
        "version": "3.2.0"
    })


@app.route('/health')
def health():
    """–î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è"""
    db_ok, db_info = database.test_connection()
    gemini_ok = gemini.test_gemini_connection()
    
    return jsonify({
        "status": "healthy" if db_ok else "degraded",
        "database": db_info,
        "gemini": "ok" if gemini_ok else "unavailable",
        "menu_items": len(menu_data)
    })


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥—É–ª—è (–¥–ª—è gunicorn)
def initialize():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
    global menu_data
    
    logger.info("üöÄ Initializing Hubsy Bot v3.2.0...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        if database.init_database():
            logger.info("‚úÖ Database initialized")
        else:
            logger.error("‚ùå Database initialization failed")
    except Exception as e:
        logger.error(f"‚ùå Database init error: {e}")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é
    try:
        menu_data = sheets.load_menu()
        if menu_data:
            logger.info(f"‚úÖ Menu loaded: {len(menu_data)} items")
        else:
            logger.warning("‚ö†Ô∏è Menu is empty")
    except Exception as e:
        logger.error(f"‚ùå Menu loading failed: {e}")
    
    # –¢–µ—Å—Ç Gemini
    try:
        gemini.test_gemini_connection()
    except Exception as e:
        logger.error(f"‚ùå Gemini test failed: {e}")

# –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
initialize()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', config.PORT))
    logger.info(f"üåê Starting server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=config.DEBUG)
