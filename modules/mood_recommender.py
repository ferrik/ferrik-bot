"""
üé≠ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—Ä–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
"""
from typing import List, Dict, Optional
from datetime import datetime
import random
import logging

logger = logging.getLogger(__name__)


class MoodRecommender:
    """AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–æ—Ä —Å—Ç—Ä–∞–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—Ä–æ—é"""
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ—ó–≤
    MOOD_PROFILES = {
        'happy': {
            'name': '–©–∞—Å–ª–∏–≤–∏–π(–∞)',
            'emoji': 'üòä',
            'keywords': ['–ª–µ–≥–∫—ñ', '—è—Å–∫—Ä–∞–≤—ñ', '—Å–≤—è—Ç–∫–æ–≤—ñ', '—Å–æ–∫–æ–≤–∏—Ç—ñ'],
            'categories': ['—Å–∞–ª–∞—Ç–∏', '–ø—ñ—Ü–∞', '–¥–µ—Å–µ—Ä—Ç–∏'],
            'avoid_categories': ['—Å—É–ø–∏'],
            'preferences': {
                'light': 0.7,
                'colorful': 0.8,
                'sweet': 0.6
            }
        },
        'calm': {
            'name': '–°–ø–æ–∫—ñ–π–Ω–∏–π(–∞)',
            'emoji': 'üòå',
            'keywords': ['—Ç–µ–ø–ª—ñ', '–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ñ', '—Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω—ñ'],
            'categories': ['—Å—É–ø–∏', '–ø–∞—Å—Ç–∞', '—Ä–∏–∑–æ—Ç—Ç–æ'],
            'avoid_categories': ['–±—É—Ä–≥–µ—Ä–∏', '—Ñ–∞—Å—Ç—Ñ—É–¥'],
            'preferences': {
                'warm': 0.9,
                'comfort': 0.8,
                'traditional': 0.7
            }
        },
        'energetic': {
            'name': '–ï–Ω–µ—Ä–≥—ñ–π–Ω–∏–π(–∞)',
            'emoji': 'üí™',
            'keywords': ['–±—ñ–ª–∫–æ–≤—ñ', '–ø–æ–∂–∏–≤–Ω—ñ', '–º\'—è—Å–Ω—ñ'],
            'categories': ['–≥—Ä–∏–ª—å', '—Å—Ç–µ–π–∫–∏', '–±—É—Ä–≥–µ—Ä–∏', '–±–æ—É–ª–∏'],
            'avoid_categories': ['–¥–µ—Å–µ—Ä—Ç–∏'],
            'preferences': {
                'protein': 0.9,
                'hearty': 0.8,
                'substantial': 0.7
            }
        },
        'romantic': {
            'name': '–†–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π(–∞)',
            'emoji': 'ü§ó',
            'keywords': ['–≤–∏—à—É–∫–∞–Ω—ñ', '–Ω—ñ–∂–Ω—ñ', '–¥–µ–ª—ñ–∫–∞—Ç–Ω—ñ'],
            'categories': ['–ø–∞—Å—Ç–∞', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏', '–¥–µ—Å–µ—Ä—Ç–∏'],
            'avoid_categories': ['—Ñ–∞—Å—Ç—Ñ—É–¥', '–±—É—Ä–≥–µ—Ä–∏'],
            'preferences': {
                'elegant': 0.9,
                'delicate': 0.8,
                'refined': 0.7
            }
        },
        'hungry': {
            'name': '–ì–æ–ª–æ–¥–Ω–∏–π(–∞)',
            'emoji': 'üòã',
            'keywords': ['—à–≤–∏–¥–∫—ñ', '—Å–∏—Ç–Ω—ñ', '–≤–µ–ª–∏–∫—ñ –ø–æ—Ä—Ü—ñ—ó'],
            'categories': ['–±—É—Ä–≥–µ—Ä–∏', '–ø—ñ—Ü–∞', '—Å—Ç–µ–π–∫–∏', '–ø–∞—Å—Ç–∞'],
            'avoid_categories': [],
            'preferences': {
                'fast': 0.9,
                'filling': 1.0,
                'large': 0.8
            }
        },
        'surprise': {
            'name': '–ó–¥–∏–≤—É–π –º–µ–Ω–µ',
            'emoji': 'üé≤',
            'keywords': ['—Ü—ñ–∫–∞–≤—ñ', '–Ω–µ–∑–≤–∏—á–∞–π–Ω—ñ', '–Ω–æ–≤—ñ'],
            'categories': [],  # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ
            'avoid_categories': [],
            'preferences': {
                'unique': 0.9,
                'new': 1.0,
                'experimental': 0.8
            }
        }
    }
    
    @staticmethod
    def get_time_based_suggestions() -> Dict:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —á–∞—Å—É –¥–æ–±–∏"""
        hour = datetime.now().hour
        
        if 6 <= hour < 11:
            return {
                'period': 'morning',
                'emoji': 'üåÖ',
                'message': '–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –Ø–∫ —â–æ–¥–æ —Å–º–∞—á–Ω–æ–≥–æ —Å–Ω—ñ–¥–∞–Ω–∫—É?',
                'categories': ['—Å–Ω—ñ–¥–∞–Ω–∫–∏', '–∫–∞–≤–∞', '–≤–∏–ø—ñ—á–∫–∞'],
                'boost_items': ['–æ–º–ª–µ—Ç', '—Å–∏—Ä–Ω–∏–∫–∏', '–∫—Ä—É–∞—Å–∞–Ω', '–∫–∞—à–∞']
            }
        elif 11 <= hour < 15:
            return {
                'period': 'lunch',
                'emoji': '‚òÄÔ∏è',
                'message': '–ß–∞—Å –æ–±—ñ–¥—É! –©–æ –± –∑\'—ó—Å—Ç–∏?',
                'categories': ['—Å—É–ø–∏', '—Å–∞–ª–∞—Ç–∏', '–æ—Å–Ω–æ–≤–Ω—ñ —Å—Ç—Ä–∞–≤–∏', '–±—ñ–∑–Ω–µ—Å-–ª–∞–Ω—á—ñ'],
                'boost_items': ['—Å—É–ø', '—Å–∞–ª–∞—Ç', '–¥—Ä—É–≥—ñ —Å—Ç—Ä–∞–≤–∏']
            }
        elif 15 <= hour < 18:
            return {
                'period': 'afternoon',
                'emoji': 'üçµ',
                'message': '–ü—ñ—Å–ª—è–æ–±—ñ–¥–Ω—ñ–π –ø–µ—Ä–µ–∫—É—Å? –ú–∞—î–º–æ —ñ–¥–µ—ó!',
                'categories': ['–¥–µ—Å–µ—Ä—Ç–∏', '–Ω–∞–ø–æ—ó', '–∑–∞–∫—É—Å–∫–∏'],
                'boost_items': ['–∫–∞–≤–∞', '—Ç—ñ—Å—Ç–µ—á–∫–æ', '–∫—Ä—É–∞—Å–∞–Ω']
            }
        elif 18 <= hour < 23:
            return {
                'period': 'dinner',
                'emoji': 'üåÜ',
                'message': '–ß–∞—Å –≤–µ—á–µ—Ä—ñ! –©–æ—Å—å –æ—Å–æ–±–ª–∏–≤–µ —Å—å–æ–≥–æ–¥–Ω—ñ?',
                'categories': ['–ø—ñ—Ü–∞', '–ø–∞—Å—Ç–∞', '—Å—Ç–µ–π–∫–∏', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏'],
                'boost_items': ['–ø—ñ—Ü–∞', '—Å—Ç–µ–π–∫', '–ø–∞—Å—Ç–∞', '—Ä–∏–∑–æ—Ç—Ç–æ']
            }
        else:
            return {
                'period': 'night',
                'emoji': 'üåô',
                'message': '–ü—ñ–∑–Ω—ñ–π –ø–µ—Ä–µ–∫—É—Å? –Ñ —à–≤–∏–¥–∫—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏!',
                'categories': ['–∑–∞–∫—É—Å–∫–∏', '–Ω–∞–ø–æ—ó', '–¥–µ—Å–µ—Ä—Ç–∏'],
                'boost_items': ['—Å–µ–Ω–¥–≤—ñ—á', '—Å–∞–ª–∞—Ç', '–¥–µ—Å–µ—Ä—Ç']
            }
    
    @staticmethod
    def calculate_item_score(item: Dict, mood: str, time_suggestions: Dict) -> float:
        """
        –†–æ–∑—Ä–∞—Ö–æ–≤—É—î score –¥–ª—è —Ç–æ–≤–∞—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—Ä–æ—é —Ç–∞ —á–∞—Å—É
        """
        score = 0.0
        
        mood_profile = MoodRecommender.MOOD_PROFILES.get(mood, {})
        
        # –ë–∞–∑–æ–≤–∏–π score - —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä—É
        rating = float(item.get('rating', item.get('–†–µ–π—Ç–∏–Ω–≥', 3.0)))
        score += rating * 2  # –ú–∞–∫—Å–∏–º—É–º +10 –±–∞–ª—ñ–≤
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        category = item.get('category', item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '')).lower()
        preferred_cats = [c.lower() for c in mood_profile.get('categories', [])]
        avoid_cats = [c.lower() for c in mood_profile.get('avoid_categories', [])]
        
        for pref_cat in preferred_cats:
            if pref_cat in category:
                score += 5.0
                break
        
        for avoid_cat in avoid_cats:
            if avoid_cat in category:
                score -= 3.0
                break
        
        # –ë–æ–Ω—É—Å –∑–∞ —á–∞—Å –¥–æ–±–∏
        time_categories = [c.lower() for c in time_suggestions.get('categories', [])]
        for time_cat in time_categories:
            if time_cat in category:
                score += 3.0
                break
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤—ñ/–æ–ø–∏—Å—ñ
        name = item.get('name', item.get('–°—Ç—Ä–∞–≤–∏', '')).lower()
        description = item.get('description', item.get('–û–ø–∏—Å', '')).lower()
        text = f"{name} {description}"
        
        for keyword in mood_profile.get('keywords', []):
            if keyword in text:
                score += 2.0
        
        # –ë–æ–Ω—É—Å –∑–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è (–¥–ª—è –≥–æ–ª–æ–¥–Ω–∏—Ö)
        if mood == 'hungry':
            cook_time = int(item.get('cook_time', item.get('–ß–∞—Å_–ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è', 30)))
            if cook_time <= 20:
                score += 4.0
            elif cook_time <= 30:
                score += 2.0
        
        # –í–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å –¥–ª—è "surprise me"
        if mood == 'surprise':
            score += random.uniform(0, 5)
        
        return max(0, score)
    
    @staticmethod
    def recommend(items: List[Dict], mood: str, limit: int = 3, user_history: List[str] = None) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—Ä–æ—é
        
        Args:
            items: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
            mood: –ù–∞—Å—Ç—Ä—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            limit: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
            user_history: –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å (ID —Ç–æ–≤–∞—Ä—ñ–≤)
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ scores
        """
        if not items:
            logger.warning("No items available for recommendations")
            return []
        
        time_suggestions = MoodRecommender.get_time_based_suggestions()
        user_history = user_history or []
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ score –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        scored_items = []
        for item in items:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–æ–≤–∞—Ä
            is_active = item.get('active', item.get('–ê–∫—Ç–∏–≤–Ω–∏–π', True))
            if not is_active:
                continue
            
            score = MoodRecommender.calculate_item_score(item, mood, time_suggestions)
            
            # –ë–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ (—è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –∑–∞–º–æ–≤–ª—è–≤)
            item_id = str(item.get('id', item.get('ID', '')))
            if item_id not in user_history:
                score += 1.0
            
            scored_items.append({
                'item': item,
                'score': score
            })
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ score
        scored_items.sort(key=lambda x: x['score'], reverse=True)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–ø N
        recommendations = [
            {
                **si['item'],
                'recommendation_score': si['score']
            }
            for si in scored_items[:limit]
        ]
        
        return recommendations
    
    @staticmethod
    def format_recommendations(recommendations: List[Dict], mood: str) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤ —Ç–µ–∫—Å—Ç"""
        mood_profile = MoodRecommender.MOOD_PROFILES.get(mood, {})
        mood_name = mood_profile.get('name', '–ù–∞—Å—Ç—Ä—ñ–π')
        mood_emoji = mood_profile.get('emoji', 'üòä')
        
        time_suggestions = MoodRecommender.get_time_based_suggestions()
        
        result = f"{mood_emoji} **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –Ω–∞—Å—Ç—Ä–æ—é: {mood_name}**\n"
        result += f"{time_suggestions['emoji']} _{time_suggestions['message']}_\n\n"
        
        if not recommendations:
            result += "üòî –ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!\n"
            return result
        
        result += "üéØ –Ø –ø—ñ–¥—ñ–±—Ä–∞–≤(–ª–∞) –¥–ª—è —Ç–µ–±–µ:\n\n"
        
        for i, item in enumerate(recommendations, 1):
            name = item.get('name', item.get('–°—Ç—Ä–∞–≤–∏', '–ù–µ–≤—ñ–¥–æ–º–æ'))
            price = item.get('price', item.get('–¶—ñ–Ω–∞', 0))
            rating = item.get('rating', item.get('–†–µ–π—Ç–∏–Ω–≥', 0))
            description = item.get('description', item.get('–û–ø–∏—Å', ''))
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ –æ–ø–∏—Å
            if description and len(description) > 60:
                description = description[:60] + "..."
            
            result += f"**{i}. {name}**\n"
            if description:
                result += f"   _{description}_\n"
            result += f"   üí∞ {price} –≥—Ä–Ω"
            if rating:
                result += f" | ‚≠ê {rating}/5"
            result += "\n\n"
        
        result += "üí° –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ —Å—Ç—Ä–∞–≤—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫!"
        
        return result
    
    @staticmethod
    def create_recommendation_keyboard(recommendations: List[Dict]) -> Dict:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏"""
        keyboard = {'inline_keyboard': []}
        
        for item in recommendations:
            item_id = item.get('id', item.get('ID'))
            name = item.get('name', item.get('–°—Ç—Ä–∞–≤–∏', '–¢–æ–≤–∞—Ä'))[:30]
            
            keyboard['inline_keyboard'].append([
                {'text': f"‚ûï {name}", 'callback_data': f"add_{item_id}"}
            ])
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
        keyboard['inline_keyboard'].append([
            {'text': 'üé≤ –Ü–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏', 'callback_data': 'recommend_again'},
            {'text': 'üìã –í—Å–µ –º–µ–Ω—é', 'callback_data': 'menu'}
        ])
        
        return keyboard


# ============================================================================
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
# ============================================================================
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    sample_items = [
        {
            'id': 1,
            'name': '–ö—Ä–µ–º-—Å—É–ø –∑ –±—Ä–æ–∫–æ–ª—ñ',
            'category': '–°—É–ø–∏',
            'description': '–ù—ñ–∂–Ω–∏–π –∫—Ä–µ–º-—Å—É–ø –∑ —Å–≤—ñ–∂–æ—ó –±—Ä–æ–∫–æ–ª—ñ',
            'price': 95,
            'rating': 4.7,
            'cook_time': 15
        },
        {
            'id': 2,
            'name': '–°—Ç–µ–π–∫ –†—ñ–±–∞–π',
            'category': '–ì—Ä–∏–ª—å',
            'description': '–°–æ–∫–æ–≤–∏—Ç–∏–π —è–ª–æ–≤–∏—á–∏–π —Å—Ç–µ–π–∫',
            'price': 450,
            'rating': 4.9,
            'cook_time': 25
        },
        {
            'id': 3,
            'name': '–ü—ñ—Ü–∞ "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"',
            'category': '–ü—ñ—Ü–∞',
            'description': '–ö–ª–∞—Å–∏—á–Ω–∞ —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∞ –ø—ñ—Ü–∞',
            'price': 180,
            'rating': 4.8,
            'cook_time': 20
        }
    ]
    
    print("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π ===\n")
    
    for mood in ['calm', 'energetic', 'hungry']:
        print(f"\n{'='*50}")
        print(f"–ù–ê–°–¢–†–Ü–ô: {mood.upper()}")
        print('='*50)
        
        recommendations = MoodRecommender.recommend(sample_items, mood, limit=2)
        print(MoodRecommender.format_recommendations(recommendations, mood))
