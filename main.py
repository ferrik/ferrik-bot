import os
import logging
import asyncio
from flask import Flask, request, jsonify
from dotenv import load_dotenv

import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏
load_dotenv()

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
app = Flask(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()] # –ù–∞ Render –∫—Ä–∞—â–µ –ª–æ–≥—É–≤–∞—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π—Ç–µ –π–æ–≥–æ –¥–æ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è.")
    raise ValueError("TELEGRAM_TOKEN is not set!")

application = Application.builder().token(TELEGRAM_TOKEN).build()

# --- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö (—Ç–∏–º—á–∞—Å–æ–≤–∞, –≤ –ø–∞–º'—è—Ç—ñ) ---
RESTAURANTS = {
    "1": {"name": "–ü—ñ—Ü–µ—Ä—ñ—è –ù–∞–ø–æ–ª—ñ", "menu": [
        {"id": "1_1", "name": "–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "price": 150},
        {"id": "1_2", "name": "–ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ", "price": 180}
    ]},
    "2": {"name": "–°—É—à—ñ –ú–∞–π—Å—Ç–µ—Ä", "menu": [
        {"id": "2_1", "name": "–ö–∞–ª—ñ—Ñ–æ—Ä–Ω—ñ—è —Ä–æ–ª", "price": 200},
        {"id": "2_2", "name": "–§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è", "price": 250}
    ]}
}
CARTS = {} # –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –î–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–∞—Ç–∏—Å—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É!

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started the bot")
    await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ —É @ferrikfoot_bot! üçΩÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} accessed menu")
    keyboard = [
        [InlineKeyboardButton(restaurant["name"], callback_data=f"rest_{id}")]
        for id, restaurant in RESTAURANTS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–∫–ª–∞–¥ —É –¢–µ—Ä–Ω–æ–ø–æ–ª—ñ:", reply_markup=reply_markup)

# --- –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –í–∞–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç –æ–¥—Ä–∞–∑—É
    user_id = query.from_user.id
    data = query.data
    logger.info(f"User {user_id} clicked button: {data}")

    if data.startswith("rest_"):
        rest_id = data.split("_")[1]
        restaurant = RESTAURANTS[rest_id]
        keyboard = [
            [InlineKeyboardButton(f"{item['name']} ({item['price']} –≥—Ä–Ω)", callback_data=f"add_{item['id']}")]
            for item in restaurant["menu"]
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∑–∞–∫–ª–∞–¥—ñ–≤", callback_data="back_to_menu")])
        keyboard.append([InlineKeyboardButton("üì• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="view_cart")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–ú–µ–Ω—é {restaurant['name']}:", reply_markup=reply_markup)

    elif data.startswith("add_"):
        item_id_parts = data.split("_")
        rest_id = item_id_parts[1]
        item_full_id = f"{item_id_parts[1]}_{item_id_parts[2]}"
        item = next((i for i in RESTAURANTS[rest_id]["menu"] if i["id"] == item_full_id), None)
        if item:
            if user_id not in CARTS:
                CARTS[user_id] = []
            CARTS[user_id].append(item)
            await context.bot.send_message(chat_id=user_id, text=f"‚úÖ –î–æ–¥–∞–Ω–æ '{item['name']}' –¥–æ –∫–æ—à–∏–∫–∞!")
            logger.info(f"User {user_id} added item {item['name']} to cart")
        else:
            await context.bot.send_message(chat_id=user_id, text="–ü–æ–º–∏–ª–∫–∞: —Å—Ç—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    elif data == "view_cart":
        if user_id not in CARTS or not CARTS[user_id]:
            cart_text = "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π! üõí"
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]]
        else:
            cart_items = "\n".join(f"‚Ä¢ {item['name']} - {item['price']} –≥—Ä–Ω" for item in CARTS[user_id])
            total = sum(item["price"] for item in CARTS[user_id])
            cart_text = f"üõí –í–∞—à –∫–æ—à–∏–∫:\n{cart_items}\n\n*–ó–∞–≥–∞–ª–æ–º: {total} –≥—Ä–Ω*"
            keyboard = [
                [InlineKeyboardButton("üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order")],
                [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="back_to_menu")]
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(cart_text, reply_markup=reply_markup, parse_mode='Markdown')

    elif data == "clear_cart":
        CARTS[user_id] = []
        logger.info(f"User {user_id} cleared cart")
        await query.edit_message_text("üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!")

    elif data == "order":
        if user_id not in CARTS or not CARTS[user_id]:
            await query.edit_message_text("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π! –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        else:
            cart_items = "\n".join(f"‚Ä¢ {item['name']}" for item in CARTS[user_id])
            total = sum(item["price"] for item in CARTS[user_id])
            order_text = f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n\n–°–∫–ª–∞–¥:\n{cart_items}\n\n*–°—É–º–∞: {total} –≥—Ä–Ω*\n\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
            logger.info(f"ORDER from {user_id}: {cart_items}, Total: {total} –≥—Ä–Ω")
            await query.edit_message_text(order_text, parse_mode='Markdown')
            CARTS[user_id] = [] # –û—á–∏—â—É—î–º–æ –∫–æ—à–∏–∫ –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

    elif data == "back_to_menu":
        # –Ü–º—ñ—Ç—É—î–º–æ –≤–∏–∫–ª–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /menu
        await menu(query, context)


# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("menu", menu))
application.add_handler(CallbackQueryHandler(button_callback))

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä Flask ---
@app.route('/')
def index():
    return "Hello, World! @ferrikfoot_bot is running."

@app.route('/health')
def health_check():
    return jsonify({"status": "healthy"}), 200

# –¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –æ–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –≤—ñ–¥ Telegram
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
async def webhook():
    json_data = request.get_json()
    update = Update.de_json(json_data, application.bot)
    await application.process_update(update)
    return "OK", 200

# –¶–µ–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
@app.route('/set_webhook')
def set_webhook():
    render_url = os.getenv('RENDER_EXTERNAL_URL')
    if not render_url:
        return "–ü–æ–º–∏–ª–∫–∞: –∑–º—ñ–Ω–Ω–∞ RENDER_EXTERNAL_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", 500
    
    webhook_url = f'{render_url}/{TELEGRAM_TOKEN}'
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(application.bot.set_webhook(webhook_url))
        logger.info(f"Webhook set to {webhook_url}")
        return f"Webhook —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {webhook_url}", 200
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")
        return f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}", 500

if __name__ == '__main__':
    app.run(port=int(os.environ.get('PORT', 8000)))

