"""
Hubsy Bot - Main Application  
Telegram –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é Google Sheets —Ç–∞ Gemini AI
"""

import logging
import os
import time
from flask import Flask, request, jsonify
from typing import Dict, Any, List, Optional

import config
from services import sheets, gemini
from services.telegram import (
    tg_send_message as send_message,
    tg_send_photo as send_photo,
    tg_answer_callback as answer_callback_query,
    tg_edit_message as edit_message
)
from services import database

# Logging setup
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Flask app
app = Flask(__name__)

# Global data
menu_data: List[Dict[str, Any]] = []
user_states: Dict[int, Dict[str, Any]] = {}
user_carts: Dict[int, List[Dict[str, Any]]] = {}

# ============================================================================
# STARTUP
# ============================================================================

def initialize():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ"""
    global menu_data
    
    logger.info("üöÄ Starting Hubsy Bot v3.3.0...")
    
    try:
        if database.init_database():
            logger.info("‚úÖ Database initialized")
    except Exception as e:
        logger.error(f"‚ùå Database error: {e}")
    
    try:
        if database.USE_POSTGRES:
            logger.info("üêò Using PostgreSQL")
            if database.sync_menu_from_sheets():
                menu_data = database.get_menu_from_postgres()
            else:
                menu_data = sheets.get_menu_from_sheet()
        else:
            menu_data = sheets.get_menu_from_sheet()
        
        if menu_data:
            logger.info(f"‚úÖ Menu loaded: {len(menu_data)} items")
    except Exception as e:
        logger.error(f"‚ùå Menu loading failed: {e}")
    
    try:
        gemini.test_gemini_connection()
    except Exception as e:
        logger.error(f"‚ùå Gemini test failed: {e}")

initialize()

# ============================================================================
# CART FUNCTIONS
# ============================================================================

def add_to_cart(user_id: int, item: Dict[str, Any]):
    if user_id not in user_carts:
        user_carts[user_id] = []
    for cart_item in user_carts[user_id]:
        if cart_item.get('id') == item.get('id'):
            cart_item['quantity'] = cart_item.get('quantity', 1) + 1
            return
    item['quantity'] = 1
    user_carts[user_id].append(item)

def get_cart(user_id: int) -> List[Dict[str, Any]]:
    return user_carts.get(user_id, [])

def clear_cart(user_id: int):
    if user_id in user_carts:
        user_carts[user_id] = []

def remove_from_cart(user_id: int, item_id: str):
    if user_id in user_carts:
        user_carts[user_id] = [item for item in user_carts[user_id] if item.get('id') != item_id]

def get_cart_total(user_id: int) -> float:
    return sum(item.get('price', 0) * item.get('quantity', 1) for item in get_cart(user_id))

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

def get_user_state(user_id: int) -> Dict[str, Any]:
    if user_id not in user_states:
        user_states[user_id] = {"state": None, "data": {}, "selected_restaurant": None}
    return user_states[user_id]

def set_user_state(user_id: int, state: str, data: Dict[str, Any] = None):
    current = get_user_state(user_id)
    current["state"] = state
    if data:
        current.update(data)
    user_states[user_id] = current

def clear_user_state(user_id: int):
    if user_id in user_states:
        user_states[user_id] = {"state": None, "data": {}, "selected_restaurant": None}

# ============================================================================
# KEYBOARDS
# ============================================================================

def get_main_menu():
    return {"keyboard": [["üìã –ú–µ–Ω—é", "üõí –ö–æ—à–∏–∫"], ["‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó", "üîç –ü–æ—à—É–∫"], ["üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "üÜò –î–æ–ø–æ–º–æ–≥–∞"]], "resize_keyboard": True}

def get_restaurants_keyboard():
    restaurants = list(set(item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω') for item in menu_data if item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω')))
    keyboard = [restaurants[i:i+2] for i in range(0, len(restaurants), 2)]
    keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    return {"keyboard": keyboard, "resize_keyboard": True}

def get_category_menu_for_restaurant(restaurant: str):
    items = [item for item in menu_data if item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω') == restaurant]
    categories = list(set(item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') for item in items if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è')))
    keyboard = [categories[i:i+2] for i in range(0, len(categories), 2)]
    keyboard.append(["üõí –ö–æ—à–∏–∫", "‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    return {"keyboard": keyboard, "resize_keyboard": True}

def get_dish_inline_keyboard(item_id: str, in_cart: bool = False):
    if not in_cart:
        return {"inline_keyboard": [[{"text": "‚ûï –î–æ–¥–∞—Ç–∏", "callback_data": f"add_{item_id}"}], [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_category"}]]}
    return {"inline_keyboard": [[{"text": "‚ûñ", "callback_data": f"remove_one_{item_id}"}, {"text": "‚úÖ –í –∫–æ—à–∏–∫—É", "callback_data": "noop"}, {"text": "‚ûï", "callback_data": f"add_{item_id}"}], [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_category"}]]}

def get_cart_keyboard():
    return {"inline_keyboard": [[{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏", "callback_data": "checkout"}], [{"text": "üóë –û—á–∏—Å—Ç–∏—Ç–∏", "callback_data": "clear_cart"}], [{"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}]]}

# ============================================================================
# –î–û–î–ê–ô–¢–ï –¶–Ü –§–£–ù–ö–¶–Ü–á –í main.py –ø—ñ—Å–ª—è keyboards
# ============================================================================

def get_address_keyboard(user_id: int):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏"""
    addresses = database.get_user_addresses(user_id, limit=3)
    
    keyboard = []
    for addr in addresses:
        # –°–∫–æ—Ä–æ—á—É—î–º–æ –∞–¥—Ä–µ—Å—É –¥–ª—è –∫–Ω–æ–ø–∫–∏
        short_addr = addr['address'][:30] + "..." if len(addr['address']) > 30 else addr['address']
        keyboard.append([f"üìç {short_addr}"])
    
    keyboard.append(["üìç –ù–æ–≤–∞ –∞–¥—Ä–µ—Å–∞", "üì≤ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é"])
    keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥"])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }


def get_contact_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    return {
        "keyboard": [
            [{"text": "üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", "request_contact": True}],
            ["‚óÄÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }


def get_location_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Ç—É –ª–æ–∫–∞—Ü—ñ—ó"""
    return {
        "keyboard": [
            [{"text": "üìç –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", "request_location": True}],
            ["‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É", "‚óÄÔ∏è –ù–∞–∑–∞–¥"]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }


# ============================================================================
# –û–ù–û–í–Ü–¢–¨ handle_start
# ============================================================================

def handle_start(chat_id: int, username: str):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø—Ä–æ—Ñ—ñ–ª—é"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—Ä–æ—Ñ—ñ–ª—å
    profile = database.get_user_profile(chat_id)
    
    if not profile:
        # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –∑–∞–ø–∏—Ç—É—î–º–æ —ñ–º'—è
        send_message(
            chat_id, 
            "üëã –í—ñ—Ç–∞—î–º–æ –≤ <b>Hubsy Bot</b>!\n\n"
            "–î–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å.\n\n"
            "–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?",
            reply_markup={"remove_keyboard": True}
        )
        set_user_state(chat_id, "registering_name", {"username": username})
        database.log_activity(chat_id, "start_registration", {"username": username})
    else:
        # –Ü—Å–Ω—É—é—á–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        name = profile.get('full_name', username)
        send_message(
            chat_id,
            f"üëã –í—ñ—Ç–∞—î–º–æ –∑–Ω–æ–≤—É, <b>{name}</b>!\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
            reply_markup=get_main_menu()
        )
        database.log_activity(chat_id, "start", {"username": username})


# ============================================================================
# –û–ù–û–í–Ü–¢–¨ handle_checkout
# ============================================================================

def handle_checkout(chat_id: int, callback_query_id: str = None):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø—Ä–æ—Ñ—ñ–ª—é"""
    cart = get_cart(chat_id)
    
    if not cart:
        if callback_query_id:
            answer_callback_query(callback_query_id, "üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
    profile = database.get_user_profile(chat_id)
    
    if not profile or not profile.get('phone'):
        # –ù–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É - –∑–∞–ø–∏—Ç—É—î–º–æ
        send_message(
            chat_id,
            "üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
            "–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É:",
            reply_markup=get_contact_keyboard()
        )
        set_user_state(chat_id, "checkout_phone")
    else:
        # –Ñ –ø—Ä–æ—Ñ—ñ–ª—å - –ø–æ–∫–∞–∑—É—î–º–æ –∞–¥—Ä–µ—Å–∏
        addresses = database.get_user_addresses(chat_id, limit=3)
        
        if addresses:
            msg = (
                "üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                f"üë§ <b>{profile.get('full_name', '–Ü–º\'—è')}</b>\n"
                f"üìû <b>{profile.get('phone')}</b>\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É:"
            )
        else:
            msg = (
                "üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                f"üë§ <b>{profile.get('full_name', '–Ü–º\'—è')}</b>\n"
                f"üìû <b>{profile.get('phone')}</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:"
            )
        
        send_message(chat_id, msg, reply_markup=get_address_keyboard(chat_id))
        set_user_state(chat_id, "checkout_address", {"profile": profile})
    
    database.log_activity(chat_id, "start_checkout")


# ============================================================================
# –î–û–î–ê–ô–¢–ï –í WEBHOOK –û–ë–†–û–ë–ö–£ –ö–û–ù–¢–ê–ö–¢–£ –¢–ê –õ–û–ö–ê–¶–Ü–á
# ============================================================================

# –í —Ñ—É–Ω–∫—Ü—ñ—ó webhook() –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–æ–¥–∞–π—Ç–µ:

            # –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É
            if 'contact' in msg:
                user_data = get_user_state(chat_id)
                
                if user_data.get("state") == "registering_phone":
                    phone = msg['contact']['phone_number']
                    full_name = user_data.get('full_name', username)
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
                    database.save_user_profile(chat_id, username, full_name, phone)
                    
                    send_message(
                        chat_id,
                        f"‚úÖ –î—è–∫—É—î–º–æ, <b>{full_name}</b>!\n\n"
                        "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
                        reply_markup=get_main_menu()
                    )
                    clear_user_state(chat_id)
                    
                elif user_data.get("state") == "checkout_phone":
                    phone = msg['contact']['phone_number']
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
                    profile = database.get_user_profile(chat_id)
                    if profile:
                        database.save_user_profile(chat_id, username, profile.get('full_name'), phone)
                    else:
                        database.save_user_profile(chat_id, username, username, phone)
                    
                    # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
                    send_message(
                        chat_id,
                        "‚úÖ –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
                        "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:",
                        reply_markup=get_location_keyboard()
                    )
                    set_user_state(chat_id, "checkout_address")
            
            # –û–±—Ä–æ–±–∫–∞ –ª–æ–∫–∞—Ü—ñ—ó
            if 'location' in msg:
                user_data = get_user_state(chat_id)
                
                if user_data.get("state") == "checkout_address":
                    latitude = msg['location']['latitude']
                    longitude = msg['location']['longitude']
                    
                    # –§–æ—Ä–º—É—î–º–æ –∞–¥—Ä–µ—Å—É –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ reverse geocoding)
                    address = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {latitude:.6f}, {longitude:.6f}"
                    
                    send_message(
                        chat_id,
                        f"üìç –õ–æ–∫–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞!\n\n"
                        f"<b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:</b> {latitude:.6f}, {longitude:.6f}\n\n"
                        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–∏ —É—Ç–æ—á–Ω—ñ—Ç—å –∞–¥—Ä–µ—Å—É:\n"
                        "(–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä—É)",
                        reply_markup={"remove_keyboard": True}
                    )
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞—Ü—ñ—é
                    set_user_state(chat_id, "checkout_confirm", {
                        "latitude": latitude,
                        "longitude": longitude,
                        "address": address
                    })


# ============================================================================
# –û–ù–û–í–Ü–¢–¨ –û–ë–†–û–ë–ö–£ –°–¢–ê–ù–Ü–í –í WEBHOOK
# ============================================================================

# –î–æ–¥–∞–π—Ç–µ —Ü—ñ —Å—Ç–∞–Ω–∏ –≤ –±–ª–æ–∫ else (–æ–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω—ñ–≤):

                    elif user_data.get("state") == "registering_name":
                        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –æ—Ç—Ä–∏–º–∞–ª–∏ —ñ–º'—è
                        full_name = text.strip()
                        
                        send_message(
                            chat_id,
                            f"–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, <b>{full_name}</b>! üëã\n\n"
                            "–¢–µ–ø–µ—Ä –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É:",
                            reply_markup=get_contact_keyboard()
                        )
                        set_user_state(chat_id, "registering_phone", {
                            "username": user_data.get('username'),
                            "full_name": full_name
                        })
                    
                    elif user_data.get("state") == "registering_phone":
                        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è - –≤–≤–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤—Ä—É—á–Ω—É
                        phone = text.strip()
                        full_name = user_data.get('full_name', username)
                        
                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
                        database.save_user_profile(chat_id, username, full_name, phone)
                        
                        send_message(
                            chat_id,
                            f"‚úÖ –î—è–∫—É—î–º–æ, <b>{full_name}</b>!\n\n"
                            "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
                            reply_markup=get_main_menu()
                        )
                        clear_user_state(chat_id)
                    
                    elif user_data.get("state") == "checkout_phone":
                        # –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è - –≤–≤–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
                        phone = text.strip()
                        
                        profile = database.get_user_profile(chat_id)
                        if profile:
                            database.save_user_profile(chat_id, username, profile.get('full_name'), phone)
                        
                        send_message(
                            chat_id,
                            "‚úÖ –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
                            "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:",
                            reply_markup=get_location_keyboard()
                        )
                        set_user_state(chat_id, "checkout_address")
                    
                    elif user_data.get("state") == "checkout_address":
                        # –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è - –≤–∏–±—Ä–∞–ª–∏/–≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å—É
                        if text == "üìç –ù–æ–≤–∞ –∞–¥—Ä–µ—Å–∞":
                            send_message(
                                chat_id,
                                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:",
                                reply_markup=get_location_keyboard()
                            )
                            return
                        elif text == "üì≤ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é":
                            send_message(
                                chat_id,
                                "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:",
                                reply_markup=get_location_keyboard()
                            )
                            return
                        elif text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É":
                            send_message(
                                chat_id,
                                "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É (–≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):",
                                reply_markup={"remove_keyboard": True}
                            )
                            return
                        elif text.startswith("üìç"):
                            # –í–∏–±—Ä–∞–ª–∏ —ñ—Å–Ω—É—é—á—É –∞–¥—Ä–µ—Å—É
                            address = text.replace("üìç ", "").replace("...", "")
                            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É
                            addresses = database.get_user_addresses(chat_id)
                            full_address = next((a['address'] for a in addresses if a['address'].startswith(address)), text)
                            address = full_address
                        else:
                            # –í–≤–µ–ª–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É
                            address = text.strip()
                        
                        # –û—Ñ–æ—Ä–º–ª—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                        profile = database.get_user_profile(chat_id)
                        cart = get_cart(chat_id)
                        total = get_cart_total(chat_id)
                        order_id = f"ORD{int(time.time())}"
                        
                        if database.save_order(
                            order_id, chat_id, username, cart, total,
                            profile.get('phone'), address, f"Name: {profile.get('full_name')}"
                        ):
                            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–¥—Ä–µ—Å—É
                            database.save_user_address(chat_id, address)
                            database.update_address_last_used(chat_id, address)
                            
                            send_message(
                                chat_id,
                                f"‚úÖ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
                                f"üë§ {profile.get('full_name')}\n"
                                f"üìû {profile.get('phone')}\n"
                                f"üìç {address}\n\n"
                                f"üí∞ {total} –≥—Ä–Ω\n\n"
                                "–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!",
                                reply_markup=get_main_menu()
                            )
                            
                            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                            if config.OPERATOR_CHAT_ID:
                                op_msg = (
                                    f"üÜï <b>#{order_id}</b>\n\n"
                                    f"üë§ {profile.get('full_name')}\n"
                                    f"üìû {profile.get('phone')}\n"
                                    f"üìç {address}\n\n"
                                    "<b>–°—Ç—Ä–∞–≤–∏:</b>\n"
                                )
                                for item in cart:
                                    op_msg += f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price']*item['quantity']} –≥—Ä–Ω\n"
                                op_msg += f"\nüí∞ {total} –≥—Ä–Ω"
                                send_message(config.OPERATOR_CHAT_ID, op_msg)
                            
                            clear_cart(chat_id)
                            clear_user_state(chat_id)
                    
                    elif user_data.get("state") == "checkout_confirm":
                        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ —É—Ç–æ—á–Ω–µ–Ω–Ω—è–º –∞–¥—Ä–µ—Å–∏
                        address_details = text.strip()
                        latitude = user_data.get('latitude')
                        longitude = user_data.get('longitude')
                        
                        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É
                        if address_details.lower() not in ['ok', '—Ç–∞–∫', '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é']:
                            address = address_details
                        else:
                            address = user_data.get('address')
                        
                        # –û—Ñ–æ—Ä–º–ª—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ —è–∫ –≤–∏—â–µ)
                        profile = database.get_user_profile(chat_id)
                        cart = get_cart(chat_id)
                        total = get_cart_total(chat_id)
                        order_id = f"ORD{int(time.time())}"
                        
                        if database.save_order(
                            order_id, chat_id, username, cart, total,
                            profile.get('phone'), address, f"Name: {profile.get('full_name')}"
                        ):
                            database.save_user_address(chat_id, address, latitude, longitude)
                            
                            send_message(
                                chat_id,
                                f"‚úÖ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\n"
                                f"üë§ {profile.get('full_name')}\n"
                                f"üìû {profile.get('phone')}\n"
                                f"üìç {address}\n\n"
                                f"üí∞ {total} –≥—Ä–Ω\n\n"
                                "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
                                reply_markup=get_main_menu()
                            )
                            
                            if config.OPERATOR_CHAT_ID:
                                op_msg = (
                                    f"üÜï <b>#{order_id}</b>\n\n"
                                    f"üë§ {profile.get('full_name')}\n"
                                    f"üìû {profile.get('phone')}\n"
                                    f"üìç {address}\n"
                                    f"üó∫ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {latitude}, {longitude}\n\n"
                                    "<b>–°—Ç—Ä–∞–≤–∏:</b>\n"
                                )
                                for item in cart:
                                    op_msg += f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price']*item['quantity']} –≥—Ä–Ω\n"
                                op_msg += f"\nüí∞ {total} –≥—Ä–Ω"
                                send_message(config.OPERATOR_CHAT_ID, op_msg)
                            
                            clear_cart(chat_id)
                            clear_user_state(chat_id)

# ============================================================================
# HANDLERS
# ============================================================================

def handle_start(chat_id: int, username: str):
    send_message(chat_id, "üëã –í—ñ—Ç–∞—î–º–æ –≤ <b>Hubsy Bot</b>!\n\n–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–º–æ–≤–∏—Ç–∏ —Å–º–∞—á–Ω—É —ó–∂—É —à–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ.\n\nüîπ –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –º–µ–Ω—é\nüîπ –î–æ–¥–∞–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–≤–∏ –≤ –∫–æ—à–∏–∫\nüîπ –û—Ñ–æ—Ä–º–ª—è–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá", reply_markup=get_main_menu())
    database.log_activity(chat_id, "start", {"username": username})

def handle_menu(chat_id: int):
    if not menu_data:
        send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.")
        return
    restaurants = list(set(item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω') for item in menu_data if item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω')))
    if not restaurants:
        send_message(chat_id, "‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    msg = "üè™ <b>–û–ë–ï–†–Ü–¢–¨ –ó–ê–ö–õ–ê–î</b>\n" + "‚îÄ" * 30 + "\n\n"
    for r in restaurants:
        count = len([x for x in menu_data if x.get('–†–µ—Å—Ç–æ—Ä–∞–Ω') == r])
        msg += f"üçΩ <b>{r}</b>\n   {count} —Å—Ç—Ä–∞–≤\n\n"
    send_message(chat_id, msg, reply_markup=get_restaurants_keyboard())
    set_user_state(chat_id, "selecting_restaurant")

def handle_restaurant_selection(chat_id: int, restaurant: str):
    user_data = get_user_state(chat_id)
    user_data['selected_restaurant'] = restaurant
    set_user_state(chat_id, "selecting_category", user_data)
    cart = get_cart(chat_id)
    if cart and cart[0].get('restaurant') != restaurant:
        clear_cart(chat_id)
        send_message(chat_id, "üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ - —Å—Ç—Ä–∞–≤–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É.")
    msg = f"üè™ <b>{restaurant.upper()}</b>\n" + "‚îÄ" * 30 + "\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:"
    send_message(chat_id, msg, reply_markup=get_category_menu_for_restaurant(restaurant))

def handle_category(chat_id: int, category: str):
    user_data = get_user_state(chat_id)
    restaurant = user_data.get('selected_restaurant')
    if not restaurant:
        send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
        handle_menu(chat_id)
        return
    items = [item for item in menu_data if item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω') == restaurant and item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category]
    if not items:
        send_message(chat_id, f"‚ùå –ù–µ–º–∞—î —Å—Ç—Ä–∞–≤ —É '{category}'")
        return
    cart = get_cart(chat_id)
    cart_ids = [i.get('id') for i in cart]
    for item in items:
        item_id = item.get('ID')
        name = item.get('–°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        price = item.get('–¶—ñ–Ω–∞', 0)
        desc = item.get('–û–ø–∏—Å', '')
        photo = item.get('–§–æ—Ç–æ URL', '')
        rating = item.get('–†–µ–π—Ç–∏–Ω–≥', 0)
        prep = item.get('–ß–∞—Å_–ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è', 0)
        msg = f"üçΩ <b>{name}</b>\n\n"
        if desc:
            msg += f"üìù {desc}\n\n"
        msg += f"üí∞ <b>{price} –≥—Ä–Ω</b>\n"
        if rating:
            msg += f"‚≠ê {rating}/5\n"
        if prep:
            msg += f"‚è± {prep} —Ö–≤\n"
        in_cart = item_id in cart_ids
        if photo:
            send_photo(chat_id, photo, caption=msg, reply_markup=get_dish_inline_keyboard(item_id, in_cart))
        else:
            send_message(chat_id, msg, reply_markup=get_dish_inline_keyboard(item_id, in_cart))
    send_message(chat_id, f"{'‚îÄ' * 30}\nüìä {len(items)} —Å—Ç—Ä–∞–≤" + (f"\nüõí –í –∫–æ—à–∏–∫—É: {len(cart)}" if cart else ""), reply_markup=get_category_menu_for_restaurant(restaurant))

def handle_cart(chat_id: int):
    cart = get_cart(chat_id)
    if not cart:
        send_message(chat_id, "üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π\n\n–û–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤–∏ –∑ –º–µ–Ω—é üëá", reply_markup=get_main_menu())
        return
    total = get_cart_total(chat_id)
    restaurant = cart[0].get('restaurant', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
    msg = f"üõí <b>–í–ê–® –ö–û–®–ò–ö</b>\nüè™ <b>{restaurant}</b>\n{'‚îÄ' * 30}\n\n"
    for item in cart:
        msg += f"üîπ <b>{item.get('name')}</b>\n   {item.get('quantity')} x {item.get('price')} = {item.get('quantity') * item.get('price')} –≥—Ä–Ω\n\n"
    msg += f"{'‚îÄ' * 30}\nüí∞ <b>–†–∞–∑–æ–º: {total} –≥—Ä–Ω</b>"
    send_message(chat_id, msg, reply_markup=get_cart_keyboard())

def handle_checkout(chat_id: int, callback_query_id: str = None):
    if not get_cart(chat_id):
        if callback_query_id:
            answer_callback_query(callback_query_id, "üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
    send_message(chat_id, "üìù <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ:\n\n<b>–Ü–º'—è</b>\n<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>\n<b>–ê–¥—Ä–µ—Å–∞</b>\n\n–ü—Ä–∏–∫–ª–∞–¥:\n–Ü–≤–∞–Ω\n+380501234567\n–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1")
    set_user_state(chat_id, "checkout")

# ============================================================================
# CALLBACKS
# ============================================================================

def handle_callback(callback_data: str, chat_id: int, message_id: int, callback_query_id: str):
    if callback_data.startswith("add_"):
        item_id = callback_data.replace("add_", "")
        item = next((x for x in menu_data if str(x.get('ID')) == str(item_id)), None)
        if item:
            user_data = get_user_state(chat_id)
            restaurant = user_data.get('selected_restaurant') or item.get('–†–µ—Å—Ç–æ—Ä–∞–Ω')
            cart = get_cart(chat_id)
            if cart and cart[0].get('restaurant') != restaurant:
                answer_callback_query(callback_query_id, "‚ùå –¢—ñ–ª—å–∫–∏ –∑ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É!", show_alert=True)
                return
            add_to_cart(chat_id, {'id': item_id, 'name': item.get('–°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏'), 'price': item.get('–¶—ñ–Ω–∞', 0), 'restaurant': restaurant, 'quantity': 1})
            qty = sum(x['quantity'] for x in get_cart(chat_id) if x.get('id') == item_id)
            answer_callback_query(callback_query_id, f"‚úÖ –î–æ–¥–∞–Ω–æ! {qty} —à—Ç")
            try:
                edit_message(chat_id, message_id, reply_markup=get_dish_inline_keyboard(item_id, True))
            except:
                pass
    elif callback_data.startswith("remove_one_"):
        item_id = callback_data.replace("remove_one_", "")
        for item in get_cart(chat_id):
            if item.get('id') == item_id:
                if item['quantity'] > 1:
                    item['quantity'] -= 1
                    answer_callback_query(callback_query_id, f"‚úÖ {item['quantity']} —à—Ç")
                else:
                    remove_from_cart(chat_id, item_id)
                    answer_callback_query(callback_query_id, "üóë –í–∏–¥–∞–ª–µ–Ω–æ")
                    try:
                        edit_message(chat_id, message_id, reply_markup=get_dish_inline_keyboard(item_id, False))
                    except:
                        pass
                break
    elif callback_data == "checkout":
        handle_checkout(chat_id, callback_query_id)
    elif callback_data == "clear_cart":
        clear_cart(chat_id)
        answer_callback_query(callback_query_id, "üóë –û—á–∏—â–µ–Ω–æ")
        handle_cart(chat_id)
    elif callback_data == "back_to_menu":
        handle_menu(chat_id)
    elif callback_data == "back_to_category":
        user_data = get_user_state(chat_id)
        if user_data.get('selected_restaurant'):
            handle_restaurant_selection(chat_id, user_data['selected_restaurant'])
        else:
            handle_menu(chat_id)

# ============================================================================
# WEBHOOK
# ============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        update = request.json
        logger.info(f"üì• Webhook: {update.get('update_id')}")
        
        if 'message' in update:
            msg = update['message']
            chat_id = msg['chat']['id']
            username = msg['from'].get('username', 'Unknown')
            
            if 'text' in msg:
                text = msg['text']
                
                if text == '/start':
                    handle_start(chat_id, username)
                elif text in ['/menu', 'üìã –ú–µ–Ω—é']:
                    handle_menu(chat_id)
                elif text in ['/cart', 'üõí –ö–æ—à–∏–∫']:
                    handle_cart(chat_id)
                elif text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
                    send_message(chat_id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
                    clear_user_state(chat_id)
                else:
                    user_data = get_user_state(chat_id)
                    if user_data.get("state") == "selecting_restaurant":
                        handle_restaurant_selection(chat_id, text)
                    elif user_data.get("state") == "selecting_category":
                        if text == "üõí –ö–æ—à–∏–∫":
                            handle_cart(chat_id)
                        elif text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
                            handle_menu(chat_id)
                        else:
                            handle_category(chat_id, text)
                    elif user_data.get("state") == "checkout":
                        lines = text.strip().split('\n')
                        if len(lines) >= 3:
                            name, phone, address = lines[0], lines[1], '\n'.join(lines[2:])
                            cart = get_cart(chat_id)
                            total = get_cart_total(chat_id)
                            order_id = f"ORD{int(time.time())}"
                            if database.save_order(order_id, chat_id, username, cart, total, phone, address, f"Name: {name}"):
                                send_message(chat_id, f"‚úÖ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}</b>\n\nüë§ {name}\nüìû {phone}\nüìç {address}\n\nüí∞ {total} –≥—Ä–Ω\n\n–ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏!", reply_markup=get_main_menu())
                                if config.OPERATOR_CHAT_ID:
                                    op_msg = f"üÜï <b>#{order_id}</b>\n\nüë§ {name}\nüìû {phone}\nüìç {address}\n\n<b>–°—Ç—Ä–∞–≤–∏:</b>\n"
                                    for item in cart:
                                        op_msg += f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price']*item['quantity']} –≥—Ä–Ω\n"
                                    op_msg += f"\nüí∞ {total} –≥—Ä–Ω"
                                    send_message(config.OPERATOR_CHAT_ID, op_msg)
                                clear_cart(chat_id)
                                clear_user_state(chat_id)
                        else:
                            send_message(chat_id, "‚ùå –§–æ—Ä–º–∞—Ç: –Ü–º'—è\n–¢–µ–ª–µ—Ñ–æ–Ω\n–ê–¥—Ä–µ—Å–∞")
        
        elif 'callback_query' in update:
            cb = update['callback_query']
            handle_callback(cb['data'], cb['message']['chat']['id'], cb['message']['message_id'], cb['id'])
        
        return jsonify({"ok": True}), 200
    except Exception as e:
        logger.error(f"Webhook error: {e}", exc_info=True)
        return jsonify({"ok": False}), 500

# ============================================================================
# ROUTES
# ============================================================================

@app.route('/')
def index():
    return jsonify({"status": "ok", "bot": "Hubsy Bot", "version": "3.3.0"})

@app.route('/health')
def health():
    db_ok, db_info = database.test_connection()
    return jsonify({"status": "healthy" if db_ok else "degraded", "database": db_info, "menu_items": len(menu_data)})

@app.route('/sync-menu', methods=['POST'])
def sync_menu():
    global menu_data
    try:
        if database.USE_POSTGRES:
            if database.sync_menu_from_sheets():
                menu_data = database.get_menu_from_postgres()
                return jsonify({"status": "success", "message": f"Synced: {len(menu_data)} items"}), 200
            return jsonify({"status": "error", "message": "Sync failed"}), 500
        return jsonify({"status": "error", "message": "Not using PostgreSQL"}), 400
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', config.PORT))
    app.run(host='0.0.0.0', port=port, debug=config.DEBUG)
