import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç —Å–µ—Ä–≤—ñ—Å—ñ–≤ —Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
try:
    from services.sheets import init_gspread_client, is_sheets_connected
    from services.gemini import init_gemini_client, is_gemini_connected
    from handlers.commands import handle_start, handle_help, handle_menu, handle_order
    from handlers.messages import handle_text_message
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –º–æ–¥—É–ª—ñ–≤: {e}")
    raise

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://ferrik-bot-zvev.onrender.com')

if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    raise ValueError("TELEGRAM_BOT_TOKEN is required")


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏"""
    logger.info("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FerrikFootBot...")
    
    # Google Sheets
    sheets_ok = init_gspread_client()
    if sheets_ok:
        logger.info("‚úÖ Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
    else:
        logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ. –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ.")
    
    # Gemini AI
    gemini_ok = init_gemini_client()
    if gemini_ok:
        logger.info("‚úÖ Gemini AI –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
    else:
        logger.warning("‚ö†Ô∏è Gemini AI –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
    
    logger.info("üéâ FerrikFootBot –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    return sheets_ok, gemini_ok


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
init_services()


# ============= ROUTES =============

@app.route('/')
def home():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ - –ø–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    return jsonify({
        "status": "running",
        "bot": "FerrikFootBot",
        "version": "1.0",
        "services": {
            "google_sheets": is_sheets_connected(),
            "gemini_ai": is_gemini_connected()
        },
        "timestamp": datetime.now().isoformat()
    })


@app.route('/health')
def health():
    """Health check –¥–ª—è Render"""
    sheets_status = is_sheets_connected()
    gemini_status = is_gemini_connected()
    
    status_code = 200 if (sheets_status or gemini_status) else 503
    
    return jsonify({
        "status": "healthy" if status_code == 200 else "degraded",
        "services": {
            "google_sheets": sheets_status,
            "gemini_ai": gemini_status
        }
    }), status_code


@app.route('/webhook', methods=['POST'])
def webhook():
    """
    –û–±—Ä–æ–±–Ω–∏–∫ webhook –≤—ñ–¥ Telegram
    """
    try:
        update = request.get_json()
        
        if not update:
            logger.warning("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π update")
            return jsonify({"ok": True}), 200
        
        logger.info(f"üì® Received update: {update.keys()}")
        
        # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω—å
        if 'message' in update:
            handle_message(update['message'])
        elif 'callback_query' in update:
            handle_callback_query(update['callback_query'])
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø update: {update.keys()}")
        
        return jsonify({"ok": True}), 200
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook: {e}", exc_info=True)
        return jsonify({"ok": False, "error": str(e)}), 500


def handle_message(message):
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text', '')
        user = message.get('from', {})
        
        logger.info(f"üë§ Message from {user.get('username', 'unknown')}: {text}")
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith('/'):
            handle_command(chat_id, text, user)
        else:
            # –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (—á–µ—Ä–µ–∑ AI)
            handle_text_message(chat_id, text, user)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}", exc_info=True)


def handle_command(chat_id, command, user):
    """–†–æ–∑–ø–æ–¥—ñ–ª—è—î –∫–æ–º–∞–Ω–¥–∏ –ø–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º"""
    try:
        cmd = command.split()[0].lower()
        
        handlers = {
            '/start': handle_start,
            '/help': handle_help,
            '/menu': handle_menu,
            '/order': handle_order
        }
        
        handler = handlers.get(cmd)
        if handler:
            handler(chat_id, user)
        else:
            send_message(chat_id, f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {cmd}\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏: {e}", exc_info=True)
        send_message(chat_id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏")


def handle_callback_query(callback_query):
    """–û–±—Ä–æ–±–ª—è—î callback –≤—ñ–¥ inline –∫–Ω–æ–ø–æ–∫"""
    try:
        callback_id = callback_query.get('id')
        chat_id = callback_query.get('message', {}).get('chat', {}).get('id')
        data = callback_query.get('data')
        
        logger.info(f"üîò Callback: {data}")
        
        # –¢—É—Ç –¥–æ–¥–∞–π—Ç–µ –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ callback
        # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–±—ñ—Ä —Å—Ç—Ä–∞–≤ –∑ –º–µ–Ω—é
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback
        answer_callback_query(callback_id, "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback: {e}", exc_info=True)


def send_message(chat_id, text, reply_markup=None):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram"""
    import requests
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = reply_markup
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        return None


def answer_callback_query(callback_id, text):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ callback query"""
    import requests
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery"
    payload = {
        "callback_query_id": callback_id,
        "text": text
    }
    
    try:
        requests.post(url, json=payload, timeout=10)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback: {e}")


# –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
if __name__ == '__main__':
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)