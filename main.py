"""
Hubsy Bot - Telegram Bot –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ
Version 3.0 - –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π UX —Ç–∞ –±–µ–∑–ø–µ–∫–∞

–ê–≤—Ç–æ—Ä: Claude AI + ferrik
–î–∞—Ç–∞: 2025-10-08
"""

import os
import sys
import logging
import html
from collections import defaultdict
from threading import RLock
from datetime import datetime

from flask import Flask, request, jsonify
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .env
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)
logger.info("üöÄ Starting Hubsy Bot v3.0...")

# =============================================================================
# –Ü–ú–ü–û–†–¢ CONFIG
# =============================================================================

try:
    import bot_config as config
    
    BOT_TOKEN = config.BOT_TOKEN
    WEBHOOK_SECRET = config.WEBHOOK_SECRET
    GOOGLE_SHEET_ID = config.GOOGLE_SHEET_ID
    OPERATOR_CHAT_ID = getattr(config, 'OPERATOR_CHAT_ID', None)
    
    logger.info("‚úÖ Config loaded")
    
except Exception as e:
    logger.critical(f"Config error: {e}")
    sys.exit(1)

# =============================================================================
# –Ü–ú–ü–û–†–¢–ò –°–ï–†–í–Ü–°–Ü–í
# =============================================================================

try:
    from services import telegram as tg_service
    from services import sheets as sheets_service
    from services import database as db_service
    
    # Gemini –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
    AI_ENABLED = False
    try:
        from services import gemini as ai_service
        if hasattr(config, 'GEMINI_API_KEY') and config.GEMINI_API_KEY:
            AI_ENABLED = True
            logger.info("‚úÖ AI search enabled")
    except:
        pass
    
    logger.info("‚úÖ Services loaded")
    
except Exception as e:
    logger.error(f"Services import error: {e}")
    sys.exit(1)

# =============================================================================
# FLASK APP
# =============================================================================

app = Flask(__name__)

# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü
# =============================================================================

# –°—Ç–∞–Ω–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ)
user_sessions = defaultdict(dict)
user_sessions_lock = RLock()

# –ö–æ—Ä–∑–∏–Ω–∏
user_carts = defaultdict(dict)
user_carts_lock = RLock()

# –ö–µ—à –º–µ–Ω—é
menu_cache = []
menu_cache_lock = RLock()
menu_last_update = None

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
MAX_CART_ITEMS = 50
MAX_ITEM_QUANTITY = 99
MENU_CACHE_TTL = 15 * 60  # 15 —Ö–≤–∏–ª–∏–Ω

logger.info("‚úÖ Initialized")

# =============================================================================
# –°–¢–ê–ù–ò –ö–û–†–ò–°–¢–£–í–ê–ß–ê (FSM Light)
# =============================================================================

class UserState:
    """–°—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    MAIN_MENU = "main"
    BROWSING_CATEGORIES = "categories"
    BROWSING_ITEMS = "items"
    VIEWING_ITEM = "item"
    IN_CART = "cart"
    SEARCHING = "search"
    CHECKOUT_PHONE = "checkout_phone"
    CHECKOUT_ADDRESS = "checkout_address"
    CHECKOUT_CONFIRM = "checkout_confirm"


def get_session(chat_id):
    """–û—Ç—Ä–∏–º—É—î —Å–µ—Å—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    with user_sessions_lock:
        if chat_id not in user_sessions:
            user_sessions[chat_id] = {
                'state': UserState.MAIN_MENU,
                'data': {},
                'history': []
            }
        return user_sessions[chat_id]


def set_state(chat_id, new_state, **data):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω"""
    session = get_session(chat_id)
    
    # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –¥–ª—è "–ù–∞–∑–∞–¥"
    if session['state'] != new_state:
        session['history'].append(session['state'])
        # –û–±–º–µ–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
        if len(session['history']) > 10:
            session['history'] = session['history'][-10:]
    
    session['state'] = new_state
    session['data'].update(data)
    
    logger.debug(f"User {chat_id}: state changed to {new_state}")


def get_state(chat_id):
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω"""
    return get_session(chat_id)['state']


def get_data(chat_id, key, default=None):
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É"""
    return get_session(chat_id)['data'].get(key, default)


def go_back(chat_id):
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É"""
    session = get_session(chat_id)
    if session['history']:
        previous_state = session['history'].pop()
        session['state'] = previous_state
        return previous_state
    return session['state']


# =============================================================================
# –ú–ï–ù–Æ
# =============================================================================

def get_menu(force_refresh=False):
    """–û—Ç—Ä–∏–º—É—î –º–µ–Ω—é –∑ –∫–µ—à–µ–º"""
    global menu_cache, menu_last_update
    
    with menu_cache_lock:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TTL
        now = datetime.now()
        if menu_last_update and not force_refresh:
            age = (now - menu_last_update).total_seconds()
            if age < MENU_CACHE_TTL and menu_cache:
                logger.debug(f"Menu cache hit (age: {age:.0f}s)")
                return menu_cache
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ Sheets
        logger.info("üì• Loading menu from Sheets...")
        try:
            menu_cache = sheets_service.get_menu_from_sheet()
            menu_last_update = now
            logger.info(f"‚úÖ Menu loaded: {len(menu_cache)} items")
            return menu_cache
        except Exception as e:
            logger.error(f"Failed to load menu: {e}")
            return menu_cache if menu_cache else []


def get_categories():
    """–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    menu = get_menu()
    categories = sorted(set(item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ') for item in menu))
    return [cat for cat in categories if cat]


def get_items_by_category(category):
    """–¢–æ–≤–∞—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
    menu = get_menu()
    return [item for item in menu if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category]


def find_item(item_name):
    """–ó–Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –∑–∞ –Ω–∞–∑–≤–æ—é"""
    menu = get_menu()
    for item in menu:
        if item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏') == item_name:
            return item
    return None


# =============================================================================
# –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø (–∑ –±–µ–∑–ø–µ—á–Ω–∏–º HTML)
# =============================================================================

def safe_escape(text):
    """–ë–µ–∑–ø–µ—á–Ω–∏–π HTML escape"""
    return html.escape(str(text or ""))


def format_item(item):
    """–§–æ—Ä–º–∞—Ç—É—î —Ç–æ–≤–∞—Ä"""
    name = safe_escape(item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏'))
    category = safe_escape(item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', ''))
    price = safe_escape(item.get('–¶—ñ–Ω–∞', '0'))
    desc = safe_escape(item.get('–û–ø–∏—Å', ''))
    
    text = f"üçΩ <b>{name}</b>\n\n"
    if desc:
        text += f"{desc}\n\n"
    text += f"üìÇ {category}\n"
    text += f"üí∞ <b>{price} –≥—Ä–Ω</b>"
    
    return text


def format_cart_summary(chat_id):
    """Summary –∫–æ—Ä–∑–∏–Ω–∏"""
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    if not cart:
        return "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è\n\n–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –∑ –º–µ–Ω—é!"
    
    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    
    for item_name, qty in cart.items():
        item = find_item(item_name)
        if item:
            name = safe_escape(item['–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏'])
            price = float(item.get('–¶—ñ–Ω–∞', 0))
            subtotal = price * qty
            total += subtotal
            
            text += f"‚Ä¢ {name}\n"
            text += f"  {price:.2f} –≥—Ä–Ω √ó {qty} = {subtotal:.2f} –≥—Ä–Ω\n\n"
    
    text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += f"üí∞ <b>–†–∞–∑–æ–º: {total:.2f} –≥—Ä–Ω</b>"
    
    return text


def get_breadcrumbs(chat_id):
    """–ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ breadcrumbs"""
    state = get_state(chat_id)
    
    breadcrumbs = {
        UserState.MAIN_MENU: "üè† –ì–æ–ª–æ–≤–Ω–∞",
        UserState.BROWSING_CATEGORIES: "üè† –ì–æ–ª–æ–≤–Ω–∞ ‚Üí üìã –ú–µ–Ω—é",
        UserState.BROWSING_ITEMS: "üè† –ì–æ–ª–æ–≤–Ω–∞ ‚Üí üìã –ú–µ–Ω—é ‚Üí –ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
        UserState.IN_CART: "üè† –ì–æ–ª–æ–≤–Ω–∞ ‚Üí üõí –ö–æ—Ä–∑–∏–Ω–∞",
        UserState.SEARCHING: "üè† –ì–æ–ª–æ–≤–Ω–∞ ‚Üí üîç –ü–æ—à—É–∫",
    }
    
    return breadcrumbs.get(state, "")


# =============================================================================
# TELEGRAM HELPERS
# =============================================================================

def send_message(chat_id, text, reply_markup=None, parse_mode='HTML'):
    """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        # –î–æ–¥–∞—Ç–∏ breadcrumbs —è–∫—â–æ –Ω–µ –≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        state = get_state(chat_id)
        if state != UserState.MAIN_MENU:
            breadcrumb = get_breadcrumbs(chat_id)
            if breadcrumb:
                text = f"<i>{breadcrumb}</i>\n\n{text}"
        
        return tg_service.tg_send_message(chat_id, text, reply_markup, parse_mode)
    except Exception as e:
        logger.error(f"Send message error: {e}")
        return None


def create_keyboard(buttons, one_time=False):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É"""
    return {
        "keyboard": buttons,
        "resize_keyboard": True,
        "one_time_keyboard": one_time
    }


def create_inline_keyboard(buttons):
    """Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞"""
    return {"inline_keyboard": buttons}


# =============================================================================
# –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# =============================================================================

def main_menu_keyboard():
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    buttons = [
        [{"text": "üìã –ú–µ–Ω—é"}, {"text": "üõí –ö–æ—Ä–∑–∏–Ω–∞"}]
    ]
    
    if AI_ENABLED:
        buttons.append([{"text": "üîç –ü–æ—à—É–∫"}, {"text": "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"}])
    else:
        buttons.append([{"text": "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"}])
    
    return create_keyboard(buttons)


def categories_keyboard():
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    categories = get_categories()
    
    buttons = []
    for i in range(0, len(categories), 2):
        row = [{"text": f"üìÇ {cat}", "callback_data": f"cat:{cat}"} 
               for cat in categories[i:i+2]]
        buttons.append(row)
    
    buttons.append([{"text": "üè† –ì–æ–ª–æ–≤–Ω–∞", "callback_data": "home"}])
    
    return create_inline_keyboard(buttons)


def item_keyboard(item_name):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä—É"""
    return create_inline_keyboard([
        [{"text": "‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", "callback_data": f"add:{item_name}"}],
        [
            {"text": "‚óÄÔ∏è –ù–∞–∑–∞–¥", "callback_data": "back"},
            {"text": "üè† –ì–æ–ª–æ–≤–Ω–∞", "callback_data": "home"}
        ]
    ])


def cart_keyboard(has_items=False):
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–æ—Ä–∑–∏–Ω–∏"""
    if has_items:
        return create_keyboard([
            [{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"}],
            [{"text": "üóë –û—á–∏—Å—Ç–∏—Ç–∏"}, {"text": "üîô –î–æ –º–µ–Ω—é"}]
        ])
    else:
        return create_keyboard([
            [{"text": "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é"}],
            [{"text": "üè† –ì–æ–ª–æ–≤–Ω–∞"}]
        ])


# =============================================================================
# –û–ë–†–û–ë–ù–ò–ö–ò –ö–û–ú–ê–ù–î
# =============================================================================

def handle_start(chat_id):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    set_state(chat_id, UserState.MAIN_MENU)
    
    text = (
        "üëã <b>–í—ñ—Ç–∞—î–º–æ –≤ Hubsy Bot!</b>\n\n"
        "üçΩ –ó–∞–º–æ–≤–ª—è–π—Ç–µ —É–ª—é–±–ª–µ–Ω—ñ —Å—Ç—Ä–∞–≤–∏\n"
        "‚ö°Ô∏è –®–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ\n"
        "üöÄ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 30-40 —Ö–≤–∏–ª–∏–Ω\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
    )
    
    send_message(chat_id, text, reply_markup=main_menu_keyboard())


def handle_menu(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é"""
    set_state(chat_id, UserState.BROWSING_CATEGORIES)
    
    categories = get_categories()
    
    text = (
        "üìã <b>–ù–∞—à–µ –º–µ–Ω—é</b>\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ({len(categories)} –¥–æ—Å—Ç—É–ø–Ω–æ):"
    )
    
    send_message(chat_id, text, reply_markup=categories_keyboard())


def handle_category(chat_id, category):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    items = get_items_by_category(category)
    
    if not items:
        send_message(chat_id, f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è <b>{category}</b> –ø–æ—Ä–æ–∂–Ω—è")
        return
    
    set_state(chat_id, UserState.BROWSING_ITEMS, category=category, item_index=0)
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä
    show_item(chat_id, items[0], 0, len(items))


def show_item(chat_id, item, index, total):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é"""
    text = format_item(item)
    
    # –î–æ–¥–∞—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é —è–∫—â–æ –±—ñ–ª—å—à–µ 1 —Ç–æ–≤–∞—Ä—É
    if total > 1:
        text += f"\n\n<i>–¢–æ–≤–∞—Ä {index + 1} –∑ {total}</i>"
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
    category = get_data(chat_id, 'category')
    buttons = []
    
    # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    if total > 1:
        nav_row = []
        if index > 0:
            nav_row.append({"text": "‚óÄÔ∏è", "callback_data": f"prev:{category}:{index}"})
        nav_row.append({"text": f"{index + 1}/{total}", "callback_data": "noop"})
        if index < total - 1:
            nav_row.append({"text": "‚ñ∂Ô∏è", "callback_data": f"next:{category}:{index}"})
        buttons.append(nav_row)
    
    # –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
    item_name = item['–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏']
    buttons.append([{"text": "‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", "callback_data": f"add:{item_name}"}])
    
    # –ù–∞–∑–∞–¥
    buttons.append([
        {"text": "‚óÄÔ∏è –î–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", "callback_data": "back"},
        {"text": "üè† –ì–æ–ª–æ–≤–Ω–∞", "callback_data": "home"}
    ])
    
    send_message(chat_id, text, reply_markup=create_inline_keyboard(buttons))


def handle_add_to_cart(chat_id, item_name):
    """–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    item = find_item(item_name)
    
    if not item:
        send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    with user_carts_lock:
        cart = user_carts[chat_id]
        
        if len(cart) >= MAX_CART_ITEMS:
            send_message(chat_id, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_CART_ITEMS} –≤–∏–¥—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤")
            return
        
        qty = cart.get(item_name, 0)
        
        if qty >= MAX_ITEM_QUANTITY:
            send_message(chat_id, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_ITEM_QUANTITY} —à—Ç")
            return
        
        cart[item_name] = qty + 1
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥—å
    name = safe_escape(item['–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏'])
    new_qty = cart[item_name]
    
    text = f"‚úÖ <b>{name}</b> –¥–æ–¥–∞–Ω–æ!\n\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {new_qty} —à—Ç"
    
    # –®–≤–∏–¥–∫—ñ –¥—ñ—ó
    keyboard = create_inline_keyboard([
        [
            {"text": "‚ûï –©–µ –æ–¥–∏–Ω", "callback_data": f"add:{item_name}"},
            {"text": "üõí –ö–æ—Ä–∑–∏–Ω–∞", "callback_data": "cart"}
        ],
        [{"text": "‚óÄÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", "callback_data": "back"}]
    ])
    
    send_message(chat_id, text, reply_markup=keyboard)


def handle_cart(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É"""
    set_state(chat_id, UserState.IN_CART)
    
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    summary = format_cart_summary(chat_id)
    
    send_message(chat_id, summary, reply_markup=cart_keyboard(bool(cart)))


def handle_clear_cart(chat_id):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É"""
    with user_carts_lock:
        user_carts[chat_id] = {}
    
    send_message(
        chat_id,
        "‚úÖ –ö–æ—Ä–∑–∏–Ω—É –æ—á–∏—â–µ–Ω–æ",
        reply_markup=main_menu_keyboard()
    )
    set_state(chat_id, UserState.MAIN_MENU)


def handle_search(chat_id):
    """–ü–æ—à—É–∫"""
    if not AI_ENABLED:
        send_message(
            chat_id,
            "‚ùå –ü–æ—à—É–∫ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n\n–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –º–µ–Ω—é: /menu"
        )
        return
    
    set_state(chat_id, UserState.SEARCHING)
    
    text = (
        "üîç <b>AI –ü–æ—à—É–∫</b>\n\n"
        "–û–ø–∏—à—ñ—Ç—å —â–æ —à—É–∫–∞—î—Ç–µ:\n"
        "‚Ä¢ \"—â–æ—Å—å –≥–æ—Å—Ç—Ä–µ\"\n"
        "‚Ä¢ \"–≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Å—å–∫–µ\"\n"
        "‚Ä¢ \"–¥–µ—Å–µ—Ä—Ç\"\n\n"
        "–ê–±–æ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è"
    )
    
    keyboard = create_keyboard([[{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]], one_time=True)
    
    send_message(chat_id, text, reply_markup=keyboard)


def handle_search_query(chat_id, query):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É"""
    send_message(chat_id, "üîç –®—É–∫–∞—é...")
    
    try:
        results = ai_service.search_menu(query, get_menu())
        
        if results:
            text = f"‚ú® –ó–Ω–∞–π–¥–µ–Ω–æ <b>{len(results)}</b> —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:\n"
            send_message(chat_id, text)
            
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ 5
            for item in results[:5]:
                item_text = format_item(item)
                item_name = item['–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏']
                
                keyboard = create_inline_keyboard([
                    [{"text": "‚ûï –í –∫–æ—Ä–∑–∏–Ω—É", "callback_data": f"add:{item_name}"}]
                ])
                
                send_message(chat_id, item_text, reply_markup=keyboard)
        else:
            text = (
                "üòî –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ —Å–ª–æ–≤–∞ –∞–±–æ\n"
                "–ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: /menu"
            )
            send_message(chat_id, text)
        
        set_state(chat_id, UserState.MAIN_MENU)
        send_message(chat_id, "–©–æ –¥–∞–ª—ñ?", reply_markup=main_menu_keyboard())
        
    except Exception as e:
        logger.error(f"Search error: {e}")
        send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É")


def handle_help(chat_id):
    """–î–æ–ø–æ–º–æ–≥–∞"""
    text = (
        "‚ÑπÔ∏è <b>–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:</b>\n\n"
        "1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å <b>üìã –ú–µ–Ω—é</b>\n"
        "2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é\n"
        "3Ô∏è‚É£ –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –≤ <b>üõí –ö–æ—Ä–∑–∏–Ω—É</b>\n"
        "4Ô∏è‚É£ –û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n"
        "<b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é\n"
        "/cart - –ö–æ—Ä–∑–∏–Ω–∞\n"
        "/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥—ñ—é\n"
        "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
        "‚ùì –ü–∏—Ç–∞–Ω–Ω—è? –ü–∏—à—ñ—Ç—å @support"
    )
    
    send_message(chat_id, text, reply_markup=main_menu_keyboard())


# =============================================================================
# CHECKOUT
# =============================================================================

def handle_checkout_start(chat_id):
    """–ü–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"""
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    if not cart:
        send_message(chat_id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è")
        return
    
    set_state(chat_id, UserState.CHECKOUT_PHONE)
    
    text = (
        "üìù <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
        "–ö—Ä–æ–∫ 1 –∑ 3\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:"
    )
    
    keyboard = create_keyboard([
        [{"text": "üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", "request_contact": True}],
        [{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]
    ], one_time=True)
    
    send_message(chat_id, text, reply_markup=keyboard)


def handle_contact(chat_id, contact):
    """–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç"""
    phone = contact.get('phone_number')
    
    if not phone:
        send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞")
        return
    
    set_state(chat_id, UserState.CHECKOUT_ADDRESS, phone=phone)
    
    text = (
        "üìù <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
        "–ö—Ä–æ–∫ 2 –∑ 3\n\n"
        f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )
    
    keyboard = create_keyboard([[{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]], one_time=True)
    
    send_message(chat_id, text, reply_markup=keyboard)


def handle_address(chat_id, address):
    """–û—Ç—Ä–∏–º–∞–Ω–æ –∞–¥—Ä–µ—Å—É"""
    if len(address) < 10:
        send_message(chat_id, "‚ùå –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ (–º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤)")
        return
    
    phone = get_data(chat_id, 'phone')
    
    set_state(chat_id, UserState.CHECKOUT_CONFIRM, address=address)
    
    # –§—ñ–Ω–∞–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    summary = format_cart_summary(chat_id)
    
    text = (
        "üìù <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
        "–ö—Ä–æ–∫ 3 –∑ 3\n\n"
        f"{summary}\n\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {safe_escape(address)}\n\n"
        "–í—Å–µ –≤—ñ—Ä–Ω–æ?"
    )
    
    keyboard = create_keyboard([
        [{"text": "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"}],
        [{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]
    ], one_time=True)
    
    send_message(chat_id, text, reply_markup=keyboard)


def handle_confirm_order(chat_id):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    if not cart:
        send_message(chat_id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è")
        return
    
    phone = get_data(chat_id, 'phone')
    address = get_data(chat_id, 'address')
    
    try:
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É
        total = 0
        for item_name, qty in cart.items():
            item = find_item(item_name)
            if item:
                total += float(item.get('–¶—ñ–Ω–∞', 0)) * qty
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏
        contact_info = {'phone': phone, 'address': address}
        order_id = db_service.save_order(chat_id, cart, contact_info, str(total))
        
        if not order_id:
            raise Exception("Save failed")
        
        # –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É
        with user_carts_lock:
            user_carts[chat_id] = {}
        
        set_state(chat_id, UserState.MAIN_MENU)
        
        # Sheets sync (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        try:
            sheets_service.save_order_to_sheets(order_id, cart, contact_info)
        except:
            pass
        
        # –û–ø–µ—Ä–∞—Ç–æ—Ä—É
        if OPERATOR_CHAT_ID:
            try:
                op_text = (
                    f"üÜï <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}</b>\n\n"
                    f"{format_cart_summary(chat_id)}\n\n"
                    f"üì± {phone}\n"
                    f"üìç {address}"
                )
                send_message(OPERATOR_CHAT_ID, op_text)
            except:
                pass
        
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        text = (
            f"‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
            f"üí∞ –°—É–º–∞: {total:.2f} –≥—Ä–Ω\n\n"
            "üéâ –î—è–∫—É—î–º–æ!\n"
            "–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏\n"
            "–ø—Ä–æ—Ç—è–≥–æ–º 5-10 —Ö–≤–∏–ª–∏–Ω\n\n"
            "–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞!"
        )
        
        send_message(chat_id, text, reply_markup=main_menu_keyboard())
        
        logger.info(f"‚úÖ Order {order_id} created")
        
    except Exception as e:
        logger.error(f"Checkout failed: {e}")
        send_message(
            chat_id,
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=main_menu_keyboard()
        )


# =============================================================================
# WEBHOOK
# =============================================================================

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ secret
    secret = request.headers.get('X-Telegram-Bot-Api-Secret-Token')
    
    if secret != WEBHOOK_SECRET:
        logger.warning(f"‚ùå Auth failed from {request.remote_addr}")
        return jsonify({"error": "Unauthorized"}), 401
    
    try:
        update = request.get_json()
        
        if not update:
            return jsonify({"status": "ok"}), 200
        
        # Message
        if 'message' in update:
            msg = update['message']
            chat_id = msg['chat']['id']
            
            # –¢–µ–∫—Å—Ç
            if 'text' in msg:
                text = msg['text']
                
                # –ö–æ–º–∞–Ω–¥–∏
                if text.startswith('/'):
                    if text == '/start':
                        handle_start(chat_id)
                    elif text == '/menu':
                        handle_menu(chat_id)
                    elif text == '/cart':
                        handle_cart(chat_id)
                    elif text == '/help':
                        handle_help(chat_id)
                    elif text == '/cancel':
                        set_state(chat_id, UserState.MAIN_MENU)
                        send_message(chat_id, "‚úÖ –°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=main_menu_keyboard())
                    else:
                        send_message(chat_id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞\n\n/help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏")
                
                else: