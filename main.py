import os, sys, logging, uuid, random, json
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from collections import defaultdict
from threading import RLock
from datetime import datetime

load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

try:
    import bot_config as config
    from services import telegram as tg_service
    from services import sheets as sheets_service
    from services import database as db_service
except Exception as e:
    logger.critical(f"Import failed: {e}")
    sys.exit(1)

app = Flask(__name__)

user_states = {}
user_carts = defaultdict(dict)
menu_cache = []
user_states_lock = RLock()
user_carts_lock = RLock()
menu_cache_lock = RLock()

MAX_CART_ITEMS = 50
MAX_ITEM_QUANTITY = 99

class State:
    MAIN_MENU = "main_menu"
    BROWSING_CATEGORIES = "browsing_categories"
    VIEWING_ITEM = "viewing_item"
    IN_CART = "in_cart"
    CHECKOUT_PHONE = "checkout_phone"
    CHECKOUT_ADDRESS = "checkout_address"
    CHECKOUT_CONFIRM = "checkout_confirm"

GREETINGS = [
    "üëã –ü—Ä–∏–≤—ñ—Ç! –ì–æ—Ç–æ–≤–∏–π —â–æ—Å—å —Å–º–∞—á–Ω–µ–Ω—å–∫–µ?",
    "üçΩÔ∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!",
    "üòã –ì–æ–ª–æ–¥–Ω–∏–π?",
    "üéâ –í—ñ—Ç–∞—î–º–æ!",
    "üë®‚Äçüç≥ –®–µ—Ñ —á–µ–∫–∞—î –Ω–∞ —Ç–µ–±–µ!",
]

def get_menu():
    global menu_cache
    with menu_cache_lock:
        if not menu_cache:
            try:
                menu_cache = sheets_service.get_menu_from_sheet()
            except Exception as e:
                logger.error(f"Failed to load menu: {e}")
                return []
        return menu_cache

def get_categories():
    menu = get_menu()
    categories = set()
    for item in menu:
        category = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ')
        if category:
            categories.add(category)
    return sorted(list(categories))

def get_items_by_category(category):
    menu = get_menu()
    return [item for item in menu if item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == category]

def find_item_by_name(name):
    menu = get_menu()
    for item in menu:
        if item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏') == name:
            return item
    return None

def safe_escape(text):
    import html
    if text is None:
        return ""
    return html.escape(str(text))

def send_msg(chat_id, text, markup=None):
    try:
        return tg_service.tg_send_message(chat_id, text, markup, "HTML")
    except Exception as e:
        logger.error(f"Send error: {e}")

def format_item(item):
    name = safe_escape(item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '–ë–µ–∑ –Ω–∞–∑–≤–∏'))
    category = safe_escape(item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', ''))
    price = safe_escape(item.get('–¶—ñ–Ω–∞', '0'))
    description = safe_escape(item.get('–û–ø–∏—Å', ''))
    
    text = f"üçΩÔ∏è <b>{name}</b>\n{'‚îÄ'*30}\n\n"
    if description:
        text += f"üìù {description}\n\n"
    text += f"üìÅ {category}\nüí∞ <b>{price} ‚Ç¥</b>"
    return text

def format_cart(chat_id):
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    
    if not cart:
        return "üõí <b>–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>\n\nüìã –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –º–µ–Ω—é!"
    
    text = "üõí <b>–í–ê–® –ö–û–®–ò–ö</b>\n" + "‚îÄ"*30 + "\n\n"
    total = 0.0
    
    for i, (item_name, qty) in enumerate(cart.items(), 1):
        item = find_item_by_name(item_name)
        if item:
            name = safe_escape(item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏'))
            try:
                price = float(str(item.get('–¶—ñ–Ω–∞', 0)).replace(',', '.'))
            except:
                price = 0.0
            item_total = price * qty
            total += item_total
            text += f"{i}Ô∏è‚É£ <b>{name}</b>\n   {price:.2f} ‚Ç¥ √ó {qty} = {item_total:.2f} ‚Ç¥\n\n"
    
    text += "‚îÄ"*30 + f"\nüí≥ <b>–í–°–¨–û–ì–û: {total:.2f} ‚Ç¥</b>"
    return text

def kb_main():
    return {"keyboard": [
        [{"text": "üìã –ú–µ–Ω—é"}, {"text": "‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"}],
        [{"text": "üõí –ö–æ—à–∏–∫"}, {"text": "üë§ –ü—Ä–æ—Ñ—ñ–ª—å"}],
        [{"text": "üîç –ü–æ—à—É–∫"}, {"text": "üÜò –î–æ–ø–æ–º–æ–≥–∞"}]
    ], "resize_keyboard": True}

def kb_categories():
    categories = get_categories()
    kb = {"inline_keyboard": []}
    for cat in categories:
        kb["inline_keyboard"].append([{"text": f"üçΩÔ∏è {cat}", "callback_data": f"cat:{cat}"}])
    kb["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back"}])
    return kb

def kb_item(item, cat, idx, total):
    name = item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏', '')
    kb = {"inline_keyboard": [
        [{"text": "‚ûï –î–æ–¥–∞—Ç–∏", "callback_data": f"add:{name}"}]
    ]}
    if total > 1:
        nav = []
        if idx > 0:
            nav.append({"text": "‚¨ÖÔ∏è", "callback_data": f"item:{cat}:{idx-1}"})
        nav.append({"text": f"{idx+1}/{total}", "callback_data": "noop"})
        if idx < total - 1:
            nav.append({"text": "‚û°Ô∏è", "callback_data": f"item:{cat}:{idx+1}"})
        kb["inline_keyboard"].append(nav)
    kb["inline_keyboard"].append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_cat"}])
    return kb

def kb_cart():
    return {"keyboard": [[{"text": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏"}], [{"text": "üìã –ú–µ–Ω—é"}]], "resize_keyboard": True}

def handle_start(chat_id):
    user_states[chat_id] = State.MAIN_MENU
    text = f"{random.choice(GREETINGS)}\n\nüçΩÔ∏è –ó–∞–º–æ–≤–ª—è–π—Ç–µ —ó–∂—É –æ–Ω–ª–∞–π–Ω\nüöÄ –î–æ—Å—Ç–∞–≤–∫–∞ 30-45 —Ö–≤\nüí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ\n\n{'‚îÄ'*30}\n<b>–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ?</b>"
    send_msg(chat_id, text, kb_main())

def handle_menu(chat_id):
    user_states[chat_id] = State.BROWSING_CATEGORIES
    categories = get_categories()
    if not categories:
        send_msg(chat_id, "‚ùå –ú–µ–Ω—é –ø–æ—Ä–æ–∂–Ω—î")
        return
    text = f"üìã <b>–ù–ê–®–ï –ú–ï–ù–Æ</b>\n{'‚îÄ'*30}\n\n‚ú® –î–æ—Å—Ç—É–ø–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π\n\n<b>–û–±–µ—Ä—ñ—Ç—å:</b>"
    send_msg(chat_id, text, kb_categories())

def show_item(chat_id, category, index):
    items = get_items_by_category(category)
    if not items or index < 0 or index >= len(items):
        send_msg(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    user_states[chat_id] = State.VIEWING_ITEM
    item = items[index]
    text = format_item(item)
    photo = item.get('–§–æ—Ç–æ URL', '')
    kb = kb_item(item, category, index, len(items))
    if photo and photo.startswith('http'):
        try:
            tg_service.tg_send_photo(chat_id, photo, caption=text, reply_markup=kb)
        except:
            send_msg(chat_id, text, kb)
    else:
        send_msg(chat_id, text, kb)

def add_to_cart(chat_id, item_name):
    item = find_item_by_name(item_name)
    if not item:
        send_msg(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    with user_carts_lock:
        cart = user_carts[chat_id]
        if len(cart) >= MAX_CART_ITEMS:
            send_msg(chat_id, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_CART_ITEMS} —Ç–æ–≤–∞—Ä—ñ–≤")
            return
        current = cart.get(item_name, 0)
        if current >= MAX_ITEM_QUANTITY:
            send_msg(chat_id, f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_ITEM_QUANTITY} —à—Ç")
            return
        cart[item_name] = current + 1
    name = safe_escape(item.get('–ù–∞–∑–≤–∞ –°—Ç—Ä–∞–≤–∏'))
    price = safe_escape(item.get('–¶—ñ–Ω–∞', '0'))
    qty = cart[item_name]
    text = f"‚úÖ <b>{name}</b> –¥–æ–¥–∞–Ω–æ!\n\nüí∞ {price} ‚Ç¥\nüì¶ –í –∫–æ—à–∏–∫—É: {qty} —à—Ç\n\n{'‚îÄ'*30}\n–©–æ –¥–∞–ª—ñ?"
    kb = {"inline_keyboard": [[{"text": "üõí –î–æ –∫–æ—à–∏–∫–∞", "callback_data": "cart"}, {"text": "üìã –©–µ", "callback_data": "menu"}]]}
    send_msg(chat_id, text, kb)

def handle_cart(chat_id):
    user_states[chat_id] = State.IN_CART
    text = format_cart(chat_id)
    with user_carts_lock:
        has_items = len(user_carts.get(chat_id, {})) > 0
    kb = kb_cart() if has_items else kb_main()
    send_msg(chat_id, text, kb)

def handle_profile(chat_id):
    text = f"üë§ <b>–í–ê–® –ü–†–û–§–Ü–õ–¨</b>\n{'‚îÄ'*30}\n\nüõçÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω—å: 0\nüí∏ –ë–æ–Ω—É—Å—ñ–≤: 0 ‚Ç¥\nüåü –°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—á–æ–∫\nüéÅ –ó–Ω–∏–∂–∫–∞: 0%\n\n<i>–ó—Ä–æ–±—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –π –æ—Ç—Ä–∏–º–∞–π—Ç–µ –±–æ–Ω—É—Å–∏!</i>"
    send_msg(chat_id, text, kb_main())

def handle_recommendations(chat_id):
    text = f"‚≠ê <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á</b>\n{'‚îÄ'*30}\n\nüë®‚Äçüç≥ <i>–¶—å–æ–≥–æ –¥–Ω—è:</i>\n\n1Ô∏è‚É£ –ß–æ—Ä–Ω–∏–π –±—É—Ä–≥–µ—Ä - 149‚Ç¥\n2Ô∏è‚É£ –õ–∞—Ç—Ç–µ - 89‚Ç¥\n\nüí° –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –º–µ–Ω—é!"
    send_msg(chat_id, text, kb_main())

def handle_help(chat_id):
    text = f"üÜò <b>–î–û–ü–û–ú–û–ì–ê</b>\n{'‚îÄ'*30}\n\n<b>–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:</b>\n1Ô∏è‚É£ üìã –ú–µ–Ω—é\n2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å —ó–∂—É\n3Ô∏è‚É£ ‚ûï –î–æ–¥–∞–π—Ç–µ\n4Ô∏è‚É£ üõí –û—Ñ–æ—Ä–º—ñ—Ç—å\n\nüìû +38(99)123-45-67"
    send_msg(chat_id, text, kb_main())

def start_checkout(chat_id):
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    if not cart:
        send_msg(chat_id, "‚ùå –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", kb_main())
        return
    user_states[chat_id] = State.CHECKOUT_PHONE
    text = f"üìû <b>–û–§–û–†–ú–õ–ï–ù–ù–Ø</b>\n{'‚îÄ'*30}\n\n–ö—Ä–æ–∫ 1Ô∏è‚É£/3Ô∏è‚É£\n\nüì± –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
    kb = {"keyboard": [[{"text": "üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏", "request_contact": True}], [{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]], "resize_keyboard": True, "one_time_keyboard": True}
    send_msg(chat_id, text, kb)

def handle_phone(chat_id, phone):
    user_states[chat_id] = State.CHECKOUT_ADDRESS
    with user_states_lock:
        if chat_id not in user_states:
            user_states[chat_id] = {}
    text = f"‚úÖ –ù–æ–º–µ—Ä: {phone}\n\n–ö—Ä–æ–∫ 2Ô∏è‚É£/3Ô∏è‚É£\n\nüìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
    kb = {"keyboard": [[{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]], "resize_keyboard": True}
    send_msg(chat_id, text, kb)

def handle_address(chat_id, address):
    if len(address) < 10:
        send_msg(chat_id, "‚ùå –ê–¥—Ä–µ—Å–∞ –∫–æ—Ä–æ—Ç–∫–∞\n\n–ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤")
        return
    user_states[chat_id] = State.CHECKOUT_CONFIRM
    summary = format_cart(chat_id)
    text = f"{summary}\n\n{'‚îÄ'*30}\n\nüìç –ê–¥—Ä–µ—Å–∞: {safe_escape(address)}\n\n–ö—Ä–æ–∫ 3Ô∏è‚É£/3Ô∏è‚É£\n\n<b>–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å ‚úÖ</b>"
    kb = {"keyboard": [[{"text": "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"}], [{"text": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"}]], "resize_keyboard": True}
    send_msg(chat_id, text, kb)

def confirm_order(chat_id):
    with user_carts_lock:
        cart = user_carts.get(chat_id, {})
    if not cart:
        send_msg(chat_id, "‚ùå –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
    try:
        total = sum(float(str(find_item_by_name(name).get('–¶—ñ–Ω–∞', 0)).replace(',', '.')) * qty for name, qty in cart.items() if find_item_by_name(name))
        order_id = str(uuid.uuid4())[:8].upper()
        items = [{"name": name, "quantity": qty, "price": 0} for name, qty in cart.items()]
        db_service.save_order(order_id, chat_id, None, items, f"{total:.2f}", "N/A", "N/A", "")
        text = f"üéâ <b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –ü–†–ò–ô–ù–Ø–¢–û!</b>\n\n‚úÖ ID: <code>{order_id}</code>\n\nüí≥ –î–æ –æ–ø–ª–∞—Ç–∏: {total:.2f} ‚Ç¥\n\nüöö –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞ 30-45 —Ö–≤\n\nüôè –°–ø–∞—Å–∏–±—ñ! –ü—Ä–∏—î–º–Ω–æ–≥–æ –∞–ø–µ—Ç–∏—Ç—É!"
        with user_carts_lock:
            user_carts[chat_id] = {}
        user_states[chat_id] = State.MAIN_MENU
        send_msg(chat_id, text, kb_main())
    except Exception as e:
        logger.error(f"Order error: {e}")
        send_msg(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è")

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"ok": False})
        
        if 'message' in data:
            msg = data['message']
            chat_id = msg['chat']['id']
            text = msg.get('text', '').strip()
            
            if text == '/start':
                handle_start(chat_id)
            elif text == 'üìã –ú–µ–Ω—é':
                handle_menu(chat_id)
            elif text == 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å':
                handle_profile(chat_id)
            elif text == '‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó':
                handle_recommendations(chat_id)
            elif text == 'üõí –ö–æ—à–∏–∫':
                handle_cart(chat_id)
            elif text == 'üÜò –î–æ–ø–æ–º–æ–≥–∞':
                handle_help(chat_id)
            elif text == 'üîç –ü–æ—à—É–∫':
                send_msg(chat_id, "üîç –ü–æ—à—É–∫ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π", kb_main())
            elif text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏':
                start_checkout(chat_id)
            elif text == '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏':
                confirm_order(chat_id)
            elif text == 'üìã –ú–µ–Ω—é' or text == '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏':
                handle_start(chat_id)
            elif 'contact' in msg:
                phone = msg['contact']['phone_number']
                handle_phone(chat_id, phone)
            else:
                state = user_states.get(chat_id, State.MAIN_MENU)
                if state == State.CHECKOUT_ADDRESS:
                    handle_address(chat_id, text)
                else:
                    send_msg(chat_id, "ü§î –ù–µ —Ä–æ–∑—É–º—ñ—é. –í–∏–±–µ—Ä—ñ—Ç—å –∑ –º–µ–Ω—é üëá", kb_main())
        
        elif 'callback_query' in data:
            cb = data['callback_query']
            chat_id = cb['from']['id']
            cb_data = cb.get('data', '')
            
            if cb_data == 'back':
                handle_menu(chat_id)
            elif cb_data == 'back_cat':
                handle_menu(chat_id)
            elif cb_data == 'noop':
                pass
            elif cb_data == 'cart':
                handle_cart(chat_id)
            elif cb_data == 'menu':
                handle_menu(chat_id)
            elif cb_data.startswith('cat:'):
                category = cb_data[4:]
                show_item(chat_id, category, 0)
            elif cb_data.startswith('add:'):
                item_name = cb_data[4:]
                add_to_cart(chat_id, item_name)
            elif cb_data.startswith('item:'):
                parts = cb_data[5:].split(':')
                if len(parts) == 2:
                    show_item(chat_id, parts[0], int(parts[1]))
        
        return jsonify({"ok": True})
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({"ok": False})

@app.route('/health', methods=['GET'])
def health():
    return jsonify({"status": "ok"})

@app.route('/', methods=['GET'])
def index():
    return jsonify({"bot": "Hubsy v3.2"})

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)