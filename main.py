from flask import Flask, request, jsonify
import logging
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import os
import json

app = Flask(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –í–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è Render.com)
        logging.FileHandler('bot.log')  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ —É —Ñ–∞–π–ª
    ]
)
logger = logging.getLogger(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN')
bot = telegram.Bot(token=TELEGRAM_TOKEN)
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –ü—Ä–∏–∫–ª–∞–¥ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤
RESTAURANTS = {
    "1": {"name": "–ü—ñ—Ü–µ—Ä—ñ—è –ù–∞–ø–æ–ª—ñ", "menu": [
        {"id": "1_1", "name": "–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "price": 150},
        {"id": "1_2", "name": "–ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ", "price": 180}
    ]},
    "2": {"name": "–°—É—à—ñ –ú–∞–π—Å—Ç–µ—Ä", "menu": [
        {"id": "2_1", "name": "–ö–∞–ª—ñ—Ñ–æ—Ä–Ω—ñ—è —Ä–æ–ª", "price": 200},
        {"id": "2_2", "name": "–§—ñ–ª–∞–¥–µ–ª—å—Ñ—ñ—è", "price": 250}
    ]}
}

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ—à–∏–∫–∞ (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤ –ø–∞–º‚Äô—è—Ç—ñ)
CARTS = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} started the bot")
    await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ —É @FerrikFoodBot! üçΩÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–∫–ª–∞–¥ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ /menu.")

# –ö–æ–º–∞–Ω–¥–∞ /menu
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"User {user_id} accessed menu")
    keyboard = [
        [InlineKeyboardButton(restaurant["name"], callback_data=f"rest_{id}")]
        for id, restaurant in RESTAURANTS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–∫–ª–∞–¥ —É –¢–µ—Ä–Ω–æ–ø–æ–ª—ñ:", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    logger.info(f"User {user_id} clicked button: {data}")

    if data.startswith("rest_"):
        rest_id = data.split("_")[1]
        restaurant = RESTAURANTS[rest_id]
        keyboard = [
            [InlineKeyboardButton(f"{item['name']} ({item['price']} –≥—Ä–Ω)", callback_data=f"add_{item['id']}")]
            for item in restaurant["menu"]
        ]
        keyboard.append([InlineKeyboardButton("üì• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="view_cart")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–ú–µ–Ω—é {restaurant['name']}:", reply_markup=reply_markup)
        await query.answer()
        logger.info(f"User {user_id} selected restaurant {rest_id}")

    elif data.startswith("add_"):
        item_id = data.split("_")[1]
        rest_id = item_id.split("_")[0]
        item = next(i for i in RESTAURANTS[rest_id]["menu"] if i["id"] == item_id)
        if user_id not in CARTS:
            CARTS[user_id] = []
        CARTS[user_id].append(item)
        await query.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {item['name']} –¥–æ –∫–æ—à–∏–∫–∞!")
        logger.info(f"User {user_id} added item {item['name']} to cart")

    elif data == "view_cart":
        if user_id not in CARTS or not CARTS[user_id]:
            await query.edit_message_text("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π! –î–æ–¥–∞–π—Ç–µ —Å—Ç—Ä–∞–≤–∏.")
        else:
            cart_items = "\n".join(f"‚Ä¢ {item['name']} - {item['price']} –≥—Ä–Ω" for item in CARTS[user_id])
            total = sum(item["price"] for item in CARTS[user_id])
            cart_text = f"–í–∞—à –∫–æ—à–∏–∫:\n{cart_items}\n\n–ó–∞–≥–∞–ª–æ–º: {total} –≥—Ä–Ω"
            keyboard = [
                [InlineKeyboardButton("üìù –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order")],
                [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(cart_text, reply_markup=reply_markup)
        await query.answer()
        logger.info(f"User {user_id} viewed cart")

    elif data == "clear_cart":
        CARTS[user_id] = []
        await query.edit_message_text("üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!")
        await query.answer()
        logger.info(f"User {user_id} cleared cart")

    elif data == "order":
        if user_id not in CARTS or not CARTS[user_id]:
            await query.edit_message_text("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        else:
            cart_items = "\n".join(f"‚Ä¢ {item['name']} - {item['price']} –≥—Ä–Ω" for item in CARTS[user_id])
            total = sum(item["price"] for item in CARTS[user_id])
            order_text = f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n{cart_items}\n\n–°—É–º–∞: {total} –≥—Ä–Ω\n\n–û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ —Ç–∞ –æ–ø–ª–∞—Ç–∏ (–≥–æ—Ç—ñ–≤–∫–∞/–∫–∞—Ä—Ç–∫–∞)."
            logger.info(f"ORDER from {user_id}: {cart_items}, Total: {total} –≥—Ä–Ω")
            await query.edit_message_text(order_text)
            CARTS[user_id] = []
        await query.answer()

# –ï–Ω–¥–ø–æ—ñ–Ω—Ç–∏
@app.route('/')
def hello_world():
    logger.info("Hello World endpoint accessed")
    return "Hello, World! @FerrikFoodBot is running."

@app.route('/health')
def health_check():
    logger.info("Health check endpoint accessed")
    return jsonify({"status": "healthy"})

@app.route('/webhook', methods=['POST'])
async def webhook():
    logger.info("Webhook received")
    update = telegram.Update.de_json(request.get_json(force=True), bot)
    await application.process_update(update)
    return jsonify({"status": "ok"})

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("menu", menu))
application.add_handler(CallbackQueryHandler(button_callback))

if __name__ == '__main__':
    logger.info("Starting @FerrikFoodBot")
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8000)))
