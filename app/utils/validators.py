"""
üõ°Ô∏è –í–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏ —Ç–∞ –ø–∞—Ä—Å–µ—Ä–∏ –¥–∞–Ω–∏—Ö
"""
import re
import logging
from typing import Any, Optional

logger = logging.getLogger(__name__)

def safe_parse_price(value: Any) -> float:
    """
    –ë–µ–∑–ø–µ—á–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Ü—ñ–Ω—É –∑ –±—É–¥—å-—è–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    
    –ü—Ä–∏–∫–ª–∞–¥–∏:
        "30 –≥—Ä–Ω" -> 30.0
        "45,5" -> 45.5
        "120.50 –≥—Ä–Ω" -> 120.5
        None -> 0.0
        "" -> 0.0
        "invalid" -> 0.0
    """
    if value is None or value == '':
        return 0.0
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Ä—è–¥–æ–∫ —Ç–∞ –æ—á–∏—â—É—î–º–æ
        clean = str(value).strip()
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ–∫—Å—Ç (–≥—Ä–Ω, uah, —Ç–æ—â–æ)
        clean = re.sub(r'[^\d.,\-]', '', clean)
        
        # –ó–∞–º—ñ–Ω–∞ –∫–æ–º–∏ –Ω–∞ –∫—Ä–∞–ø–∫—É
        clean = clean.replace(',', '.')
        
        # –Ø–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
        if not clean or clean == '.':
            return 0.0
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ float
        result = float(clean)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å (–∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫)
        if result < 0:
            logger.warning(f"‚ö†Ô∏è Negative price detected: {value} -> {result}")
            return 0.0
        
        if result > 1000000:  # 1 –º–ª–Ω - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
            logger.warning(f"‚ö†Ô∏è Unrealistic price: {value} -> {result}")
            return 0.0
            
        return result
        
    except (ValueError, TypeError) as e:
        logger.warning(f"‚ùå Invalid price format: {value} -> {e}")
        return 0.0


def safe_parse_quantity(value: Any) -> int:
    """–ë–µ–∑–ø–µ—á–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å"""
    if value is None or value == '':
        return 0
    
    try:
        qty = int(float(str(value)))
        return max(0, min(qty, 999))  # 0-999
    except (ValueError, TypeError):
        logger.warning(f"‚ùå Invalid quantity: {value}")
        return 0


def validate_phone(phone: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    
    –§–æ—Ä–º–∞—Ç–∏:
        +380501234567
        0501234567
        380501234567
    """
    if not phone:
        return False
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏
    clean = re.sub(r'\D', '', phone)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
    if len(clean) == 10 and clean.startswith('0'):
        return True  # 0501234567
    
    if len(clean) == 12 and clean.startswith('380'):
        return True  # 380501234567
    
    return False


def normalize_phone(phone: str) -> Optional[str]:
    """–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–æ —Ñ–æ—Ä–º–∞—Ç—É +380XXXXXXXXX"""
    if not phone:
        return None
    
    clean = re.sub(r'\D', '', phone)
    
    if len(clean) == 10 and clean.startswith('0'):
        return f"+38{clean}"
    
    if len(clean) == 12 and clean.startswith('380'):
        return f"+{clean}"
    
    if len(clean) == 9:  # –±–µ–∑ 0 –Ω–∞ –ø–æ—á–∞—Ç–∫—É
        return f"+380{clean}"
    
    return None


def validate_address(address: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    if not address or len(address.strip()) < 10:
        return False
    
    # –ú–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É (–Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É)
    if not re.search(r'\d', address):
        return False
    
    return True


def sanitize_input(text: str, max_length: int = 500) -> str:
    """–û—á–∏—â–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤"""
    if not text:
        return ""
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
    text = text[:max_length]
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è HTML —Ç–µ–≥—ñ–≤ (–±–∞–∑–æ–≤–∏–π –∑–∞—Ö–∏—Å—Ç)
    text = re.sub(r'<[^>]+>', '', text)
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–µ—Ä—É—é—á–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    text = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', text)
    
    return text.strip()


def validate_item_data(item: dict) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—É –∑ Google Sheets
    
    Required fields: id, name, price
    """
    required_fields = ['id', 'name', 'price']
    
    for field in required_fields:
        if field not in item or not item[field]:
            logger.error(f"‚ùå Missing required field '{field}' in item: {item}")
            return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω–∏
    price = safe_parse_price(item['price'])
    if price <= 0:
        logger.error(f"‚ùå Invalid price for item: {item}")
        return False
    
    return True


# ============================================================================
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è (–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
# ============================================================================
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏ —Ü—ñ–Ω
    test_prices = [
        ("30 –≥—Ä–Ω", 30.0),
        ("45,5", 45.5),
        ("120.50 –≥—Ä–Ω", 120.5),
        (None, 0.0),
        ("", 0.0),
        ("invalid", 0.0),
        ("-50", 0.0),
        ("1000000000", 0.0)
    ]
    
    print("üß™ Testing prices:")
    for input_val, expected in test_prices:
        result = safe_parse_price(input_val)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {input_val} -> {result} (expected {expected})")
    
    # –¢–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
    test_phones = [
        ("+380501234567", True),
        ("0501234567", True),
        ("380501234567", True),
        ("501234567", True),
        ("123", False),
        ("", False)
    ]
    
    print("\nüß™ Testing phones:")
    for phone, expected in test_phones:
        result = validate_phone(phone)
        normalized = normalize_phone(phone)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} {phone} -> valid={result}, normalized={normalized}")
