"""
üéØ –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ - –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑ –±–∞–≥–∞—Ç—å–º–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from app.utils.validators import format_order_summary, calculate_total_price
from app.utils.session import (
    get_user_cart,
    clear_user_cart,
    get_user_session,
    update_user_session
)

logger = logging.getLogger(__name__)


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    sheets_service = context.bot_data.get('sheets_service')
    
    logger.info(f"üë§ User {user.id} ({user.username}) started bot")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É
    if sheets_service and not sheets_service.is_open_now():
        await update.message.reply_text(
            "üòî –í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ –Ω–µ —Ä–æ–±–æ—á–∏–π —á–∞—Å.\n"
            "–ú–∏ –ø—Ä–∏–π–º–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ 08:00 –¥–æ 23:00.\n\n"
            "–ê–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é!"
        )
    
    # –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    welcome_msg = (
        "üëã –í—ñ—Ç–∞—é —É **FerrikFoot** ‚Äî –≤–∞—à—ñ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ –¥–æ—Å—Ç–∞–≤–∫–∏ —ó–∂—ñ!\n\n"
        "üçï –ó–∞–º–æ–≤–ª—è–π—Ç–µ —Å—Ç—Ä–∞–≤–∏ –∑ –∫—Ä–∞—â–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞!\n\n"
        "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏, –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å:\n"
    )
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤
    partners = sheets_service.get_partners() if sheets_service else []
    
    keyboard = []
    
    # –Ø–∫—â–æ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤ –±—ñ–ª—å—à–µ 1 - –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä
    if len(partners) > 1:
        keyboard.append([InlineKeyboardButton("üè™ –í–∏–±—Ä–∞—Ç–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="choose_partner")])
    
    keyboard.extend([
        [
            InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu"),
            InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart")
        ],
        [
            InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥–∏", callback_data="show_promocodes"),
            InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="show_help")
        ]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_msg,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def choose_partner_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–±—ñ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É/–ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    sheets_service = context.bot_data.get('sheets_service')
    
    if not sheets_service:
        await update.message.reply_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    partners = sheets_service.get_partners()
    
    if not partners:
        await update.message.reply_text("üòî –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤")
        return
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    msg_parts = ["üè™ **–û–ë–ï–†–Ü–¢–¨ –†–ï–°–¢–û–†–ê–ù**\n"]
    keyboard = []
    
    for partner in partners:
        # –†–µ–π—Ç–∏–Ω–≥ –∑—ñ—Ä–∫–∞–º–∏
        stars = "‚≠ê" * int(partner['rating'])
        premium_badge = " üëë" if partner['premium'] else ""
        
        msg_parts.append(
            f"\n**{partner['name']}**{premium_badge}\n"
            f"{stars} {partner['rating']:.1f} | {partner['category']}\n"
        )
        
        keyboard.append([
            InlineKeyboardButton(
                f"{partner['name']}{premium_badge}",
                callback_data=f"partner_{partner['id']}"
            )
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "\n".join(msg_parts),
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /menu"""
    user = update.effective_user
    sheets_service = context.bot_data.get('sheets_service')
    
    logger.info(f"üë§ User {user.id} requested menu")
    
    if not sheets_service:
        await update.message.reply_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∑ —Å–µ—Å—ñ—ó
    session = get_user_session(user.id)
    partner_id = session.get('selected_partner_id')
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω—é
    menu_items = sheets_service.get_menu(partner_id=partner_id)
    
    if not menu_items:
        await update.message.reply_text(
            "üòî –ú–µ–Ω—é –Ω–∞—Ä–∞–∑—ñ –ø–æ—Ä–æ–∂–Ω—î.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω."
        )
        return
    
    # –ì—Ä—É–ø—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    categories = {}
    for item in menu_items:
        category = item.get('category', '–Ü–Ω—à–µ')
        if category not in categories:
            categories[category] = []
        categories[category].append(item)
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message_parts = ["üìã **–ú–ï–ù–Æ**\n"]
    
    # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
    if partner_id:
        partner = sheets_service.get_partner_by_id(partner_id)
        if partner:
            message_parts.append(f"üè™ {partner['name']}\n")
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    for category, items in categories.items():
        message_parts.append(f"\n**{category}**")
        for item in items[:10]:  # –û–±–º–µ–∂—É—î–º–æ 10 —Ç–æ–≤–∞—Ä—ñ–≤
            name = item.get('name', 'Unknown')
            price = item.get('price', 0)
            rating = item.get('rating', 0)
            stars = "‚≠ê" * int(rating) if rating > 0 else ""
            
            item_text = f"\nüîπ {name} ‚Äî {price} –≥—Ä–Ω {stars}"
            
            # –î–æ–¥–∞—î–º–æ —á–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_time = item.get('delivery_time', 0)
            if delivery_time:
                item_text += f"\n   ‚è±Ô∏è {delivery_time} —Ö–≤"
            
            # –ê–ª–µ—Ä–≥–µ–Ω–∏
            allergens = item.get('allergens', '')
            if allergens:
                item_text += f"\n   ‚ö†Ô∏è {allergens}"
            
            message_parts.append(item_text)
    
    message_parts.append(
        "\n\nüí¨ –ù–∞–ø–∏—à—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏, "
        "–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cart –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ—à–∏–∫–∞."
    )
    
    menu_text = "\n".join(message_parts)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ (–º–æ–∂–ª–∏–≤–æ —á–∞—Å—Ç–∏–Ω–∞–º–∏)
    if len(menu_text) > 4000:
        chunks = [menu_text[i:i+4000] for i in range(0, len(menu_text), 4000)]
        for chunk in chunks:
            await update.message.reply_text(chunk, parse_mode='Markdown')
    else:
        await update.message.reply_text(menu_text, parse_mode='Markdown')


async def cart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cart"""
    user = update.effective_user
    sheets_service = context.bot_data.get('sheets_service')
    
    logger.info(f"üë§ User {user.id} requested cart")
    
    cart = get_user_cart(user.id)
    session = get_user_session(user.id)
    
    if not cart or len(cart) == 0:
        keyboard = [[
            InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="show_menu")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n\n"
            "–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –∑ –º–µ–Ω—é!",
            reply_markup=reply_markup
        )
        return
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º
    subtotal = calculate_total_price(cart)
    
    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É
    promocode = session.get('promocode')
    discount = 0
    
    if promocode and sheets_service:
        promo_data = sheets_service.validate_promocode(promocode)
        if promo_data:
            discount = subtotal * (promo_data['discount_percent'] / 100)
    
    # –í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–º–æ–∂–Ω–∞ –±—Ä–∞—Ç–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É)
    delivery_cost = 30  # –∞–±–æ –∑ sheets_service.get_config('DELIVERY_COST')
    
    total = subtotal - discount + delivery_cost
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    order_data = {
        'items': cart,
        'subtotal': subtotal,
        'discount': discount,
        'delivery_cost': delivery_cost,
        'total': total,
        'promocode': promocode
    }
    
    cart_text = format_order_summary(order_data)
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    keyboard = [
        [
            InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promocode"),
            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear_cart")
        ],
        [
            InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout")
        ],
        [
            InlineKeyboardButton("üìã –î–æ–¥–∞—Ç–∏ —â–µ", callback_data="show_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        cart_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def order_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /order - –ø–æ—á–∞—Ç–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è"""
    user = update.effective_user
    sheets_service = context.bot_data.get('sheets_service')
    
    logger.info(f"üë§ User {user.id} started order")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É
    if sheets_service and not sheets_service.is_open_now():
        await update.message.reply_text(
            "üòî –í–∏–±–∞—á—Ç–µ, –∑–∞—Ä–∞–∑ –Ω–µ —Ä–æ–±–æ—á–∏–π —á–∞—Å.\n"
            "–ú–∏ –ø—Ä–∏–π–º–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ 08:00 –¥–æ 23:00."
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—à–∏–∫
    cart = get_user_cart(user.id)
    
    if not cart or len(cart) == 0:
        await update.message.reply_text(
            "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.\n\n"
            "–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –∫–æ–º–∞–Ω–¥–æ—é /menu"
        )
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    session = get_user_session(user.id)
    subtotal = calculate_total_price(cart)
    
    # –ü—Ä–æ–º–æ–∫–æ–¥
    promocode = session.get('promocode')
    discount = 0
    if promocode and sheets_service:
        promo_data = sheets_service.validate_promocode(promocode)
        if promo_data:
            discount = subtotal * (promo_data['discount_percent'] / 100)
    
    delivery_cost = 30
    total = subtotal - discount + delivery_cost
    
    order_data = {
        'items': cart,
        'subtotal': subtotal,
        'discount': discount,
        'delivery_cost': delivery_cost,
        'total': total,
        'promocode': promocode
    }
    
    summary = format_order_summary(order_data)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    await update.message.reply_text(
        f"{summary}\n\n"
        "üì± –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
        "(—Ñ–æ—Ä–º–∞—Ç: +380501234567 –∞–±–æ 0501234567)"
    )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
    update_user_session(user.id, {
        'state': 'awaiting_phone',
        'order_data': order_data
    })


async def promocode_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /promocode"""
    user = update.effective_user
    sheets_service = context.bot_data.get('sheets_service')
    
    if not sheets_service:
        await update.message.reply_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏ (–º–æ–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫)
    await update.message.reply_text(
        "üéÅ **–ü–†–û–ú–û–ö–û–î–ò**\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∏–∂–∫—É!\n\n"
        "–ü—Ä–æ–º–æ–∫–æ–¥ –±—É–¥–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
        parse_mode='Markdown'
    )
    
    # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω
    update_user_session(user.id, {'state': 'awaiting_promocode'})


async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /history - —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    user = update.effective_user
    sheets_service = context.bot_data.get('sheets_service')
    
    if not sheets_service:
        await update.message.reply_text("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    orders = sheets_service.get_orders(user_id=user.id)
    
    if not orders:
        await update.message.reply_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.\n\n"
            "–ó—Ä–æ–±—ñ—Ç—å –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /menu"
        )
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 –∑–∞–º–æ–≤–ª–µ–Ω—å
    recent_orders = orders[-5:]
    
    msg_parts = ["üìã **–í–ê–®–Ü –ó–ê–ú–û–í–õ–ï–ù–ù–Ø**\n"]
    
    for order in reversed(recent_orders):
        order_id = order.get('ID –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'N/A')
        timestamp = order.get('–ß–∞—Å –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è', '')[:16]  # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ —Ö–≤
        total = order.get('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞', 0)
        status = order.get('–°—Ç–∞—Ç—É—Å', '–ù–µ–≤—ñ–¥–æ–º–æ')
        
        # –ï–º–æ–¥–∑—ñ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
        status_emoji = {
            '–ù–æ–≤–∏–π': 'üÜï',
            '–ü—Ä–∏–π–Ω—è—Ç–æ': '‚úÖ',
            '–ì–æ—Ç—É—î—Ç—å—Å—è': 'üë®‚Äçüç≥',
            '–í –¥–æ—Ä–æ–∑—ñ': 'üöó',
            '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ': '‚úÖ',
            '–°–∫–∞—Å–æ–≤–∞–Ω–æ': '‚ùå'
        }.get(status, 'üì¶')
        
        msg_parts.append(
            f"\n{status_emoji} **–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}**\n"
            f"üìÖ {timestamp}\n"
            f"üí∞ {total} –≥—Ä–Ω\n"
            f"üìç –°—Ç–∞—Ç—É—Å: {status}"
        )
    
    msg_parts.append("\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä")
    
    keyboard = [[
        InlineKeyboardButton("üìã –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="show_menu")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "\n".join(msg_parts),
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
    help_text = (
        "üìñ **–î–û–ü–û–ú–û–ì–ê**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n"
        "üîπ /start ‚Äî –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
        "üîπ /menu ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é\n"
        "üîπ /cart ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫\n"
        "üîπ /order ‚Äî –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
        "üîπ /promocode ‚Äî –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "üîπ /history ‚Äî –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
        "üîπ /partners ‚Äî –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤\n"
        "üîπ /cancel ‚Äî –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é\n"
        "üîπ /help ‚Äî –¶—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
        "**–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:**\n"
        "1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω (—è–∫—â–æ —ó—Ö –∫—ñ–ª—å–∫–∞)\n"
        "2Ô∏è‚É£ –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /menu\n"
        "3Ô∏è‚É£ –ù–∞–ø–∏—à—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: \"2 –ø—ñ—Ü–∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞\")\n"
        "4Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ—à–∏–∫ –∫–æ–º–∞–Ω–¥–æ—é /cart\n"
        "5Ô∏è‚É£ –û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é /order\n\n"
        "üí° –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, "
        "—ñ AI –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º!\n\n"
        "üéÅ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∏ –¥–ª—è –∑–Ω–∏–∂–æ–∫!"
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )


async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel"""
    user = update.effective_user
    logger.info(f"üë§ User {user.id} cancelled operation")
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
    update_user_session(user.id, {'state': 'idle'})
    
    keyboard = [[
        InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="show_menu"),
        InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n"
        "–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?",
        reply_markup=reply_markup
    )
