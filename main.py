import os
import logging
from flask import Flask, request, jsonify
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('ferrik')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
try:
    from config import BOT_TOKEN, WEBHOOK_URL, OPERATOR_CHAT_ID
    logger.info("‚úÖ Config imported successfully")
except Exception as e:
    logger.error(f"‚ùå Config import error: {e}")
    BOT_TOKEN = os.getenv('BOT_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
    WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://ferrik-bot-zvev.onrender.com/webhook')
    OPERATOR_CHAT_ID = os.getenv('OPERATOR_CHAT_ID', '')

# –Ü–º–ø–æ—Ä—Ç —Å–µ—Ä–≤—ñ—Å—ñ–≤
try:
    from services.sheets import init_gspread_client, get_menu_from_sheet, is_sheets_connected
    logger.info("‚úÖ Sheets service imported")
except Exception as e:
    logger.error(f"‚ùå Sheets import error: {e}")
    init_gspread_client = lambda: False
    get_menu_from_sheet = lambda: []
    is_sheets_connected = lambda: False

try:
    from services.gemini import init_gemini_client, get_ai_response, is_gemini_connected
    logger.info("‚úÖ Gemini service imported")
except Exception as e:
    logger.error(f"‚ùå Gemini import error: {e}")
    init_gemini_client = lambda: False
    get_ai_response = lambda x, y=None: "AI —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    is_gemini_connected = lambda: False

# –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
try:
    from services.telegram import send_message as tg_send_message
    logger.info("‚úÖ Telegram service imported")
except Exception as e:
    logger.error(f"‚ùå Telegram service import error: {e}")
    # Fallback —Ñ—É–Ω–∫—Ü—ñ—è
    import requests
    import json
    
    def tg_send_message(chat_id, text, keyboard=None, parse_mode="HTML"):
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            payload = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            if keyboard:
                payload["reply_markup"] = json.dumps(keyboard)
            
            response = requests.post(url, data=payload, timeout=10)
            if response.status_code == 200:
                logger.info(f"‚úÖ Message sent to {chat_id}")
                return response.json()
            else:
                logger.error(f"‚ùå Failed to send: {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"‚ùå Send message error: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
menu_cache = []
services_initialized = False


def init_services():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
    global services_initialized, menu_cache
    
    logger.info("=" * 60)
    logger.info("üöÄ FerrikFootBot starting initialization...")
    logger.info("=" * 60)
    
    try:
        # Google Sheets
        sheets_ok = init_gspread_client()
        if sheets_ok:
            logger.info("‚úÖ Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω—é
            try:
                menu_cache = get_menu_from_sheet()
                logger.info(f"‚úÖ –ú–µ–Ω—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(menu_cache)} –ø–æ–∑–∏—Ü—ñ–π")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é: {e}")
        else:
            logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
        
        # Gemini AI
        gemini_ok = init_gemini_client()
        if gemini_ok:
            logger.info("‚úÖ Gemini AI –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è Gemini AI –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
        
        services_initialized = True
        logger.info("=" * 60)
        logger.info("üéâ FerrikFootBot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        logger.info(f"   - Sheets: {'‚úÖ' if sheets_ok else '‚ùå'}")
        logger.info(f"   - Gemini: {'‚úÖ' if gemini_ok else '‚ùå'}")
        logger.info(f"   - –ú–µ–Ω—é: {len(menu_cache)} –ø–æ–∑–∏—Ü—ñ–π")
        logger.info("=" * 60)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}", exc_info=True)
        services_initialized = False


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
init_services()


# ============= ROUTES =============

@app.route('/')
def home():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return jsonify({
        "status": "running",
        "bot": "FerrikFootBot",
        "version": "2.0",
        "services": {
            "google_sheets": is_sheets_connected(),
            "gemini_ai": is_gemini_connected(),
            "menu_items": len(menu_cache)
        },
        "timestamp": datetime.now().isoformat()
    }), 200


@app.route('/health')
def health():
    """Health check"""
    sheets_ok = is_sheets_connected()
    gemini_ok = is_gemini_connected()
    
    return jsonify({
        "status": "healthy" if services_initialized else "degraded",
        "services": {
            "sheets": sheets_ok,
            "gemini": gemini_ok,
            "menu_cached": len(menu_cache) > 0
        }
    }), 200


@app.route('/keep-alive')
def keep_alive():
    """Keep-alive endpoint"""
    return jsonify({
        "status": "alive",
        "timestamp": datetime.now().isoformat(),
        "uptime": "service is running"
    }), 200


@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook –≤—ñ–¥ Telegram"""
    try:
        update = request.get_json()
        
        if not update:
            logger.warning("‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π update")
            return jsonify({"ok": True}), 200
        
        logger.info(f"üì® Received update: {update.get('update_id', 'unknown')}")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if 'message' in update:
            handle_message(update['message'])
        elif 'callback_query' in update:
            handle_callback_query(update['callback_query'])
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø update: {list(update.keys())}")
        
        return jsonify({"ok": True}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}", exc_info=True)
        return jsonify({"ok": False, "error": str(e)}), 500


# ============= MESSAGE HANDLERS =============

def handle_message(message):
    """–û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text', '')
        user = message.get('from', {})
        username = user.get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
        
        logger.info(f"üë§ Message from {username} ({chat_id}): {text}")
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith('/'):
            handle_command(chat_id, text, user)
        else:
            # –ó–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            handle_text_message(chat_id, text, user)
            
    except Exception as e:
        logger.error(f"‚ùå Message handling error: {e}", exc_info=True)


def handle_command(chat_id, command, user):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥"""
    try:
        cmd = command.split()[0].lower()
        username = user.get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
        
        if cmd == '/start':
            welcome_text = f"""üëã <b>–í—ñ—Ç–∞—é, {username}!</b>

–Ø <b>FerrikFootBot</b> - –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ —ó–∂—ñ! üçï

<b>–©–æ —è –≤–º—ñ—é:</b>
üçî –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
üìù –ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
üí¨ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
ü§ñ –î–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –≤–∏–±–æ—Ä–æ–º —Å—Ç—Ä–∞–≤ —á–µ—Ä–µ–∑ AI

<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/menu - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é
/help - –î–æ–ø–æ–º–æ–≥–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å! üòä"""
            
            keyboard = {
                "keyboard": [
                    [{"text": "üçï –ú–µ–Ω—é"}, {"text": "üìù –ó–∞–º–æ–≤–∏—Ç–∏"}],
                    [{"text": "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"}]
                ],
                "resize_keyboard": True
            }
            
            tg_send_message(chat_id, welcome_text, keyboard)
            
        elif cmd == '/help':
            help_text = """<b>üìñ –î–æ–≤—ñ–¥–∫–∞ FerrikFootBot</b>

<b>–ö–æ–º–∞–Ω–¥–∏:</b>
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/menu - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞

<b>–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏:</b>
1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /menu
2Ô∏è‚É£ –í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç—Ä–∞–≤—É
3Ô∏è‚É£ –û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

<b>AI –ê—Å–∏—Å—Ç–µ–Ω—Ç:</b>
–ù–∞–ø–∏—à—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ - —è –¥–æ–ø–æ–º–æ–∂—É! ü§ñ"""
            
            tg_send_message(chat_id, help_text)
            
        elif cmd == '/menu':
            show_menu(chat_id)
            
        else:
            tg_send_message(chat_id, f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {cmd}\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help")
            
    except Exception as e:
        logger.error(f"‚ùå Command error: {e}", exc_info=True)
        tg_send_message(chat_id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏")


def handle_text_message(chat_id, text, user):
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        username = user.get('first_name', '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
        
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
        if text in ['üçï –ú–µ–Ω—é', '–ú–µ–Ω—é']:
            show_menu(chat_id)
            return
        
        if text in ['üìù –ó–∞–º–æ–≤–∏—Ç–∏', '–ó–∞–º–æ–≤–∏—Ç–∏']:
            tg_send_message(chat_id, "–î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –º–µ–Ω—é: /menu")
            return
        
        if text in ['‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞', '–î–æ–ø–æ–º–æ–≥–∞']:
            handle_command(chat_id, '/help', user)
            return
        
        # –ü–æ—à—É–∫ –≤ –º–µ–Ω—é
        if any(word in text.lower() for word in ['–ø—ñ—Ü–∞', '–ø–∞—Å—Ç–∞', '—Å–∞–ª–∞—Ç', '–Ω–∞–ø—ñ–π']):
            search_in_menu(chat_id, text)
            return
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AI
        if is_gemini_connected():
            user_context = {
                'first_name': username,
                'username': user.get('username', ''),
                'user_id': user.get('id', '')
            }
            
            response = get_ai_response(text, user_context)
            tg_send_message(chat_id, response)
        else:
            tg_send_message(chat_id, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–±–æ –∫–æ–º–∞–Ω–¥—É /help")
            
    except Exception as e:
        logger.error(f"‚ùå Text message error: {e}", exc_info=True)
        tg_send_message(chat_id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞")


def show_menu(chat_id):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é"""
    global menu_cache
    
    try:
        # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —è–∫—â–æ –ø—É—Å—Ç–æ
        if not menu_cache:
            menu_cache = get_menu_from_sheet()
        
        if not menu_cache:
            tg_send_message(chat_id, "‚ùå –ú–µ–Ω—é —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ")
            return
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        categories = {}
        for item in menu_cache:
            cat = item.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–Ü–Ω—à–µ')
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(item)
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
        menu_text = "<b>üçΩÔ∏è –ù–∞—à–µ –º–µ–Ω—é:</b>\n\n"
        
        for category, items in categories.items():
            menu_text += f"<b>{category}:</b>\n"
            for item in items[:5]:  # –ú–∞–∫—Å 5 –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                menu_text += f"‚Ä¢ {item.get('–°—Ç—Ä–∞–≤–∏')} - {item.get('–¶—ñ–Ω–∞')} –≥—Ä–Ω\n"
                if item.get('–û–ø–∏—Å'):
                    menu_text += f"  <i>{item.get('–û–ø–∏—Å')[:50]}...</i>\n"
            menu_text += "\n"
        
        tg_send_message(chat_id, menu_text)
        
    except Exception as e:
        logger.error(f"‚ùå Show menu error: {e}", exc_info=True)
        tg_send_message(chat_id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é")


def search_in_menu(chat_id, query):
    """–ü–æ—à—É–∫ –≤ –º–µ–Ω—é"""
    try:
        query_lower = query.lower()
        results = []
        
        for item in menu_cache:
            name = item.get('–°—Ç—Ä–∞–≤–∏', '').lower()
            desc = item.get('–û–ø–∏—Å', '').lower()
            
            if query_lower in name or query_lower in desc:
                results.append(item)
        
        if results:
            text = f"üîç <b>–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}':</b>\n\n"
            for item in results[:5]:
                text += f"<b>{item.get('–°—Ç—Ä–∞–≤–∏')}</b>\n"
                text += f"üí∞ {item.get('–¶—ñ–Ω–∞')} –≥—Ä–Ω\n"
                if item.get('–û–ø–∏—Å'):
                    text += f"üìù {item.get('–û–ø–∏—Å')}\n"
                text += "\n"
            
            tg_send_message(chat_id, text)
        else:
            tg_send_message(chat_id, f"‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}'")
            
    except Exception as e:
        logger.error(f"‚ùå Search error: {e}")


def handle_callback_query(callback_query):
    """–û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    try:
        chat_id = callback_query.get('message', {}).get('chat', {}).get('id')
        data = callback_query.get('data')
        callback_id = callback_query.get('id')
        
        logger.info(f"üîò Callback: {data}")
        
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–æ–∫
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback
        answer_callback(callback_id, "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ")
        
    except Exception as e:
        logger.error(f"‚ùå Callback error: {e}")


def answer_callback(callback_id, text):
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ callback query"""
    try:
        import requests
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
        requests.post(url, json={"callback_query_id": callback_id, "text": text}, timeout=5)
    except Exception as e:
        logger.error(f"‚ùå Answer callback error: {e}")


# ============= ERROR HANDLERS =============

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404


@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 Error: {error}")
    return jsonify({"error": "Internal server error"}), 500


# ============= MAIN =============

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Starting FerrikFootBot on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
