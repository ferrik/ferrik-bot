"""
üì¶ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–∫—ñ–Ω–≥—É –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å
"""
from enum import Enum
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)


class OrderStatus(Enum):
    """–°—Ç–∞—Ç—É—Å–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    NEW = "new"  # –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    CONFIRMED = "confirmed"  # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
    PREPARING = "preparing"  # –ì–æ—Ç—É—î—Ç—å—Å—è
    READY = "ready"  # –ì–æ—Ç–æ–≤–µ
    DELIVERING = "delivering"  # –î–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è
    DELIVERED = "delivered"  # –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    CANCELLED = "cancelled"  # –°–∫–∞—Å–æ–≤–∞–Ω–æ
    FAILED = "failed"  # –ù–µ –≤–¥–∞–ª–æ—Å—è


class OrderTracking:
    """–°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    
    # –û–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑ –µ–º–æ–¥–∑—ñ
    STATUS_INFO = {
        OrderStatus.NEW: {
            'emoji': 'üÜï',
            'title': '–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
            'message': '–¢–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É.',
            'estimated_time': 0
        },
        OrderStatus.CONFIRMED: {
            'emoji': '‚úÖ',
            'title': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
            'message': '–†–µ—Å—Ç–æ—Ä–∞–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –ø–æ—á–∞–≤ –≥–æ—Ç—É–≤–∞—Ç–∏!',
            'estimated_time': 5
        },
        OrderStatus.PREPARING: {
            'emoji': 'üë®‚Äçüç≥',
            'title': '–ì–æ—Ç—É—î—Ç—å—Å—è',
            'message': '–ù–∞—à—ñ —à–µ—Ñ–∏ –≥–æ—Ç—É—é—Ç—å —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ª—é–±–æ–≤\'—é!',
            'estimated_time': 30
        },
        OrderStatus.READY: {
            'emoji': '‚ú®',
            'title': '–ì–æ—Ç–æ–≤–µ',
            'message': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç–æ–≤–µ! –ö—É—Ä\'—î—Ä –≤–∂–µ –≤ –¥–æ—Ä–æ–∑—ñ –¥–æ —Ç–µ–±–µ.',
            'estimated_time': 0
        },
        OrderStatus.DELIVERING: {
            'emoji': 'üöö',
            'title': '–î–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è',
            'message': '–ö—É—Ä\'—î—Ä –≤–µ–∑–µ —Ç–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –û—á—ñ–∫—É–π –¥–∑–≤—ñ–Ω–∫–∞.',
            'estimated_time': 30
        },
        OrderStatus.DELIVERED: {
            'emoji': 'üéâ',
            'title': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
            'message': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ! –°–º–∞—á–Ω–æ–≥–æ! üòã',
            'estimated_time': 0
        },
        OrderStatus.CANCELLED: {
            'emoji': '‚ùå',
            'title': '–°–∫–∞—Å–æ–≤–∞–Ω–æ',
            'message': '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞, –∑–≤\'—è–∂–∏—Å—å –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.',
            'estimated_time': 0
        },
        OrderStatus.FAILED: {
            'emoji': '‚ö†Ô∏è',
            'title': '–ü—Ä–æ–±–ª–µ–º–∞',
            'message': '–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º. –ù–∞—à–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ —Ç–æ–±–æ—é.',
            'estimated_time': 0
        }
    }
    
    @staticmethod
    def get_status_progress(status: OrderStatus) -> float:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–≥—Ä–µ—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (0-1)"""
        progress_map = {
            OrderStatus.NEW: 0.0,
            OrderStatus.CONFIRMED: 0.2,
            OrderStatus.PREPARING: 0.4,
            OrderStatus.READY: 0.6,
            OrderStatus.DELIVERING: 0.8,
            OrderStatus.DELIVERED: 1.0,
            OrderStatus.CANCELLED: 0.0,
            OrderStatus.FAILED: 0.0
        }
        return progress_map.get(status, 0.0)
    
    @staticmethod
    def format_tracking_info(order: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        
        Args:
            order: Dict –∑ –ø–æ–ª—è–º–∏: order_number, status, created_at, items, total, address
        """
        order_number = order.get('order_number', 'N/A')
        status = OrderStatus(order.get('status', 'new'))
        created_at = order.get('created_at')
        items = order.get('items', [])
        total = order.get('total', 0)
        address = order.get('address', '')
        
        status_info = OrderTracking.STATUS_INFO[status]
        progress = OrderTracking.get_status_progress(status)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        result = f"{status_info['emoji']} **{status_info['title']}**\n\n"
        result += f"üìã –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: `#{order_number}`\n"
        
        # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        bar_length = 20
        filled = int(progress * bar_length)
        bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
        result += f"üìä {bar} {int(progress * 100)}%\n\n"
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å
        result += f"üí¨ _{status_info['message']}_\n\n"
        
        # –û—Ü—ñ–Ω–∫–∞ —á–∞—Å—É
        if status in [OrderStatus.PREPARING, OrderStatus.DELIVERING]:
            estimated_time = status_info['estimated_time']
            if estimated_time > 0:
                result += f"‚è∞ –û—á—ñ–∫—É–≤–∞–Ω–∏–π —á–∞—Å: ~{estimated_time} —Ö–≤\n\n"
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        result += "üçΩÔ∏è **–¢–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:**\n"
        for item in items[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3
            name = item.get('name', '–¢–æ–≤–∞—Ä')
            qty = item.get('quantity', 1)
            result += f"‚Ä¢ {name} x{qty}\n"
        
        if len(items) > 3:
            result += f"‚Ä¢ _...—Ç–∞ —â–µ {len(items) - 3} –ø–æ–∑–∏—Ü—ñ–π_\n"
        
        result += f"\nüí∞ –°—É–º–∞: **{total} –≥—Ä–Ω**\n"
        
        # –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        if address:
            result += f"üìç –ê–¥—Ä–µ—Å–∞: {address}\n"
        
        # –ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        if created_at:
            if isinstance(created_at, str):
                created_at = datetime.fromisoformat(created_at)
            time_str = created_at.strftime("%H:%M, %d.%m.%Y")
            result += f"üïê –û—Ñ–æ—Ä–º–ª–µ–Ω–æ: {time_str}\n"
        
        return result
    
    @staticmethod
    def create_tracking_keyboard(order: Dict) -> Dict:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Ç—Ä–µ–∫—ñ–Ω–≥—É"""
        status = OrderStatus(order.get('status', 'new'))
        order_number = order.get('order_number')
        
        keyboard = {'inline_keyboard': []}
        
        # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        keyboard['inline_keyboard'].append([
            {'text': 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å', 'callback_data': f'track_{order_number}'}
        ])
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö)
        if status in [OrderStatus.NEW, OrderStatus.CONFIRMED]:
            keyboard['inline_keyboard'].append([
                {'text': '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'callback_data': f'cancel_{order_number}'}
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –∑–≤'—è–∑–∫—É –∑ –∫—É—Ä'—î—Ä–æ–º (—è–∫—â–æ –¥–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è)
        if status == OrderStatus.DELIVERING:
            keyboard['inline_keyboard'].append([
                {'text': 'üìû –ó–≤\'—è–∑–∞—Ç–∏—Å—å –∑ –∫—É—Ä\'—î—Ä–æ–º', 'callback_data': f'call_courier_{order_number}'}
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–≥—É–∫—É (—è–∫—â–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ)
        if status == OrderStatus.DELIVERED:
            keyboard['inline_keyboard'].append([
                {'text': '‚≠ê –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫', 'callback_data': f'review_{order_number}'}
            ])
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
        keyboard['inline_keyboard'].append([
            {'text': 'üìú –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å', 'callback_data': 'order_history'},
            {'text': 'üí¨ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞', 'callback_data': 'support'}
        ])
        
        return keyboard
    
    @staticmethod
    def format_order_history(orders: List[Dict], limit: int = 10) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å"""
        if not orders:
            return (
                "üìú **–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å**\n\n"
                "–£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.\n"
                "–ü–µ—Ä–µ–≥–ª—è–Ω—å –º–µ–Ω—é —ñ –∑—Ä–æ–±–∏ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! üòä"
            )
        
        result = f"üìú **–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å** (–æ—Å—Ç–∞–Ω–Ω—ñ {min(len(orders), limit)})\n\n"
        
        for order in orders[:limit]:
            order_number = order.get('order_number', 'N/A')
            status = OrderStatus(order.get('status', 'new'))
            created_at = order.get('created_at')
            total = order.get('total', 0)
            
            status_info = OrderTracking.STATUS_INFO[status]
            
            if isinstance(created_at, str):
                created_at = datetime.fromisoformat(created_at)
            date_str = created_at.strftime("%d.%m.%Y")
            
            result += f"{status_info['emoji']} `#{order_number}`\n"
            result += f"   {date_str} ‚Ä¢ {total} –≥—Ä–Ω ‚Ä¢ {status_info['title']}\n\n"
        
        return result
    
    @staticmethod
    def create_history_keyboard(orders: List[Dict]) -> Dict:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å"""
        keyboard = {'inline_keyboard': []}
        
        for order in orders[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5
            order_number = order.get('order_number')
            status = OrderStatus(order.get('status', 'new'))
            status_info = OrderTracking.STATUS_INFO[status]
            
            keyboard['inline_keyboard'].append([
                {
                    'text': f"{status_info['emoji']} #{order_number}",
                    'callback_data': f'track_{order_number}'
                }
            ])
        
        keyboard['inline_keyboard'].append([
            {'text': 'üîô –ù–∞–∑–∞–¥', 'callback_data': 'main_menu'}
        ])
        
        return keyboard


class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É"""
    
    @staticmethod
    def should_notify(old_status: OrderStatus, new_status: OrderStatus) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞ –≤–∞–∂–ª–∏–≤—ñ —Å—Ç–∞—Ç—É—Å–∏
        important_statuses = [
            OrderStatus.CONFIRMED,
            OrderStatus.PREPARING,
            OrderStatus.READY,
            OrderStatus.DELIVERING,
            OrderStatus.DELIVERED,
            OrderStatus.CANCELLED,
            OrderStatus.FAILED
        ]
        return new_status in important_statuses
    
    @staticmethod
    def get_notification_message(order: Dict, new_status: OrderStatus) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É"""
        order_number = order.get('order_number', 'N/A')
        status_info = OrderTracking.STATUS_INFO[new_status]
        
        message = f"üîî **–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_number}**\n\n"
        message += f"{status_info['emoji']} **{status_info['title']}**\n\n"
        message += f"{status_info['message']}\n\n"
        
        if new_status == OrderStatus.DELIVERED:
            message += "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—å, –≤—Å–µ –±—É–ª–æ —Å–º–∞—á–Ω–æ! üòä\n"
            message += "–ó–∞–ª–∏—à –≤—ñ–¥–≥—É–∫ —ñ –¥–æ–ø–æ–º–æ–∂–∏ —ñ–Ω—à–∏–º –∑ –≤–∏–±–æ—Ä–æ–º!"
        elif new_status == OrderStatus.CANCELLED:
            message += "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: /support"
        
        return message
    
    @staticmethod
    def schedule_reminder(order_id: int, user_id: int, delay_minutes: int = 30):
        """
        –ü–ª–∞–Ω—É—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–¥–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑ Celery –∞–±–æ —ñ–Ω—à–∏–º –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–æ–º)
        
        Args:
            order_id: ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            delay_minutes: –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
        """
        # –ü—Å–µ–≤–¥–æ–∫–æ–¥ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
        # celery.send_task('send_reminder', args=[order_id, user_id], countdown=delay_minutes*60)
        logger.info(f"Scheduled reminder for order {order_id} in {delay_minutes} minutes")


class ReviewSystem:
    """–°–∏—Å—Ç–µ–º–∞ –≤—ñ–¥–≥—É–∫—ñ–≤"""
    
    @staticmethod
    def request_review(order: Dict) -> str:
        """–ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–≥—É–∫ –ø—ñ—Å–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
        order_number = order.get('order_number', 'N/A')
        
        message = f"‚≠ê **–Ø–∫ —Ç–æ–±—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_number}?**\n\n"
        message += "–ë—É–¥–µ–º–æ –≤–¥—è—á–Ω—ñ –∑–∞ —Ç–≤—ñ–π –≤—ñ–¥–≥—É–∫ ‚Äî —Ü–µ –¥–æ–ø–æ–º–∞–≥–∞—î –Ω–∞–º —Å—Ç–∞–≤–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏!\n\n"
        message += "–û—Ü—ñ–Ω–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ 1 –¥–æ 5 –∑—ñ—Ä–æ–∫:"
        
        return message
    
    @staticmethod
    def create_review_keyboard(order_number: str) -> Dict:
        """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏"""
        return {
            'inline_keyboard': [
                [
                    {'text': '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', 'callback_data': f'rate_{order_number}_5'},
                    {'text': '‚≠ê‚≠ê‚≠ê‚≠ê', 'callback_data': f'rate_{order_number}_4'}
                ],
                [
                    {'text': '‚≠ê‚≠ê‚≠ê', 'callback_data': f'rate_{order_number}_3'},
                    {'text': '‚≠ê‚≠ê', 'callback_data': f'rate_{order_number}_2'},
                    {'text': '‚≠ê', 'callback_data': f'rate_{order_number}_1'}
                ],
                [
                    {'text': 'üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä', 'callback_data': f'comment_{order_number}'}
                ]
            ]
        }
    
    @staticmethod
    def format_review_thanks(rating: int, order_number: str) -> str:
        """–ü–æ–¥—è–∫–∞ –∑–∞ –≤—ñ–¥–≥—É–∫"""
        if rating >= 4:
            return (
                f"üéâ –î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–º—ñ–Ω–Ω—É –æ—Ü—ñ–Ω–∫—É!\n\n"
                f"–ù–∞–º –¥—É–∂–µ –ø—Ä–∏—î–º–Ω–æ, —â–æ —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å! üíö\n\n"
                f"–û—Ç—Ä–∏–º—É—î—à +20 –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤ –∑–∞ –≤—ñ–¥–≥—É–∫! ‚≠ê"
            )
        elif rating == 3:
            return (
                f"üôè –î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫!\n\n"
                f"–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º —è–∫–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É.\n\n"
                f"+10 –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤ –∑–∞ –≤—ñ–¥–≥—É–∫! ‚≠ê"
            )
        else:
            return (
                f"üòî –í–∏–±–∞—á, —â–æ –Ω–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å...\n\n"
                f"–¢–≤–æ—è –¥—É–º–∫–∞ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞! –ù–∞–ø–∏—à–∏, —â–æ –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫,\n"
                f"—ñ –º–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–ø—Ä–∞–≤–∏–º–æ. /support\n\n"
                f"+10 –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤ –∑–∞ —á–µ—Å–Ω—ñ—Å—Ç—å! ‚≠ê"
            )


# ============================================================================
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
# ============================================================================
if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    test_order = {
        'order_number': '1234',
        'status': 'preparing',
        'created_at': datetime.now() - timedelta(minutes=15),
        'items': [
            {'name': '–ü—ñ—Ü–∞ "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"', 'quantity': 2},
            {'name': 'Coca-Cola 0.5–ª', 'quantity': 1}
        ],
        'total': 395,
        'address': '–≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 15, –∫–≤. 10'
    }
    
    print("=== –¢—Ä–µ–∫—ñ–Ω–≥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ===\n")
    print(OrderTracking.format_tracking_info(test_order))
    
    print("\n\n=== –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å ===")
    test_orders = [
        {**test_order, 'order_number': '1234', 'status': 'delivered'},
        {**test_order, 'order_number': '1235', 'status': 'preparing'},
        {**test_order, 'order_number': '1236', 'status': 'new'}
    ]
    print(OrderTracking.format_order_history(test_orders))
    
    print("\n\n=== –ó–∞–ø–∏—Ç –≤—ñ–¥–≥—É–∫—É ===")
    print(ReviewSystem.request_review(test_order))
