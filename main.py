import os
import logging
import json
import re
from flask import Flask, request, jsonify
import requests
from handlers.cart import show_cart, add_item_to_cart
from handlers.order import start_checkout_process
from handlers.geo import check_delivery_availability
from services.sheets import init_gspread_client, get_menu_from_sheet, get_item_by_id
from services.gemini import get_gemini_recommendation
from models.user import init_db, get_state, set_state, get_cart, set_cart
from datetime import datetime

try:
    from zoneinfo import ZoneInfo
except ImportError:
    logging.warning("zoneinfo not found. Using naive datetime.")
    ZoneInfo = None

app = Flask(__name__)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler('bot.log')]
)
logger = logging.getLogger("ferrik")

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "Ferrik123").strip()
API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()
OPERATOR_CHAT_ID = os.environ.get("OPERATOR_CHAT_ID", "").strip()
DEFAULT_CITY = os.environ.get("DEFAULT_CITY", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY", "").strip()

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –≤ –ø–∞–º'—è—Ç—ñ
bot_state = {}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç Google Sheets
gspread_client = init_gspread_client()

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É Telegram
def tg_send_message(chat_id, text, reply_markup=None):
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)

    response = requests.post(f"{API_URL}/sendMessage", json=payload)
    return response.json()

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback
def tg_answer_callback(callback_id, text):
    payload = {
        'callback_query_id': callback_id,
        'text': text,
        'show_alert': False
    }
    requests.post(f"{API_URL}/answerCallbackQuery", json=payload)

# === –ü–û–ö–†–ê–©–ï–ù–ù–Ø 1: –í–ò–ù–û–°–ò–ú–û –ü–†–û–ú–ü–¢ –í –û–ö–†–ï–ú–£ –ó–ú–Ü–ù–ù–£ ===
# –¶–µ —Ä–æ–±–∏—Ç—å –∫–æ–¥ —á–∏—Å—Ç—ñ—à–∏–º —ñ –¥–æ–∑–≤–æ–ª—è—î –ª–µ–≥–∫–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ–º–ø—Ç
GEMINI_PROMPT_TEMPLATE = """
–¢–∏ ‚Äî —á–∞—Ç-–±–æ—Ç –¥–ª—è –∫–∞—Ñ–µ. –¢–≤–æ—î —ñ–º'—è FerrikFootBot.
–¢–≤–æ—è –≥–æ–ª–æ–≤–Ω–∞ –º–µ—Ç–∞ ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞–º, –Ω–∞–¥–∞—é—á–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–µ–Ω—é —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—á–∏ –Ω–∞ —ó—Ö–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.

# –ö–æ–Ω—Ç–µ–∫—Å—Ç
–û—Å—å –Ω–∞—à–µ –∞–∫—Ç—É–∞–ª—å–Ω–µ –º–µ–Ω—é —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ª–∏—à–µ —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é. –ù–ï –í–ò–ì–ê–î–£–ô —Å—Ç—Ä–∞–≤, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ –º–µ–Ω—é.

{menu_json}

–¶–µ —ñ—Å—Ç–æ—Ä—ñ—è –Ω–∞—à–æ—ó —Ä–æ–∑–º–æ–≤–∏ (–≤—ñ–¥ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ –¥–æ –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ):
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_prompt}

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
1. –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
2. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¥—Ä—É–∂–Ω—å–æ, –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–æ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.
3. –£—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞—é—Ç—å “ë—Ä—É–Ω—Ç—É–≤–∞—Ç–∏—Å—è –≤–∏–∫–ª—é—á–Ω–æ –Ω–∞ –Ω–∞–¥–∞–Ω–æ–º—É –º–µ–Ω—é.
4. –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –∑–∞–ø–∏—Ç—É—î –ø—Ä–æ —Å—Ç—Ä–∞–≤—É, —è–∫–æ—ó –Ω–µ–º–∞—î –≤ –º–µ–Ω—é, —á–µ—Å–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª—è–π –ø—Ä–æ —Ü–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—Ä–∞–∑—É: '–í–∏–±–∞—á—Ç–µ, —Ü—ñ—î—ó —Å—Ç—Ä–∞–≤–∏ –Ω–µ–º–∞—î –≤ –Ω–∞—à–æ–º—É –º–µ–Ω—é. –ú–æ–∂–ª–∏–≤–æ, —è –º–æ–∂—É –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —â–æ—Å—å —ñ–Ω—à–µ?'.
5. –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –º–µ–Ω—é, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π: '–í–∏–±–∞—á—Ç–µ, —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –ª–∏—à–µ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ —â–æ–¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω—é. –ß–∏–º –º–æ–∂—É –≤–∞—Å –ø–æ—á–∞—Å—Ç—É–≤–∞—Ç–∏?'.
6. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó.
7. –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç —â–æ—Å—å –æ–±—Ä–∞–≤, –º–æ–∂–µ—à –ø–æ—Ä–∞–¥–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Å—Ç—Ä–∞–≤—É —á–∏ –Ω–∞–ø—ñ–π.
8. –í–∏–¥—ñ–ª—è–π **–Ω–∞–∑–≤–∏ —Å—Ç—Ä–∞–≤** —ñ **—Ü—ñ–Ω–∏** –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ.
"""

@app.route("/webhook", methods=["POST"])
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return jsonify({"error": "Invalid token"}), 403

    update = request.json
    logger.info(f"Received update: {update}")

    if "message" in update:
        message = update["message"]
        chat_id = message["chat"]["id"]
        text = message.get("text", "")
        user_id = message["from"]["id"]
        user_name = message["from"].get("first_name", "–î—Ä—É–∂–µ")
        
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
        if text == "/start":
            greeting = generate_personalized_greeting(user_name)
            tg_send_message(chat_id, greeting)
            set_state(user_id, 'main')
        elif text == "/menu":
            menu_data = get_menu_from_sheet(gspread_client, GOOGLE_SHEET_ID)
            menu_text = "<b>–ù–∞—à–µ –º–µ–Ω—é:</b>\n\n"
            categories = {}
            for item in menu_data:
                category = item.get("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–Ü–Ω—à–µ")
                if category not in categories:
                    categories[category] = []
                categories[category].append(f'<b>{item["–°—Ç—Ä–∞–≤–∏"]}</b> - {item["–û–ø–∏—Å"]} - <b>{item["–¶—ñ–Ω–∞"]}</b> –≥—Ä–Ω.')
            
            for category, items in categories.items():
                menu_text += f"<b>{category}</b>\n"
                menu_text += "\n".join(items)
                menu_text += "\n\n"
            
            tg_send_message(chat_id, menu_text)
            
        elif text == "/cart":
            show_cart(chat_id, user_id)
        elif text.startswith("/add_item"):
            try:
                item_id = text.split("_")[2]
                add_item_to_cart(chat_id, user_id, item_id, gspread_client, GOOGLE_SHEET_ID)
            except IndexError:
                tg_send_message(chat_id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /add_item_<ID>")
        elif text == "/checkout":
            start_checkout_process(chat_id, user_id)
        elif text == "/history":
             # –¶–µ –ª–∏—à–µ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
            tg_send_message(chat_id, "–Ü—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –±—É–¥–µ —Ç—É—Ç!")
        elif text == "/help":
            help_message = (
                "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n"
                "/start - –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n"
                "/menu - –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—à–µ –º–µ–Ω—é\n"
                "/cart - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à –∫–æ—à–∏–∫\n"
                "/checkout - –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
                "/history - –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
            )
            tg_send_message(chat_id, help_message)
        else:
            # === –ü–û–ö–†–ê–©–ï–ù–ù–Ø 2: –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û –®–ê–ë–õ–û–ù –ü–†–û–ú–ü–¢–ê ===
            # –¢–µ–ø–µ—Ä –º–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–≤–Ω—é—î–º–æ —à–∞–±–ª–æ–Ω –¥–∞–Ω–∏–º–∏, —â–æ —Ä–æ–±–∏—Ç—å –∫–æ–¥ –ª–∞–∫–æ–Ω—ñ—á–Ω—ñ—à–∏–º
            menu_data = get_menu_from_sheet(gspread_client, GOOGLE_SHEET_ID)
            menu_json = json.dumps(menu_data, ensure_ascii=False, indent=2)

            prompt = GEMINI_PROMPT_TEMPLATE.format(
                menu_json=menu_json,
                user_prompt=text
            )
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, –ø–µ—Ä–µ–¥–∞—é—á–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–º–ø—Ç
            response_text = get_gemini_recommendation(prompt, GEMINI_API_KEY)
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            tg_send_message(chat_id, response_text)

    elif "callback_query" in update:
        callback_query = update["callback_query"]
        chat_id = callback_query["message"]["chat"]["id"]
        query_data = callback_query["data"]
        callback_id = callback_query["id"]
        user_id = callback_query["from"]["id"]
        
        # –û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—ñ–≤
        if query_data.startswith("add_to_cart_"):
            item_id = query_data.replace("add_to_cart_", "")
            add_item_to_cart(chat_id, user_id, item_id, gspread_client, GOOGLE_SHEET_ID)
            tg_answer_callback(callback_id, "–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")
        elif query_data.startswith("remove_from_cart_"):
            item_id = query_data.replace("remove_from_cart_", "")
            cart = get_cart(user_id)
            if item_id in cart:
                del cart[item_id]
                set_cart(user_id, cart)
            show_cart(chat_id, user_id)
            tg_answer_callback(callback_id, "–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞!")

    return jsonify({"status": "ok"})

def generate_personalized_greeting(user_name="–î—Ä—É–∂–µ"):
    user_name = (user_name or '').strip() or '–î—Ä—É–∂–µ'
    current = datetime.now() if not ZoneInfo else datetime.now(ZoneInfo('Europe/Kiev'))
    hour = current.hour

    greeting = f"–î–æ–±—Ä–æ–≥–æ {'—Ä–∞–Ω–∫—É' if 6 <= hour < 12 else '–¥–Ω—è' if 12 <= hour < 18 else '–≤–µ—á–æ—Ä–∞'}, {user_name}! üòä"
    status = "–†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ñ–¥–∫—Ä–∏—Ç–∏–π! üçΩÔ∏è –ì–æ—Ç–æ–≤—ñ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è." if is_restaurant_open() else "–†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä–∏—Ç–∏–π. üòî –ü—Ä–∞—Ü—é—î–º–æ –∑ 9:00 –¥–æ 22:00."
    return f"{greeting}\n\n{status}\n\n–Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ! üçîüçï"

def is_restaurant_open():
    current_hour = datetime.now().hour if not ZoneInfo else datetime.now(ZoneInfo('Europe/Kiev')).hour
    return 9 <= current_hour < 22

# Health check endpoint
@app.route("/health", methods=["GET"])
def health_check():
    return jsonify({"status": "ok", "timestamp": datetime.now().isoformat()})

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
with app.app_context():
    logger.info("Bot initialization started.")
    try:
        init_db()
        logger.info("Database initialized.")
    except Exception as e:
        logger.error(f"Database initialization failed: {e}")

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)
