import os
import logging
import requests
import json
from typing import Optional, Dict, List, Any

logger = logging.getLogger("ferrik.telegram")

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "").strip()
API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
OPERATOR_CHAT_ID = os.environ.get("OPERATOR_CHAT_ID", "").strip()

def tg_send_message(chat_id: int, text: str, reply_markup: Optional[Dict] = None, parse_mode: str = "HTML") -> Optional[Dict]:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    
    if reply_markup:
        payload["reply_markup"] = reply_markup
    
    try:
        response = requests.post(f"{API_URL}/sendMessage", json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to send message to {chat_id}: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error sending message to {chat_id}: {e}")
        return None

def tg_send_photo(chat_id: int, photo_url: str, caption: str = "", reply_markup: Optional[Dict] = None, parse_mode: str = "HTML") -> Optional[Dict]:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º"""
    payload = {
        "chat_id": chat_id,
        "photo": photo_url,
        "caption": caption,
        "parse_mode": parse_mode
    }
    
    if reply_markup:
        payload["reply_markup"] = reply_markup
    
    try:
        response = requests.post(f"{API_URL}/sendPhoto", json=payload, timeout=15)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to send photo to {chat_id}: {e}")
        # Fallback - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        fallback_text = f"{caption}\n\nüì∑ –§–æ—Ç–æ: {photo_url}"
        return tg_send_message(chat_id, fallback_text, reply_markup, parse_mode)
    except Exception as e:
        logger.error(f"Unexpected error sending photo to {chat_id}: {e}")
        return None

def tg_edit_message(chat_id: int, message_id: int, text: str, reply_markup: Optional[Dict] = None, parse_mode: str = "HTML") -> Optional[Dict]:
    """–†–µ–¥–∞–≥—É—î —ñ—Å–Ω—É—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text,
        "parse_mode": parse_mode
    }
    
    if reply_markup:
        payload["reply_markup"] = reply_markup
    
    try:
        response = requests.post(f"{API_URL}/editMessageText", json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to edit message {message_id} in {chat_id}: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error editing message {message_id} in {chat_id}: {e}")
        return None

def tg_edit_message_reply_markup(chat_id: int, message_id: int, reply_markup: Optional[Dict] = None) -> Optional[Dict]:
    """–†–µ–¥–∞–≥—É—î —Ç—ñ–ª—å–∫–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "reply_markup": reply_markup
    }
    
    try:
        response = requests.post(f"{API_URL}/editMessageReplyMarkup", json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to edit message markup {message_id} in {chat_id}: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error editing message markup {message_id} in {chat_id}: {e}")
        return None

def tg_answer_callback(callback_id: str, text: str = "", show_alert: bool = False) -> Optional[Dict]:
    """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ callback query"""
    payload = {
        "callback_query_id": callback_id,
        "text": text,
        "show_alert": show_alert
    }
    
    try:
        response = requests.post(f"{API_URL}/answerCallbackQuery", json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to answer callback {callback_id}: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error answering callback {callback_id}: {e}")
        return None

def tg_delete_message(chat_id: int, message_id: int) -> bool:
    """–í–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    payload = {
        "chat_id": chat_id,
        "message_id": message_id
    }
    
    try:
        response = requests.post(f"{API_URL}/deleteMessage", json=payload, timeout=10)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to delete message {message_id} in {chat_id}: {e}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error deleting message {message_id} in {chat_id}: {e}")
        return False

def tg_send_location(chat_id: int, latitude: float, longitude: float, title: str = "", address: str = "") -> Optional[Dict]:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é"""
    payload = {
        "chat_id": chat_id,
        "latitude": latitude,
        "longitude": longitude
    }
    
    try:
        response = requests.post(f"{API_URL}/sendLocation", json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"Failed to send location to {chat_id}: {e}")
        return None

def tg_send_contact(chat_id: int, phone_number: str, first_name: str, last_name: str = "") -> Optional[Dict]:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∫–æ–Ω—Ç–∞–∫—Ç"""
    payload = {
        "chat_id": chat_id,
        "phone_number": phone_number,
        "first_name": first_name
    }
    
    if last_name:
        payload["last_name"] = last_name
    
    try:
        response = requests.post(f"{API_URL}/sendContact", json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"Failed to send contact to {chat_id}: {e}")
        return None

def tg_get_chat_member(chat_id: int, user_id: int) -> Optional[Dict]:
    """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫–∞ —á–∞—Ç—É"""
    payload = {
        "chat_id": chat_id,
        "user_id": user_id
    }
    
    try:
        response = requests.post(f"{API_URL}/getChatMember", json=payload, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"Failed to get chat member {user_id} in {chat_id}: {e}")
        return None

def notify_operator(message: str, chat_id: int = None, user_info: Dict = None) -> bool:
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"""
    if not OPERATOR_CHAT_ID:
        logger.warning("OPERATOR_CHAT_ID not set, cannot notify operator")
        return False
    
    try:
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_message = f"üîî <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
        
        if chat_id:
            operator_message += f"üë§ <b>Chat ID:</b> {chat_id}\n"
        
        if user_info:
            if user_info.get("first_name"):
                operator_message += f"üìù <b>–Ü–º'—è:</b> {user_info['first_name']}"
                if user_info.get("last_name"):
                    operator_message += f" {user_info['last_name']}"
                operator_message += "\n"
            
            if user_info.get("username"):
                operator_message += f"üè∑Ô∏è <b>Username:</b> @{user_info['username']}\n"
        
        operator_message += f"\nüí¨ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n{message}"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è —à–≤–∏–¥–∫–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        reply_markup = None
        if chat_id:
            reply_markup = {
                "inline_keyboard": [
                    [{"text": "üìû –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É", "callback_data": f"reply_to_{chat_id}"}]
                ]
            }
        
        result = tg_send_message(OPERATOR_CHAT_ID, operator_message, reply_markup)
        return result is not None
        
    except Exception as e:
        logger.error(f"Failed to notify operator: {e}")
        return False

def send_to_user_from_operator(chat_id: int, message: str, operator_name: str = "–û–ø–µ—Ä–∞—Ç–æ—Ä") -> bool:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
    try:
        operator_message = f"üë®‚Äçüíº <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {operator_name}:</b>\n\n{message}"
        result = tg_send_message(chat_id, operator_message)
        return result is not None
    except Exception as e:
        logger.error(f"Failed to send message to user {chat_id} from operator: {e}")
        return False

def create_inline_keyboard(buttons: List[List[Dict[str, str]]]) -> Dict:
    """–°—Ç–≤–æ—Ä—é—î inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É"""
    return {"inline_keyboard": buttons}

def create_reply_keyboard(buttons: List[List[str]], resize_keyboard: bool = True, one_time_keyboard: bool = False) -> Dict:
    """–°—Ç–≤–æ—Ä—é—î reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É"""
    keyboard = []
    for row in buttons:
        keyboard.append([{"text": button} for button in row])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": resize_keyboard,
        "one_time_keyboard": one_time_keyboard
    }

def remove_reply_keyboard() -> Dict:
    """–í–∏–¥–∞–ª—è—î reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É"""
    return {"remove_keyboard": True}

def format_menu_item_message(item: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó –º–µ–Ω—é"""
    message = f"<b>{item.get('name', '–ù–∞–∑–≤–∞ –≤—ñ–¥—Å—É—Ç–Ω—è')}</b>\n\n"
    
    if item.get('description'):
        message += f"üìù {item['description']}\n\n"
    
    message += f"üí∞ <b>–¶—ñ–Ω–∞:</b> {item.get('price', 0):.2f} –≥—Ä–Ω"
    
    if item.get('restaurant'):
        message += f"\nüè™ <b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> {item['restaurant']}"
    
    if item.get('cooking_time'):
        message += f"\n‚è∞ <b>–ß–∞—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è:</b> {item['cooking_time']} —Ö–≤"
    
    if item.get('allergens'):
        message += f"\n‚ö†Ô∏è <b>–ê–ª–µ—Ä–≥–µ–Ω–∏:</b> {item['allergens']}"
    
    if item.get('rating'):
        try:
            rating = float(item['rating'])
            stars = '‚≠ê' * int(rating)
            message += f"\n{stars} <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}/5"
        except (ValueError, TypeError):
            pass
    
    return message

def format_cart_summary(cart: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –ø—ñ–¥—Å—É–º–æ–∫ –∫–æ—à–∏–∫–∞"""
    items = cart.get("items", [])
    if not items:
        return "üõí <b>–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>"
    
    message = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n"
    total = 0
    
    for item in items:
        price = float(item.get("price", 0))
        qty = int(item.get("qty", 0))
        subtotal = price * qty
        total += subtotal
        
        message += f"‚Ä¢ {item.get('name', 'N/A')} √ó {qty}\n"
        message += f"  {price:.2f} –≥—Ä–Ω √ó {qty} = {subtotal:.2f} –≥—Ä–Ω\n\n"
    
    message += f"üí∞ <b>–í—Å—å–æ–≥–æ: {total:.2f} –≥—Ä–Ω</b>"
    
    return message

def format_order_confirmation(order_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    message = "‚úÖ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
    
    # –¢–æ–≤–∞—Ä–∏
    message += "üì¶ <b>–ó–∞–º–æ–≤–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏:</b>\n"
    total = 0
    for item in order_data.get("items", []):
        price = float(item.get("price", 0))
        qty = int(item.get("qty", 0))
        subtotal = price * qty
        total += subtotal
        message += f"‚Ä¢ {item.get('name')} √ó {qty} = {subtotal:.2f} –≥—Ä–Ω\n"
    
    message += f"\nüí∞ <b>–°—É–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤:</b> {total:.2f} –≥—Ä–Ω"
    
    # –î–æ—Å—Ç–∞–≤–∫–∞
    delivery_cost = float(order_data.get("delivery_cost", 0))
    if delivery_cost > 0:
        message += f"\nüöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_cost:.2f} –≥—Ä–Ω"
        message += f"\nüí≥ <b>–î–æ —Å–ø–ª–∞—Ç–∏:</b> {total + delivery_cost:.2f} –≥—Ä–Ω"
    else:
        message += f"\nüèÉ‚Äç‚ôÇÔ∏è <b>–°–∞–º–æ–≤–∏–≤—ñ–∑</b>"
        message += f"\nüí≥ <b>–î–æ —Å–ø–ª–∞—Ç–∏:</b> {total:.2f} –≥—Ä–Ω"
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ –∞–¥—Ä–µ—Å–∞
    if order_data.get("phone"):
        message += f"\n\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order_data['phone']}"
    
    if order_data.get("address"):
        message += f"\nüè† <b>–ê–¥—Ä–µ—Å–∞:</b> {order_data['address']}"
    
    # –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏
    if order_data.get("payment_method"):
        message += f"\nüí∏ <b>–û–ø–ª–∞—Ç–∞:</b> {order_data['payment_method']}"
    
    # –ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    if order_data.get("delivery_time"):
        message += f"\n‚è∞ <b>–ß–∞—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order_data['delivery_time']}"
    
    if order_data.get("notes"):
        message += f"\nüìù <b>–ü—Ä–∏–º—ñ—Ç–∫–∏:</b> {order_data['notes']}"
    
    return message

def validate_phone_number(phone: str) -> bool:
    """–í–∞–ª—ñ–¥—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
    import re
    # –ü—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    cleaned_phone = re.sub(r'[^\d+]', '', phone)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–æ–º–µ—Ä–∏
    patterns = [
        r'^\+380\d{9}$',      # +380XXXXXXXXX
        r'^380\d{9}$',        # 380XXXXXXXXX
        r'^0\d{9}$',          # 0XXXXXXXXX
    ]
    
    for pattern in patterns:
        if re.match(pattern, cleaned_phone):
            return True
    
    return False

def normalize_phone_number(phone: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–æ —Ñ–æ—Ä–º–∞—Ç—É +380XXXXXXXXX"""
    import re
    cleaned_phone = re.sub(r'[^\d+]', '', phone)
    
    if cleaned_phone.startswith('+380') and len(cleaned_phone) == 13:
        return cleaned_phone
    elif cleaned_phone.startswith('380') and len(cleaned_phone) == 12:
        return '+' + cleaned_phone
    elif cleaned_phone.startswith('0') and len(cleaned_phone) == 10:
        return '+38' + cleaned_phone
    elif len(cleaned_phone) == 9:
        return '+380' + cleaned_phone
    
    return phone  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏

def log_telegram_error(error: Exception, action: str, chat_id: int = None) -> None:
    """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏ Telegram API"""
    error_msg = f"Telegram API error during {action}"
    if chat_id:
        error_msg += f" for chat {chat_id}"
    error_msg += f": {error}"
    
    logger.error(error_msg)
    
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–±–æ –∞–ª–µ—Ä—Ç–∏ —Ç—É—Ç
