"""
üíæ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ + –±–µ–π–¥–∂–∏ + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""
import logging
import json
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict

logger = logging.getLogger(__name__)

# ============================================================================
# –ë–µ–π–¥–∂–∏ —Ç–∞ —Ä—ñ–≤–Ω—ñ
# ============================================================================

BADGES = {
    1: {"emoji": "üÜï", "name": "–ù–æ–≤–∞—á–æ–∫", "color": "üîµ"},
    3: {"emoji": "üë®‚Äçüç≥", "name": "–ì—É—Ä–º–∞–Ω", "color": "üü†"},
    10: {"emoji": "üèÜ", "name": "–§–∞–Ω–∞—Ç FerrikFoot", "color": "üü°"},
    25: {"emoji": "‚≠ê", "name": "–ú–∞–π—Å—Ç–µ—Ä —Å–º–∞–∫—É", "color": "‚ú®"},
    50: {"emoji": "üëë", "name": "–õ–µ–≥–µ–Ω–¥–∞", "color": "üëë"},
}

ACHIEVEMENTS = {
    'first_order': {"emoji": "üéØ", "title": "–ü–µ—Ä—à–∏–π –∫—Ä–æ–∫", "bonus": 50},
    'order_5': {"emoji": "üåü", "title": "–ü'—è—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å", "bonus": 100},
    'order_10': {"emoji": "üî•", "title": "–î–µ—Å—è—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å", "bonus": 200},
    'refer_friend': {"emoji": "üë•", "title": "–ü—Ä–∏–≤—ñ–≤ –¥—Ä—É–≥–∞", "bonus": 150},
    'review_posted': {"emoji": "‚≠ê", "title": "–ó–∞–ª–∏—à–∏–≤ –≤—ñ–¥–≥—É–∫", "bonus": 50},
    'challenge_weekly': {"emoji": "üé™", "title": "–ó–∞–≤–µ—Ä—à–∏–≤ —á–µ–ª–ª–µ–Ω–¥–∂", "bonus": 100},
}

# ============================================================================
# –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è (–¥–ª—è –¥–µ–º–æ)
# ============================================================================

_USERS_DATA = {}  # user_id -> session_data
_CARTS = {}  # user_id -> [items]
_SESSIONS_EXPIRY = {}  # user_id -> expiry_time


# ============================================================================
# Session Manager Functions
# ============================================================================

def get_user_session(user_id: int, create_if_missing: bool = True) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    
    if user_id not in _USERS_DATA:
        if create_if_missing:
            _USERS_DATA[user_id] = {
                'user_id': user_id,
                'state': 'idle',
                'order_count': 0,
                'total_spent': 0.0,
                'favorite_items': [],
                'last_order_date': None,
                'created_at': datetime.now().isoformat(),
                'bonus_points': 0,
                'promocodes_used': [],
                'achievements': [],
                'preferences': {},
                'phone': None,
                'address': None,
            }
        else:
            return {}
    
    return _USERS_DATA[user_id]


def update_user_session(user_id: int, updates: Dict[str, Any]):
    """–û–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    session = get_user_session(user_id)
    session.update(updates)
    _USERS_DATA[user_id] = session
    
    logger.info(f"‚úÖ Session updated for user {user_id}: {list(updates.keys())}")


def get_user_cart(user_id: int) -> List[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id not in _CARTS:
        _CARTS[user_id] = []
    
    return _CARTS[user_id]


def add_to_cart(user_id: int, item: Dict[str, Any]) -> bool:
    """–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞"""
    try:
        cart = get_user_cart(user_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—à–∏–∫—É
        for cart_item in cart:
            if cart_item.get('id') == item.get('id'):
                # –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                cart_item['quantity'] = cart_item.get('quantity', 1) + item.get('quantity', 1)
                logger.info(f"üì¶ Item {item.get('name')} quantity updated to {cart_item['quantity']}")
                return True
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä
        cart.append(item)
        _CARTS[user_id] = cart
        
        logger.info(f"‚úÖ Item {item.get('name')} added to cart for user {user_id}")
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Error adding to cart: {e}")
        return False


def remove_from_cart(user_id: int, item_id: str) -> bool:
    """–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –∫–æ—à–∏–∫–∞"""
    try:
        cart = get_user_cart(user_id)
        cart = [item for item in cart if item.get('id') != item_id]
        _CARTS[user_id] = cart
        
        logger.info(f"üóëÔ∏è Item {item_id} removed from cart")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error removing from cart: {e}")
        return False


def update_cart_item(user_id: int, item_id: str, quantity: int) -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫—É"""
    try:
        cart = get_user_cart(user_id)
        
        for item in cart:
            if item.get('id') == item_id:
                if quantity <= 0:
                    remove_from_cart(user_id, item_id)
                else:
                    item['quantity'] = quantity
                logger.info(f"üìù Item {item_id} quantity updated to {quantity}")
                return True
        
        return False
    except Exception as e:
        logger.error(f"‚ùå Error updating cart: {e}")
        return False


def clear_user_cart(user_id: int) -> bool:
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫"""
    try:
        _CARTS[user_id] = []
        logger.info(f"üóëÔ∏è Cart cleared for user {user_id}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error clearing cart: {e}")
        return False


# ============================================================================
# –ë–µ–π–¥–∂–∏ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
# ============================================================================

def get_user_badge(order_count: int) -> Dict[str, str]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–π–¥–∂ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    for count in sorted(BADGES.keys(), reverse=True):
        if order_count >= count:
            badge = BADGES[count]
            return {
                'emoji': badge['emoji'],
                'name': badge['name'],
                'milestone': count,
                'next_milestone': next(
                    (c for c in sorted(BADGES.keys()) if c > count),
                    None
                )
            }
    
    return {'emoji': 'üë§', 'name': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', 'milestone': 0, 'next_milestone': 1}


def award_achievement(user_id: int, achievement_key: str) -> bool:
    """–í–∏–¥–∞–ª–∏—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"""
    try:
        session = get_user_session(user_id)
        achievements = session.get('achievements', [])
        
        if achievement_key not in achievements:
            achievements.append(achievement_key)
            bonus = ACHIEVEMENTS[achievement_key]['bonus']
            
            # –î–æ–¥–∞—î–º–æ –±–æ–Ω—É—Å–∏
            session['bonus_points'] = session.get('bonus_points', 0) + bonus
            
            update_user_session(user_id, {
                'achievements': achievements,
                'bonus_points': session['bonus_points']
            })
            
            logger.info(f"üéâ Achievement '{achievement_key}' awarded to user {user_id} (+{bonus} bonus)")
            return True
        
        return False
    
    except Exception as e:
        logger.error(f"‚ùå Error awarding achievement: {e}")
        return False


def check_and_award_achievements(user_id: int, order_count: int) -> List[str]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω—å"""
    awarded = []
    
    if order_count == 1:
        if award_achievement(user_id, 'first_order'):
            awarded.append('first_order')
    
    elif order_count == 5:
        if award_achievement(user_id, 'order_5'):
            awarded.append('order_5')
    
    elif order_count == 10:
        if award_achievement(user_id, 'order_10'):
            awarded.append('order_10')
    
    return awarded


# ============================================================================
# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# ============================================================================

def get_user_stats(user_id: int) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    session = get_user_session(user_id)
    order_count = session.get('order_count', 0)
    badge = get_user_badge(order_count)
    
    return {
        'user_id': user_id,
        'order_count': order_count,
        'badge': badge,
        'badge_display': f"{badge['emoji']} {badge['name']}",
        'next_badge_in': badge['next_milestone'] - order_count if badge['next_milestone'] else None,
        'total_spent': round(session.get('total_spent', 0), 2),
        'avg_order_value': round(
            session.get('total_spent', 0) / max(order_count, 1), 2
        ),
        'bonus_points': session.get('bonus_points', 0),
        'achievements_count': len(session.get('achievements', [])),
        'last_order_date': session.get('last_order_date'),
        'favorite_item': session.get('favorite_items', [])[-1] if session.get('favorite_items') else None,
        'created_at': session.get('created_at'),
    }


def register_order(
    user_id: int,
    items: List[Dict[str, Any]],
    total_amount: float,
    favorite_item_id: Optional[str] = None
) -> Dict[str, Any]:
    """–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    session = get_user_session(user_id)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
    order_count = session.get('order_count', 0) + 1
    total_spent = session.get('total_spent', 0) + total_amount
    
    # –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î–º–æ —É–ª—é–±–ª–µ–Ω–∏–π —Ç–æ–≤–∞—Ä
    favorite_items = session.get('favorite_items', [])
    if favorite_item_id and favorite_item_id not in favorite_items:
        favorite_items.append(favorite_item_id)
    
    # –û–Ω–æ–≤–ª—è—î–º–æ —Å–µ—Å—ñ—é
    update_user_session(user_id, {
        'order_count': order_count,
        'total_spent': total_spent,
        'favorite_items': favorite_items,
        'last_order_date': datetime.now().isoformat(),
    })
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    awarded = check_and_award_achievements(user_id, order_count)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    stats = get_user_stats(user_id)
    
    result = {
        'stats': stats,
        'achievements_awarded': [ACHIEVEMENTS[key] for key in awarded],
        'new_badge': None,
        'bonus_earned': 0,
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è –±–µ–π–¥–∂
    old_badge = get_user_badge(order_count - 1)
    new_badge = get_user_badge(order_count)
    
    if old_badge['milestone'] != new_badge['milestone']:
        result['new_badge'] = new_badge
        logger.info(f"üèÜ User {user_id} reached new badge: {new_badge['name']}")
    
    return result


# ============================================================================
# –©–æ—Ç–∏–∂–Ω–µ–≤—ñ —á–µ–ª–µ–Ω–¥–∂—ñ
# ============================================================================

def get_weekly_challenge(week: int = 0) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–µ–ª–ª–µ–Ω–¥–∂ —Ç–∏–∂–Ω—è"""
    challenges = [
        {
            'title': 'üåÖ –°–Ω—ñ–¥–∞–Ω–æ–∫ –ß–µ–º–ø—ñ–æ–Ω–∞',
            'description': '–ó–∞–º–æ–≤—Ç–µ 3 —Ä—ñ–∑–Ω—ñ —Å–Ω—ñ–¥–∞–Ω–∫–∏',
            'target': 3,
            'reward': 150,
            'category': 'breakfast'
        },
        {
            'title': 'üçï –ü—ñ—Ü–∞ –ú–∞–Ω—ñ–∞–∫',
            'description': '–ó–∞–º–æ–≤—Ç–µ –ø—ñ—Ü—É 5 —Ä–∞–∑—ñ–≤',
            'target': 5,
            'reward': 200,
            'category': 'pizza'
        },
        {
            'title': 'ü•ó –ó–¥–æ—Ä–æ–≤–µ–Ω—å–∫–æ –á–¥–∏–º–æ',
            'description': '–ó–∞–º–æ–≤—Ç–µ 4 —Å–∞–ª–∞—Ç–∏',
            'target': 4,
            'reward': 120,
            'category': 'salad'
        },
        {
            'title': 'üç£ –°—É—à—ñ –°–µ–Ω—Å–µ–π',
            'description': '–ó–∞–º–æ–≤—Ç–µ —Å—É—à—ñ 6 —Ä–∞–∑—ñ–≤',
            'target': 6,
            'reward': 250,
            'category': 'sushi'
        },
    ]
    
    return challenges[week % len(challenges)]


def get_user_challenge_progress(user_id: int) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    session = get_user_session(user_id)
    challenge = get_weekly_challenge()
    
    progress = session.get('challenge_progress', {})
    current_progress = progress.get(challenge['category'], 0)
    
    return {
        'challenge': challenge,
        'current_progress': current_progress,
        'remaining': max(0, challenge['target'] - current_progress),
        'percentage': min(100, int((current_progress / challenge['target']) * 100)),
        'completed': current_progress >= challenge['target'],
        'reward': challenge['reward'] if current_progress >= challenge['target'] else 0,
    }


# ============================================================================
# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
# ============================================================================

def get_referral_link(user_id: int) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
    # –ü—Ä–æ—Å—Ç–∏–π —Ñ–æ—Ä–º–∞—Ç: t.me/ferrikfoot_bot?ref=user_id
    return f"https://t.me/ferrikfoot_bot?start=ref_{user_id}"


def apply_referral(referrer_id: int, new_user_id: int) -> Dict[str, Any]:
    """–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –±–æ–Ω—É—Å"""
    # –û–±–∏–¥–≤–∞ –æ—Ç—Ä–∏–º—É—é—Ç—å –±–æ–Ω—É—Å
    referrer_session = get_user_session(referrer_id)
    new_session = get_user_session(new_user_id)
    
    referrer_bonus = 100
    new_user_bonus = 100
    
    update_user_session(referrer_id, {
        'bonus_points': referrer_session.get('bonus_points', 0) + referrer_bonus,
        'referred_users': referrer_session.get('referred_users', []) + [new_user_id],
    })
    
    update_user_session(new_user_id, {
        'bonus_points': new_session.get('bonus_points', 0) + new_user_bonus,
        'referred_by': referrer_id,
    })
    
    logger.info(f"‚úÖ Referral applied: {referrer_id} ‚Üí {new_user_id}")
    
    return {
        'referrer_bonus': referrer_bonus,
        'new_user_bonus': new_user_bonus,
        'total_bonus': referrer_bonus + new_user_bonus,
    }


# ============================================================================
# –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –¥–∞–Ω–∏—Ö
# ============================================================================

def cleanup_expired_sessions(max_age_hours: int = 24 * 30):  # 30 –¥–Ω—ñ–≤
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ —Å–µ—Å—ñ—ó"""
    try:
        cutoff_date = (datetime.now() - timedelta(hours=max_age_hours)).isoformat()
        
        expired = [
            uid for uid, session in _USERS_DATA.items()
            if session.get('last_order_date', '') < cutoff_date and 
            session.get('order_count', 0) == 0
        ]
        
        for uid in expired:
            del _USERS_DATA[uid]
            if uid in _CARTS:
                del _CARTS[uid]
        
        logger.info(f"üßπ Cleaned up {len(expired)} expired sessions")
        return len(expired)
    
    except Exception as e:
        logger.error(f"‚ùå Error cleaning sessions: {e}")
        return 0


# ============================================================================
# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—î—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
# ============================================================================

def get_platform_stats() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    active_users = len(_USERS_DATA)
    total_orders = sum(u.get('order_count', 0) for u in _USERS_DATA.values())
    total_revenue = sum(u.get('total_spent', 0) for u in _USERS_DATA.values())
    
    return {
        'active_users': active_users,
        'total_orders': total_orders,
        'total_revenue': round(total_revenue, 2),
        'avg_orders_per_user': round(total_orders / max(active_users, 1), 2),
        'avg_revenue_per_user': round(total_revenue / max(active_users, 1), 2),
    }


# ============================================================================
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
# ============================================================================

if __name__ == "__main__":
    print("=" * 60)
    print("üß™ TESTING SESSION MANAGER")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    print("\n1Ô∏è‚É£ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
    session = get_user_session(123)
    print(f"‚úÖ User 123 created: {session['user_id']}")
    
    # –¢–µ—Å—Ç 2: –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫
    print("\n2Ô∏è‚É£ –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫:")
    add_to_cart(123, {'id': '1', 'name': '–ü—ñ—Ü–∞', 'price': 120, 'quantity': 2})
    add_to_cart(123, {'id': '2', 'name': 'Cola', 'price': 30, 'quantity': 1})
    cart = get_user_cart(123)
    print(f"‚úÖ Cart items: {len(cart)}")
    
    # –¢–µ—Å—Ç 3: –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    print("\n3Ô∏è‚É£ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
    result = register_order(123, cart, 270, favorite_item_id='1')
    print(f"‚úÖ Order registered")
    print(f"   Stats: {result['stats']['order_count']} –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, {result['stats']['badge_display']}")
    
    # –¢–µ—Å—Ç 4: –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    print("\n4Ô∏è‚É£ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:")
    for i in range(4):
        result = register_order(123, cart, 270, favorite_item_id='1')
    print(f"‚úÖ Order count: {result['stats']['order_count']}")
    print(f"‚úÖ Badge: {result['stats']['badge_display']}")
    if result.get('new_badge'):
        print(f"üèÜ NEW BADGE: {result['new_badge']['emoji']} {result['new_badge']['name']}")
    
    # –¢–µ—Å—Ç 5: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
    print("\n5Ô∏è‚É£ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:")
    referral = apply_referral(123, 456)
    print(f"‚úÖ Referral applied: +{referral['total_bonus']} –±–æ–Ω—É—Å—ñ–≤ –æ–±–æ–º")
    
    # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n6Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏:")
    stats = get_platform_stats()
    print(f"‚úÖ Platform stats:")
    for key, value in stats.items():
        print(f"   {key}: {value}")
    
    print("\n" + "=" * 60)
